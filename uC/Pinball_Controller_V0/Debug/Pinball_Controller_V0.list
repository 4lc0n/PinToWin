
Pinball_Controller_V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004574  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08004714  08004714  00014714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004774  08004774  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004774  08004774  00014774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800477c  0800477c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800477c  0800477c  0001477c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004780  08004780  00014780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004784  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049b0  20000010  08004794  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200049c0  08004794  000249c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014de6  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000028ab  00000000  00000000  00034e26  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001098  00000000  00000000  000376d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f70  00000000  00000000  00038770  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002926  00000000  00000000  000396e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cc01  00000000  00000000  0003c006  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009353f  00000000  00000000  00048c07  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dc146  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004508  00000000  00000000  000dc1c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080046fc 	.word	0x080046fc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	080046fc 	.word	0x080046fc

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e4:	f000 fa28 	bl	8000938 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e8:	f000 f816 	bl	8000518 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ec:	f000 f87c 	bl	80005e8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f0:	f001 fb92 	bl	8001c18 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blinkTask */
  blinkTaskHandle = osThreadNew(startBlinkTask, NULL, &blinkTask_attributes);
 80004f4:	4a05      	ldr	r2, [pc, #20]	; (800050c <main+0x2c>)
 80004f6:	2100      	movs	r1, #0
 80004f8:	4805      	ldr	r0, [pc, #20]	; (8000510 <main+0x30>)
 80004fa:	f001 fbf7 	bl	8001cec <osThreadNew>
 80004fe:	4602      	mov	r2, r0
 8000500:	4b04      	ldr	r3, [pc, #16]	; (8000514 <main+0x34>)
 8000502:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000504:	f001 fbbc 	bl	8001c80 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000508:	e7fe      	b.n	8000508 <main+0x28>
 800050a:	bf00      	nop
 800050c:	08004738 	.word	0x08004738
 8000510:	080006f9 	.word	0x080006f9
 8000514:	20004938 	.word	0x20004938

08000518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b094      	sub	sp, #80	; 0x50
 800051c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051e:	f107 0320 	add.w	r3, r7, #32
 8000522:	2230      	movs	r2, #48	; 0x30
 8000524:	2100      	movs	r1, #0
 8000526:	4618      	mov	r0, r3
 8000528:	f004 f8df 	bl	80046ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052c:	f107 030c 	add.w	r3, r7, #12
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
 8000538:	60da      	str	r2, [r3, #12]
 800053a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800053c:	2300      	movs	r3, #0
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	4b27      	ldr	r3, [pc, #156]	; (80005e0 <SystemClock_Config+0xc8>)
 8000542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000544:	4a26      	ldr	r2, [pc, #152]	; (80005e0 <SystemClock_Config+0xc8>)
 8000546:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054a:	6413      	str	r3, [r2, #64]	; 0x40
 800054c:	4b24      	ldr	r3, [pc, #144]	; (80005e0 <SystemClock_Config+0xc8>)
 800054e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000558:	2300      	movs	r3, #0
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	4b21      	ldr	r3, [pc, #132]	; (80005e4 <SystemClock_Config+0xcc>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a20      	ldr	r2, [pc, #128]	; (80005e4 <SystemClock_Config+0xcc>)
 8000562:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000566:	6013      	str	r3, [r2, #0]
 8000568:	4b1e      	ldr	r3, [pc, #120]	; (80005e4 <SystemClock_Config+0xcc>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000574:	2302      	movs	r3, #2
 8000576:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000578:	2301      	movs	r3, #1
 800057a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800057c:	2310      	movs	r3, #16
 800057e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000580:	2302      	movs	r3, #2
 8000582:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000584:	2300      	movs	r3, #0
 8000586:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000588:	2308      	movs	r3, #8
 800058a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800058c:	2364      	movs	r3, #100	; 0x64
 800058e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000590:	2302      	movs	r3, #2
 8000592:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000594:	2304      	movs	r3, #4
 8000596:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000598:	f107 0320 	add.w	r3, r7, #32
 800059c:	4618      	mov	r0, r3
 800059e:	f000 fcbb 	bl	8000f18 <HAL_RCC_OscConfig>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005a8:	f000 f8d6 	bl	8000758 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ac:	230f      	movs	r3, #15
 80005ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b0:	2302      	movs	r3, #2
 80005b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005be:	2300      	movs	r3, #0
 80005c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005c2:	f107 030c 	add.w	r3, r7, #12
 80005c6:	2103      	movs	r1, #3
 80005c8:	4618      	mov	r0, r3
 80005ca:	f000 ff15 	bl	80013f8 <HAL_RCC_ClockConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005d4:	f000 f8c0 	bl	8000758 <Error_Handler>
  }
}
 80005d8:	bf00      	nop
 80005da:	3750      	adds	r7, #80	; 0x50
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	40023800 	.word	0x40023800
 80005e4:	40007000 	.word	0x40007000

080005e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ee:	f107 030c 	add.w	r3, r7, #12
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	4b2a      	ldr	r3, [pc, #168]	; (80006ac <MX_GPIO_Init+0xc4>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a29      	ldr	r2, [pc, #164]	; (80006ac <MX_GPIO_Init+0xc4>)
 8000608:	f043 0304 	orr.w	r3, r3, #4
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b27      	ldr	r3, [pc, #156]	; (80006ac <MX_GPIO_Init+0xc4>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0304 	and.w	r3, r3, #4
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	4b23      	ldr	r3, [pc, #140]	; (80006ac <MX_GPIO_Init+0xc4>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a22      	ldr	r2, [pc, #136]	; (80006ac <MX_GPIO_Init+0xc4>)
 8000624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b20      	ldr	r3, [pc, #128]	; (80006ac <MX_GPIO_Init+0xc4>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	603b      	str	r3, [r7, #0]
 800063a:	4b1c      	ldr	r3, [pc, #112]	; (80006ac <MX_GPIO_Init+0xc4>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a1b      	ldr	r2, [pc, #108]	; (80006ac <MX_GPIO_Init+0xc4>)
 8000640:	f043 0301 	orr.w	r3, r3, #1
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
 8000646:	4b19      	ldr	r3, [pc, #100]	; (80006ac <MX_GPIO_Init+0xc4>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	603b      	str	r3, [r7, #0]
 8000650:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000658:	4815      	ldr	r0, [pc, #84]	; (80006b0 <MX_GPIO_Init+0xc8>)
 800065a:	f000 fc2b 	bl	8000eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 800065e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000662:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000664:	2301      	movs	r3, #1
 8000666:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000668:	2300      	movs	r3, #0
 800066a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066c:	2300      	movs	r3, #0
 800066e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	4619      	mov	r1, r3
 8000676:	480e      	ldr	r0, [pc, #56]	; (80006b0 <MX_GPIO_Init+0xc8>)
 8000678:	f000 fa82 	bl	8000b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 800067c:	2301      	movs	r3, #1
 800067e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000680:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <MX_GPIO_Init+0xcc>)
 8000682:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000684:	2301      	movs	r3, #1
 8000686:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	4619      	mov	r1, r3
 800068e:	480a      	ldr	r0, [pc, #40]	; (80006b8 <MX_GPIO_Init+0xd0>)
 8000690:	f000 fa76 	bl	8000b80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000694:	2200      	movs	r2, #0
 8000696:	2105      	movs	r1, #5
 8000698:	2006      	movs	r0, #6
 800069a:	f000 fa47 	bl	8000b2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800069e:	2006      	movs	r0, #6
 80006a0:	f000 fa60 	bl	8000b64 <HAL_NVIC_EnableIRQ>

}
 80006a4:	bf00      	nop
 80006a6:	3720      	adds	r7, #32
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40023800 	.word	0x40023800
 80006b0:	40020800 	.word	0x40020800
 80006b4:	10310000 	.word	0x10310000
 80006b8:	40020000 	.word	0x40020000

080006bc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */


void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == USER_BUTTON_Pin)
 80006c6:	88fb      	ldrh	r3, [r7, #6]
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d10d      	bne.n	80006e8 <HAL_GPIO_EXTI_Callback+0x2c>
	{
		if(HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin))
 80006cc:	2101      	movs	r1, #1
 80006ce:	4808      	ldr	r0, [pc, #32]	; (80006f0 <HAL_GPIO_EXTI_Callback+0x34>)
 80006d0:	f000 fbd8 	bl	8000e84 <HAL_GPIO_ReadPin>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d003      	beq.n	80006e2 <HAL_GPIO_EXTI_Callback+0x26>
		{
			status_button1 = 1;
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <HAL_GPIO_EXTI_Callback+0x38>)
 80006dc:	2201      	movs	r2, #1
 80006de:	701a      	strb	r2, [r3, #0]
		else
		{
			status_button1 = 0;
		}
	}
}
 80006e0:	e002      	b.n	80006e8 <HAL_GPIO_EXTI_Callback+0x2c>
			status_button1 = 0;
 80006e2:	4b04      	ldr	r3, [pc, #16]	; (80006f4 <HAL_GPIO_EXTI_Callback+0x38>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	701a      	strb	r2, [r3, #0]
}
 80006e8:	bf00      	nop
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40020000 	.word	0x40020000
 80006f4:	2000002c 	.word	0x2000002c

080006f8 <startBlinkTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startBlinkTask */
void startBlinkTask(void *argument)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	  if(status_button1)
 8000700:	4b0a      	ldr	r3, [pc, #40]	; (800072c <startBlinkTask+0x34>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	b2db      	uxtb	r3, r3
 8000706:	2b00      	cmp	r3, #0
 8000708:	d006      	beq.n	8000718 <startBlinkTask+0x20>
	  {
		  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, SET);
 800070a:	2201      	movs	r2, #1
 800070c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000710:	4807      	ldr	r0, [pc, #28]	; (8000730 <startBlinkTask+0x38>)
 8000712:	f000 fbcf 	bl	8000eb4 <HAL_GPIO_WritePin>
 8000716:	e005      	b.n	8000724 <startBlinkTask+0x2c>
	  }
	  else{
		  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, RESET);
 8000718:	2200      	movs	r2, #0
 800071a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800071e:	4804      	ldr	r0, [pc, #16]	; (8000730 <startBlinkTask+0x38>)
 8000720:	f000 fbc8 	bl	8000eb4 <HAL_GPIO_WritePin>
	  }
//	  HAL_GPIO_TogglePin(USER_LED_GPIO_Port, USER_LED_Pin);
    osDelay(100);
 8000724:	2064      	movs	r0, #100	; 0x64
 8000726:	f001 fb87 	bl	8001e38 <osDelay>
	  if(status_button1)
 800072a:	e7e9      	b.n	8000700 <startBlinkTask+0x8>
 800072c:	2000002c 	.word	0x2000002c
 8000730:	40020800 	.word	0x40020800

08000734 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a04      	ldr	r2, [pc, #16]	; (8000754 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d101      	bne.n	800074a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000746:	f000 f919 	bl	800097c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40014000 	.word	0x40014000

08000758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800075c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800075e:	e7fe      	b.n	800075e <Error_Handler+0x6>

08000760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <HAL_MspInit+0x54>)
 800076c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800076e:	4a11      	ldr	r2, [pc, #68]	; (80007b4 <HAL_MspInit+0x54>)
 8000770:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000774:	6453      	str	r3, [r2, #68]	; 0x44
 8000776:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <HAL_MspInit+0x54>)
 8000778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800077a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	603b      	str	r3, [r7, #0]
 8000786:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <HAL_MspInit+0x54>)
 8000788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078a:	4a0a      	ldr	r2, [pc, #40]	; (80007b4 <HAL_MspInit+0x54>)
 800078c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000790:	6413      	str	r3, [r2, #64]	; 0x40
 8000792:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <HAL_MspInit+0x54>)
 8000794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800079a:	603b      	str	r3, [r7, #0]
 800079c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800079e:	2200      	movs	r2, #0
 80007a0:	210f      	movs	r1, #15
 80007a2:	f06f 0001 	mvn.w	r0, #1
 80007a6:	f000 f9c1 	bl	8000b2c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40023800 	.word	0x40023800

080007b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08c      	sub	sp, #48	; 0x30
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM9 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority ,0);
 80007c8:	2200      	movs	r2, #0
 80007ca:	6879      	ldr	r1, [r7, #4]
 80007cc:	2018      	movs	r0, #24
 80007ce:	f000 f9ad 	bl	8000b2c <HAL_NVIC_SetPriority>

  /* Enable the TIM9 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80007d2:	2018      	movs	r0, #24
 80007d4:	f000 f9c6 	bl	8000b64 <HAL_NVIC_EnableIRQ>
  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 80007d8:	2300      	movs	r3, #0
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	4b1e      	ldr	r3, [pc, #120]	; (8000858 <HAL_InitTick+0xa0>)
 80007de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e0:	4a1d      	ldr	r2, [pc, #116]	; (8000858 <HAL_InitTick+0xa0>)
 80007e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007e6:	6453      	str	r3, [r2, #68]	; 0x44
 80007e8:	4b1b      	ldr	r3, [pc, #108]	; (8000858 <HAL_InitTick+0xa0>)
 80007ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007f4:	f107 0210 	add.w	r2, r7, #16
 80007f8:	f107 0314 	add.w	r3, r7, #20
 80007fc:	4611      	mov	r1, r2
 80007fe:	4618      	mov	r0, r3
 8000800:	f000 ffb2 	bl	8001768 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000804:	f000 ff9c 	bl	8001740 <HAL_RCC_GetPCLK2Freq>
 8000808:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800080a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800080c:	4a13      	ldr	r2, [pc, #76]	; (800085c <HAL_InitTick+0xa4>)
 800080e:	fba2 2303 	umull	r2, r3, r2, r3
 8000812:	0c9b      	lsrs	r3, r3, #18
 8000814:	3b01      	subs	r3, #1
 8000816:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <HAL_InitTick+0xa8>)
 800081a:	4a12      	ldr	r2, [pc, #72]	; (8000864 <HAL_InitTick+0xac>)
 800081c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 800081e:	4b10      	ldr	r3, [pc, #64]	; (8000860 <HAL_InitTick+0xa8>)
 8000820:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000824:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8000826:	4a0e      	ldr	r2, [pc, #56]	; (8000860 <HAL_InitTick+0xa8>)
 8000828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800082a:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <HAL_InitTick+0xa8>)
 800082e:	2200      	movs	r2, #0
 8000830:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <HAL_InitTick+0xa8>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim9) == HAL_OK)
 8000838:	4809      	ldr	r0, [pc, #36]	; (8000860 <HAL_InitTick+0xa8>)
 800083a:	f000 ffc7 	bl	80017cc <HAL_TIM_Base_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d104      	bne.n	800084e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim9);
 8000844:	4806      	ldr	r0, [pc, #24]	; (8000860 <HAL_InitTick+0xa8>)
 8000846:	f000 fff6 	bl	8001836 <HAL_TIM_Base_Start_IT>
 800084a:	4603      	mov	r3, r0
 800084c:	e000      	b.n	8000850 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800084e:	2301      	movs	r3, #1
}
 8000850:	4618      	mov	r0, r3
 8000852:	3730      	adds	r7, #48	; 0x30
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40023800 	.word	0x40023800
 800085c:	431bde83 	.word	0x431bde83
 8000860:	2000493c 	.word	0x2000493c
 8000864:	40014000 	.word	0x40014000

08000868 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800086c:	e7fe      	b.n	800086c <NMI_Handler+0x4>

0800086e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000872:	e7fe      	b.n	8000872 <HardFault_Handler+0x4>

08000874 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000878:	e7fe      	b.n	8000878 <MemManage_Handler+0x4>

0800087a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800087e:	e7fe      	b.n	800087e <BusFault_Handler+0x4>

08000880 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000884:	e7fe      	b.n	8000884 <UsageFault_Handler+0x4>

08000886 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000886:	b480      	push	{r7}
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800088a:	bf00      	nop
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr

08000894 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000898:	2001      	movs	r0, #1
 800089a:	f000 fb25 	bl	8000ee8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
	...

080008a4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 80008a8:	4802      	ldr	r0, [pc, #8]	; (80008b4 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80008aa:	f000 ffe8 	bl	800187e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	2000493c 	.word	0x2000493c

080008b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008bc:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <SystemInit+0x28>)
 80008be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008c2:	4a07      	ldr	r2, [pc, #28]	; (80008e0 <SystemInit+0x28>)
 80008c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008cc:	4b04      	ldr	r3, [pc, #16]	; (80008e0 <SystemInit+0x28>)
 80008ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008d2:	609a      	str	r2, [r3, #8]
#endif
}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	e000ed00 	.word	0xe000ed00

080008e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80008e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800091c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80008e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80008ea:	e003      	b.n	80008f4 <LoopCopyDataInit>

080008ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80008ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80008f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80008f2:	3104      	adds	r1, #4

080008f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80008f4:	480b      	ldr	r0, [pc, #44]	; (8000924 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80008f6:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80008f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80008fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80008fc:	d3f6      	bcc.n	80008ec <CopyDataInit>
  ldr  r2, =_sbss
 80008fe:	4a0b      	ldr	r2, [pc, #44]	; (800092c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000900:	e002      	b.n	8000908 <LoopFillZerobss>

08000902 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000902:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000904:	f842 3b04 	str.w	r3, [r2], #4

08000908 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000908:	4b09      	ldr	r3, [pc, #36]	; (8000930 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800090a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800090c:	d3f9      	bcc.n	8000902 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800090e:	f7ff ffd3 	bl	80008b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000912:	f003 febb 	bl	800468c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000916:	f7ff fde3 	bl	80004e0 <main>
  bx  lr    
 800091a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800091c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000920:	08004784 	.word	0x08004784
  ldr  r0, =_sdata
 8000924:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000928:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 800092c:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000930:	200049c0 	.word	0x200049c0

08000934 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000934:	e7fe      	b.n	8000934 <ADC_IRQHandler>
	...

08000938 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800093c:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <HAL_Init+0x40>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a0d      	ldr	r2, [pc, #52]	; (8000978 <HAL_Init+0x40>)
 8000942:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000946:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000948:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <HAL_Init+0x40>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a0a      	ldr	r2, [pc, #40]	; (8000978 <HAL_Init+0x40>)
 800094e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000952:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000954:	4b08      	ldr	r3, [pc, #32]	; (8000978 <HAL_Init+0x40>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a07      	ldr	r2, [pc, #28]	; (8000978 <HAL_Init+0x40>)
 800095a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800095e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000960:	2003      	movs	r0, #3
 8000962:	f000 f8d8 	bl	8000b16 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000966:	2000      	movs	r0, #0
 8000968:	f7ff ff26 	bl	80007b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800096c:	f7ff fef8 	bl	8000760 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000970:	2300      	movs	r3, #0
}
 8000972:	4618      	mov	r0, r3
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40023c00 	.word	0x40023c00

0800097c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <HAL_IncTick+0x20>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	461a      	mov	r2, r3
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <HAL_IncTick+0x24>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4413      	add	r3, r2
 800098c:	4a04      	ldr	r2, [pc, #16]	; (80009a0 <HAL_IncTick+0x24>)
 800098e:	6013      	str	r3, [r2, #0]
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	20000008 	.word	0x20000008
 80009a0:	2000497c 	.word	0x2000497c

080009a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  return uwTick;
 80009a8:	4b03      	ldr	r3, [pc, #12]	; (80009b8 <HAL_GetTick+0x14>)
 80009aa:	681b      	ldr	r3, [r3, #0]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	2000497c 	.word	0x2000497c

080009bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009bc:	b480      	push	{r7}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	f003 0307 	and.w	r3, r3, #7
 80009ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009cc:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <__NVIC_SetPriorityGrouping+0x44>)
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009d2:	68ba      	ldr	r2, [r7, #8]
 80009d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009d8:	4013      	ands	r3, r2
 80009da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ee:	4a04      	ldr	r2, [pc, #16]	; (8000a00 <__NVIC_SetPriorityGrouping+0x44>)
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	60d3      	str	r3, [r2, #12]
}
 80009f4:	bf00      	nop
 80009f6:	3714      	adds	r7, #20
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a08:	4b04      	ldr	r3, [pc, #16]	; (8000a1c <__NVIC_GetPriorityGrouping+0x18>)
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	0a1b      	lsrs	r3, r3, #8
 8000a0e:	f003 0307 	and.w	r3, r3, #7
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	db0b      	blt.n	8000a4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	f003 021f 	and.w	r2, r3, #31
 8000a38:	4907      	ldr	r1, [pc, #28]	; (8000a58 <__NVIC_EnableIRQ+0x38>)
 8000a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3e:	095b      	lsrs	r3, r3, #5
 8000a40:	2001      	movs	r0, #1
 8000a42:	fa00 f202 	lsl.w	r2, r0, r2
 8000a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a4a:	bf00      	nop
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	e000e100 	.word	0xe000e100

08000a5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	6039      	str	r1, [r7, #0]
 8000a66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	db0a      	blt.n	8000a86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	b2da      	uxtb	r2, r3
 8000a74:	490c      	ldr	r1, [pc, #48]	; (8000aa8 <__NVIC_SetPriority+0x4c>)
 8000a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7a:	0112      	lsls	r2, r2, #4
 8000a7c:	b2d2      	uxtb	r2, r2
 8000a7e:	440b      	add	r3, r1
 8000a80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a84:	e00a      	b.n	8000a9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	b2da      	uxtb	r2, r3
 8000a8a:	4908      	ldr	r1, [pc, #32]	; (8000aac <__NVIC_SetPriority+0x50>)
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
 8000a8e:	f003 030f 	and.w	r3, r3, #15
 8000a92:	3b04      	subs	r3, #4
 8000a94:	0112      	lsls	r2, r2, #4
 8000a96:	b2d2      	uxtb	r2, r2
 8000a98:	440b      	add	r3, r1
 8000a9a:	761a      	strb	r2, [r3, #24]
}
 8000a9c:	bf00      	nop
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	e000e100 	.word	0xe000e100
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b089      	sub	sp, #36	; 0x24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	60f8      	str	r0, [r7, #12]
 8000ab8:	60b9      	str	r1, [r7, #8]
 8000aba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	f003 0307 	and.w	r3, r3, #7
 8000ac2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ac4:	69fb      	ldr	r3, [r7, #28]
 8000ac6:	f1c3 0307 	rsb	r3, r3, #7
 8000aca:	2b04      	cmp	r3, #4
 8000acc:	bf28      	it	cs
 8000ace:	2304      	movcs	r3, #4
 8000ad0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	3304      	adds	r3, #4
 8000ad6:	2b06      	cmp	r3, #6
 8000ad8:	d902      	bls.n	8000ae0 <NVIC_EncodePriority+0x30>
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	3b03      	subs	r3, #3
 8000ade:	e000      	b.n	8000ae2 <NVIC_EncodePriority+0x32>
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ae8:	69bb      	ldr	r3, [r7, #24]
 8000aea:	fa02 f303 	lsl.w	r3, r2, r3
 8000aee:	43da      	mvns	r2, r3
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	401a      	ands	r2, r3
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000af8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	fa01 f303 	lsl.w	r3, r1, r3
 8000b02:	43d9      	mvns	r1, r3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b08:	4313      	orrs	r3, r2
         );
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3724      	adds	r7, #36	; 0x24
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr

08000b16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	b082      	sub	sp, #8
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b1e:	6878      	ldr	r0, [r7, #4]
 8000b20:	f7ff ff4c 	bl	80009bc <__NVIC_SetPriorityGrouping>
}
 8000b24:	bf00      	nop
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
 8000b38:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b3e:	f7ff ff61 	bl	8000a04 <__NVIC_GetPriorityGrouping>
 8000b42:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b44:	687a      	ldr	r2, [r7, #4]
 8000b46:	68b9      	ldr	r1, [r7, #8]
 8000b48:	6978      	ldr	r0, [r7, #20]
 8000b4a:	f7ff ffb1 	bl	8000ab0 <NVIC_EncodePriority>
 8000b4e:	4602      	mov	r2, r0
 8000b50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b54:	4611      	mov	r1, r2
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff ff80 	bl	8000a5c <__NVIC_SetPriority>
}
 8000b5c:	bf00      	nop
 8000b5e:	3718      	adds	r7, #24
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff ff54 	bl	8000a20 <__NVIC_EnableIRQ>
}
 8000b78:	bf00      	nop
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b089      	sub	sp, #36	; 0x24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b96:	2300      	movs	r3, #0
 8000b98:	61fb      	str	r3, [r7, #28]
 8000b9a:	e159      	b.n	8000e50 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	697a      	ldr	r2, [r7, #20]
 8000bac:	4013      	ands	r3, r2
 8000bae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bb0:	693a      	ldr	r2, [r7, #16]
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	f040 8148 	bne.w	8000e4a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d00b      	beq.n	8000bda <HAL_GPIO_Init+0x5a>
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	2b02      	cmp	r3, #2
 8000bc8:	d007      	beq.n	8000bda <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bce:	2b11      	cmp	r3, #17
 8000bd0:	d003      	beq.n	8000bda <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	2b12      	cmp	r3, #18
 8000bd8:	d130      	bne.n	8000c3c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	689b      	ldr	r3, [r3, #8]
 8000bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000be0:	69fb      	ldr	r3, [r7, #28]
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	2203      	movs	r2, #3
 8000be6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bea:	43db      	mvns	r3, r3
 8000bec:	69ba      	ldr	r2, [r7, #24]
 8000bee:	4013      	ands	r3, r2
 8000bf0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	68da      	ldr	r2, [r3, #12]
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfe:	69ba      	ldr	r2, [r7, #24]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	69ba      	ldr	r2, [r7, #24]
 8000c08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c10:	2201      	movs	r2, #1
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	43db      	mvns	r3, r3
 8000c1a:	69ba      	ldr	r2, [r7, #24]
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	091b      	lsrs	r3, r3, #4
 8000c26:	f003 0201 	and.w	r2, r3, #1
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	69ba      	ldr	r2, [r7, #24]
 8000c32:	4313      	orrs	r3, r2
 8000c34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	69ba      	ldr	r2, [r7, #24]
 8000c3a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	2203      	movs	r2, #3
 8000c48:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4c:	43db      	mvns	r3, r3
 8000c4e:	69ba      	ldr	r2, [r7, #24]
 8000c50:	4013      	ands	r3, r2
 8000c52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	689a      	ldr	r2, [r3, #8]
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c60:	69ba      	ldr	r2, [r7, #24]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	69ba      	ldr	r2, [r7, #24]
 8000c6a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	2b02      	cmp	r3, #2
 8000c72:	d003      	beq.n	8000c7c <HAL_GPIO_Init+0xfc>
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	2b12      	cmp	r3, #18
 8000c7a:	d123      	bne.n	8000cc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c7c:	69fb      	ldr	r3, [r7, #28]
 8000c7e:	08da      	lsrs	r2, r3, #3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3208      	adds	r2, #8
 8000c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	f003 0307 	and.w	r3, r3, #7
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	220f      	movs	r2, #15
 8000c94:	fa02 f303 	lsl.w	r3, r2, r3
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	69ba      	ldr	r2, [r7, #24]
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	691a      	ldr	r2, [r3, #16]
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	f003 0307 	and.w	r3, r3, #7
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	69ba      	ldr	r2, [r7, #24]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	08da      	lsrs	r2, r3, #3
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	3208      	adds	r2, #8
 8000cbe:	69b9      	ldr	r1, [r7, #24]
 8000cc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	2203      	movs	r2, #3
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	69ba      	ldr	r2, [r7, #24]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f003 0203 	and.w	r2, r3, #3
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	69ba      	ldr	r2, [r7, #24]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	f000 80a2 	beq.w	8000e4a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	4b56      	ldr	r3, [pc, #344]	; (8000e64 <HAL_GPIO_Init+0x2e4>)
 8000d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0e:	4a55      	ldr	r2, [pc, #340]	; (8000e64 <HAL_GPIO_Init+0x2e4>)
 8000d10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d14:	6453      	str	r3, [r2, #68]	; 0x44
 8000d16:	4b53      	ldr	r3, [pc, #332]	; (8000e64 <HAL_GPIO_Init+0x2e4>)
 8000d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d22:	4a51      	ldr	r2, [pc, #324]	; (8000e68 <HAL_GPIO_Init+0x2e8>)
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	089b      	lsrs	r3, r3, #2
 8000d28:	3302      	adds	r3, #2
 8000d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	f003 0303 	and.w	r3, r3, #3
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	220f      	movs	r2, #15
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	43db      	mvns	r3, r3
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	4013      	ands	r3, r2
 8000d44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4a48      	ldr	r2, [pc, #288]	; (8000e6c <HAL_GPIO_Init+0x2ec>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d019      	beq.n	8000d82 <HAL_GPIO_Init+0x202>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a47      	ldr	r2, [pc, #284]	; (8000e70 <HAL_GPIO_Init+0x2f0>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d013      	beq.n	8000d7e <HAL_GPIO_Init+0x1fe>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a46      	ldr	r2, [pc, #280]	; (8000e74 <HAL_GPIO_Init+0x2f4>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d00d      	beq.n	8000d7a <HAL_GPIO_Init+0x1fa>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a45      	ldr	r2, [pc, #276]	; (8000e78 <HAL_GPIO_Init+0x2f8>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d007      	beq.n	8000d76 <HAL_GPIO_Init+0x1f6>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a44      	ldr	r2, [pc, #272]	; (8000e7c <HAL_GPIO_Init+0x2fc>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d101      	bne.n	8000d72 <HAL_GPIO_Init+0x1f2>
 8000d6e:	2304      	movs	r3, #4
 8000d70:	e008      	b.n	8000d84 <HAL_GPIO_Init+0x204>
 8000d72:	2307      	movs	r3, #7
 8000d74:	e006      	b.n	8000d84 <HAL_GPIO_Init+0x204>
 8000d76:	2303      	movs	r3, #3
 8000d78:	e004      	b.n	8000d84 <HAL_GPIO_Init+0x204>
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	e002      	b.n	8000d84 <HAL_GPIO_Init+0x204>
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e000      	b.n	8000d84 <HAL_GPIO_Init+0x204>
 8000d82:	2300      	movs	r3, #0
 8000d84:	69fa      	ldr	r2, [r7, #28]
 8000d86:	f002 0203 	and.w	r2, r2, #3
 8000d8a:	0092      	lsls	r2, r2, #2
 8000d8c:	4093      	lsls	r3, r2
 8000d8e:	69ba      	ldr	r2, [r7, #24]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d94:	4934      	ldr	r1, [pc, #208]	; (8000e68 <HAL_GPIO_Init+0x2e8>)
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	089b      	lsrs	r3, r3, #2
 8000d9a:	3302      	adds	r3, #2
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000da2:	4b37      	ldr	r3, [pc, #220]	; (8000e80 <HAL_GPIO_Init+0x300>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000da8:	693b      	ldr	r3, [r7, #16]
 8000daa:	43db      	mvns	r3, r3
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	4013      	ands	r3, r2
 8000db0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d003      	beq.n	8000dc6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000dc6:	4a2e      	ldr	r2, [pc, #184]	; (8000e80 <HAL_GPIO_Init+0x300>)
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000dcc:	4b2c      	ldr	r3, [pc, #176]	; (8000e80 <HAL_GPIO_Init+0x300>)
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d003      	beq.n	8000df0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000df0:	4a23      	ldr	r2, [pc, #140]	; (8000e80 <HAL_GPIO_Init+0x300>)
 8000df2:	69bb      	ldr	r3, [r7, #24]
 8000df4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000df6:	4b22      	ldr	r3, [pc, #136]	; (8000e80 <HAL_GPIO_Init+0x300>)
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	4013      	ands	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d003      	beq.n	8000e1a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e1a:	4a19      	ldr	r2, [pc, #100]	; (8000e80 <HAL_GPIO_Init+0x300>)
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e20:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <HAL_GPIO_Init+0x300>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d003      	beq.n	8000e44 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e44:	4a0e      	ldr	r2, [pc, #56]	; (8000e80 <HAL_GPIO_Init+0x300>)
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	61fb      	str	r3, [r7, #28]
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	2b0f      	cmp	r3, #15
 8000e54:	f67f aea2 	bls.w	8000b9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e58:	bf00      	nop
 8000e5a:	3724      	adds	r7, #36	; 0x24
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	40023800 	.word	0x40023800
 8000e68:	40013800 	.word	0x40013800
 8000e6c:	40020000 	.word	0x40020000
 8000e70:	40020400 	.word	0x40020400
 8000e74:	40020800 	.word	0x40020800
 8000e78:	40020c00 	.word	0x40020c00
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	40013c00 	.word	0x40013c00

08000e84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	691a      	ldr	r2, [r3, #16]
 8000e94:	887b      	ldrh	r3, [r7, #2]
 8000e96:	4013      	ands	r3, r2
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d002      	beq.n	8000ea2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	73fb      	strb	r3, [r7, #15]
 8000ea0:	e001      	b.n	8000ea6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3714      	adds	r7, #20
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	807b      	strh	r3, [r7, #2]
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ec4:	787b      	ldrb	r3, [r7, #1]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d003      	beq.n	8000ed2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000eca:	887a      	ldrh	r2, [r7, #2]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ed0:	e003      	b.n	8000eda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ed2:	887b      	ldrh	r3, [r7, #2]
 8000ed4:	041a      	lsls	r2, r3, #16
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	619a      	str	r2, [r3, #24]
}
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
	...

08000ee8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000ef2:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ef4:	695a      	ldr	r2, [r3, #20]
 8000ef6:	88fb      	ldrh	r3, [r7, #6]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d006      	beq.n	8000f0c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000efe:	4a05      	ldr	r2, [pc, #20]	; (8000f14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f00:	88fb      	ldrh	r3, [r7, #6]
 8000f02:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f04:	88fb      	ldrh	r3, [r7, #6]
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff fbd8 	bl	80006bc <HAL_GPIO_EXTI_Callback>
  }
}
 8000f0c:	bf00      	nop
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40013c00 	.word	0x40013c00

08000f18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d101      	bne.n	8000f2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	e25b      	b.n	80013e2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d075      	beq.n	8001022 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f36:	4ba3      	ldr	r3, [pc, #652]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	f003 030c 	and.w	r3, r3, #12
 8000f3e:	2b04      	cmp	r3, #4
 8000f40:	d00c      	beq.n	8000f5c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f42:	4ba0      	ldr	r3, [pc, #640]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f4a:	2b08      	cmp	r3, #8
 8000f4c:	d112      	bne.n	8000f74 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f4e:	4b9d      	ldr	r3, [pc, #628]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f5a:	d10b      	bne.n	8000f74 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f5c:	4b99      	ldr	r3, [pc, #612]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d05b      	beq.n	8001020 <HAL_RCC_OscConfig+0x108>
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d157      	bne.n	8001020 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f70:	2301      	movs	r3, #1
 8000f72:	e236      	b.n	80013e2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f7c:	d106      	bne.n	8000f8c <HAL_RCC_OscConfig+0x74>
 8000f7e:	4b91      	ldr	r3, [pc, #580]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a90      	ldr	r2, [pc, #576]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 8000f84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f88:	6013      	str	r3, [r2, #0]
 8000f8a:	e01d      	b.n	8000fc8 <HAL_RCC_OscConfig+0xb0>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f94:	d10c      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x98>
 8000f96:	4b8b      	ldr	r3, [pc, #556]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a8a      	ldr	r2, [pc, #552]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 8000f9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fa0:	6013      	str	r3, [r2, #0]
 8000fa2:	4b88      	ldr	r3, [pc, #544]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a87      	ldr	r2, [pc, #540]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 8000fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fac:	6013      	str	r3, [r2, #0]
 8000fae:	e00b      	b.n	8000fc8 <HAL_RCC_OscConfig+0xb0>
 8000fb0:	4b84      	ldr	r3, [pc, #528]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a83      	ldr	r2, [pc, #524]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 8000fb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fba:	6013      	str	r3, [r2, #0]
 8000fbc:	4b81      	ldr	r3, [pc, #516]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a80      	ldr	r2, [pc, #512]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 8000fc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d013      	beq.n	8000ff8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd0:	f7ff fce8 	bl	80009a4 <HAL_GetTick>
 8000fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fd6:	e008      	b.n	8000fea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fd8:	f7ff fce4 	bl	80009a4 <HAL_GetTick>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	2b64      	cmp	r3, #100	; 0x64
 8000fe4:	d901      	bls.n	8000fea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	e1fb      	b.n	80013e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fea:	4b76      	ldr	r3, [pc, #472]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d0f0      	beq.n	8000fd8 <HAL_RCC_OscConfig+0xc0>
 8000ff6:	e014      	b.n	8001022 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff8:	f7ff fcd4 	bl	80009a4 <HAL_GetTick>
 8000ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ffe:	e008      	b.n	8001012 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001000:	f7ff fcd0 	bl	80009a4 <HAL_GetTick>
 8001004:	4602      	mov	r2, r0
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	2b64      	cmp	r3, #100	; 0x64
 800100c:	d901      	bls.n	8001012 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800100e:	2303      	movs	r3, #3
 8001010:	e1e7      	b.n	80013e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001012:	4b6c      	ldr	r3, [pc, #432]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d1f0      	bne.n	8001000 <HAL_RCC_OscConfig+0xe8>
 800101e:	e000      	b.n	8001022 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001020:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f003 0302 	and.w	r3, r3, #2
 800102a:	2b00      	cmp	r3, #0
 800102c:	d063      	beq.n	80010f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800102e:	4b65      	ldr	r3, [pc, #404]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	f003 030c 	and.w	r3, r3, #12
 8001036:	2b00      	cmp	r3, #0
 8001038:	d00b      	beq.n	8001052 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800103a:	4b62      	ldr	r3, [pc, #392]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001042:	2b08      	cmp	r3, #8
 8001044:	d11c      	bne.n	8001080 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001046:	4b5f      	ldr	r3, [pc, #380]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d116      	bne.n	8001080 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001052:	4b5c      	ldr	r3, [pc, #368]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	2b00      	cmp	r3, #0
 800105c:	d005      	beq.n	800106a <HAL_RCC_OscConfig+0x152>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d001      	beq.n	800106a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e1bb      	b.n	80013e2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800106a:	4b56      	ldr	r3, [pc, #344]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	691b      	ldr	r3, [r3, #16]
 8001076:	00db      	lsls	r3, r3, #3
 8001078:	4952      	ldr	r1, [pc, #328]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 800107a:	4313      	orrs	r3, r2
 800107c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800107e:	e03a      	b.n	80010f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d020      	beq.n	80010ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001088:	4b4f      	ldr	r3, [pc, #316]	; (80011c8 <HAL_RCC_OscConfig+0x2b0>)
 800108a:	2201      	movs	r2, #1
 800108c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800108e:	f7ff fc89 	bl	80009a4 <HAL_GetTick>
 8001092:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001094:	e008      	b.n	80010a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001096:	f7ff fc85 	bl	80009a4 <HAL_GetTick>
 800109a:	4602      	mov	r2, r0
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d901      	bls.n	80010a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80010a4:	2303      	movs	r3, #3
 80010a6:	e19c      	b.n	80013e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010a8:	4b46      	ldr	r3, [pc, #280]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 0302 	and.w	r3, r3, #2
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d0f0      	beq.n	8001096 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010b4:	4b43      	ldr	r3, [pc, #268]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	691b      	ldr	r3, [r3, #16]
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	4940      	ldr	r1, [pc, #256]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 80010c4:	4313      	orrs	r3, r2
 80010c6:	600b      	str	r3, [r1, #0]
 80010c8:	e015      	b.n	80010f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010ca:	4b3f      	ldr	r3, [pc, #252]	; (80011c8 <HAL_RCC_OscConfig+0x2b0>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010d0:	f7ff fc68 	bl	80009a4 <HAL_GetTick>
 80010d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010d6:	e008      	b.n	80010ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010d8:	f7ff fc64 	bl	80009a4 <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d901      	bls.n	80010ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e17b      	b.n	80013e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ea:	4b36      	ldr	r3, [pc, #216]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d1f0      	bne.n	80010d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0308 	and.w	r3, r3, #8
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d030      	beq.n	8001164 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	695b      	ldr	r3, [r3, #20]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d016      	beq.n	8001138 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800110a:	4b30      	ldr	r3, [pc, #192]	; (80011cc <HAL_RCC_OscConfig+0x2b4>)
 800110c:	2201      	movs	r2, #1
 800110e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001110:	f7ff fc48 	bl	80009a4 <HAL_GetTick>
 8001114:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001116:	e008      	b.n	800112a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001118:	f7ff fc44 	bl	80009a4 <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	2b02      	cmp	r3, #2
 8001124:	d901      	bls.n	800112a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001126:	2303      	movs	r3, #3
 8001128:	e15b      	b.n	80013e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800112a:	4b26      	ldr	r3, [pc, #152]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 800112c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	2b00      	cmp	r3, #0
 8001134:	d0f0      	beq.n	8001118 <HAL_RCC_OscConfig+0x200>
 8001136:	e015      	b.n	8001164 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001138:	4b24      	ldr	r3, [pc, #144]	; (80011cc <HAL_RCC_OscConfig+0x2b4>)
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800113e:	f7ff fc31 	bl	80009a4 <HAL_GetTick>
 8001142:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001144:	e008      	b.n	8001158 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001146:	f7ff fc2d 	bl	80009a4 <HAL_GetTick>
 800114a:	4602      	mov	r2, r0
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	2b02      	cmp	r3, #2
 8001152:	d901      	bls.n	8001158 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001154:	2303      	movs	r3, #3
 8001156:	e144      	b.n	80013e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001158:	4b1a      	ldr	r3, [pc, #104]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 800115a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800115c:	f003 0302 	and.w	r3, r3, #2
 8001160:	2b00      	cmp	r3, #0
 8001162:	d1f0      	bne.n	8001146 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 0304 	and.w	r3, r3, #4
 800116c:	2b00      	cmp	r3, #0
 800116e:	f000 80a0 	beq.w	80012b2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001172:	2300      	movs	r3, #0
 8001174:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001176:	4b13      	ldr	r3, [pc, #76]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d10f      	bne.n	80011a2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 8001188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118a:	4a0e      	ldr	r2, [pc, #56]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 800118c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001190:	6413      	str	r3, [r2, #64]	; 0x40
 8001192:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119a:	60bb      	str	r3, [r7, #8]
 800119c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800119e:	2301      	movs	r3, #1
 80011a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011a2:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <HAL_RCC_OscConfig+0x2b8>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d121      	bne.n	80011f2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011ae:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <HAL_RCC_OscConfig+0x2b8>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a07      	ldr	r2, [pc, #28]	; (80011d0 <HAL_RCC_OscConfig+0x2b8>)
 80011b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011ba:	f7ff fbf3 	bl	80009a4 <HAL_GetTick>
 80011be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011c0:	e011      	b.n	80011e6 <HAL_RCC_OscConfig+0x2ce>
 80011c2:	bf00      	nop
 80011c4:	40023800 	.word	0x40023800
 80011c8:	42470000 	.word	0x42470000
 80011cc:	42470e80 	.word	0x42470e80
 80011d0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011d4:	f7ff fbe6 	bl	80009a4 <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d901      	bls.n	80011e6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e0fd      	b.n	80013e2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011e6:	4b81      	ldr	r3, [pc, #516]	; (80013ec <HAL_RCC_OscConfig+0x4d4>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d0f0      	beq.n	80011d4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d106      	bne.n	8001208 <HAL_RCC_OscConfig+0x2f0>
 80011fa:	4b7d      	ldr	r3, [pc, #500]	; (80013f0 <HAL_RCC_OscConfig+0x4d8>)
 80011fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011fe:	4a7c      	ldr	r2, [pc, #496]	; (80013f0 <HAL_RCC_OscConfig+0x4d8>)
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	6713      	str	r3, [r2, #112]	; 0x70
 8001206:	e01c      	b.n	8001242 <HAL_RCC_OscConfig+0x32a>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	2b05      	cmp	r3, #5
 800120e:	d10c      	bne.n	800122a <HAL_RCC_OscConfig+0x312>
 8001210:	4b77      	ldr	r3, [pc, #476]	; (80013f0 <HAL_RCC_OscConfig+0x4d8>)
 8001212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001214:	4a76      	ldr	r2, [pc, #472]	; (80013f0 <HAL_RCC_OscConfig+0x4d8>)
 8001216:	f043 0304 	orr.w	r3, r3, #4
 800121a:	6713      	str	r3, [r2, #112]	; 0x70
 800121c:	4b74      	ldr	r3, [pc, #464]	; (80013f0 <HAL_RCC_OscConfig+0x4d8>)
 800121e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001220:	4a73      	ldr	r2, [pc, #460]	; (80013f0 <HAL_RCC_OscConfig+0x4d8>)
 8001222:	f043 0301 	orr.w	r3, r3, #1
 8001226:	6713      	str	r3, [r2, #112]	; 0x70
 8001228:	e00b      	b.n	8001242 <HAL_RCC_OscConfig+0x32a>
 800122a:	4b71      	ldr	r3, [pc, #452]	; (80013f0 <HAL_RCC_OscConfig+0x4d8>)
 800122c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800122e:	4a70      	ldr	r2, [pc, #448]	; (80013f0 <HAL_RCC_OscConfig+0x4d8>)
 8001230:	f023 0301 	bic.w	r3, r3, #1
 8001234:	6713      	str	r3, [r2, #112]	; 0x70
 8001236:	4b6e      	ldr	r3, [pc, #440]	; (80013f0 <HAL_RCC_OscConfig+0x4d8>)
 8001238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800123a:	4a6d      	ldr	r2, [pc, #436]	; (80013f0 <HAL_RCC_OscConfig+0x4d8>)
 800123c:	f023 0304 	bic.w	r3, r3, #4
 8001240:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d015      	beq.n	8001276 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800124a:	f7ff fbab 	bl	80009a4 <HAL_GetTick>
 800124e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001250:	e00a      	b.n	8001268 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001252:	f7ff fba7 	bl	80009a4 <HAL_GetTick>
 8001256:	4602      	mov	r2, r0
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001260:	4293      	cmp	r3, r2
 8001262:	d901      	bls.n	8001268 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	e0bc      	b.n	80013e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001268:	4b61      	ldr	r3, [pc, #388]	; (80013f0 <HAL_RCC_OscConfig+0x4d8>)
 800126a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800126c:	f003 0302 	and.w	r3, r3, #2
 8001270:	2b00      	cmp	r3, #0
 8001272:	d0ee      	beq.n	8001252 <HAL_RCC_OscConfig+0x33a>
 8001274:	e014      	b.n	80012a0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001276:	f7ff fb95 	bl	80009a4 <HAL_GetTick>
 800127a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800127c:	e00a      	b.n	8001294 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800127e:	f7ff fb91 	bl	80009a4 <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	f241 3288 	movw	r2, #5000	; 0x1388
 800128c:	4293      	cmp	r3, r2
 800128e:	d901      	bls.n	8001294 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001290:	2303      	movs	r3, #3
 8001292:	e0a6      	b.n	80013e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001294:	4b56      	ldr	r3, [pc, #344]	; (80013f0 <HAL_RCC_OscConfig+0x4d8>)
 8001296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001298:	f003 0302 	and.w	r3, r3, #2
 800129c:	2b00      	cmp	r3, #0
 800129e:	d1ee      	bne.n	800127e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012a0:	7dfb      	ldrb	r3, [r7, #23]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d105      	bne.n	80012b2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012a6:	4b52      	ldr	r3, [pc, #328]	; (80013f0 <HAL_RCC_OscConfig+0x4d8>)
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	4a51      	ldr	r2, [pc, #324]	; (80013f0 <HAL_RCC_OscConfig+0x4d8>)
 80012ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	699b      	ldr	r3, [r3, #24]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	f000 8092 	beq.w	80013e0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012bc:	4b4c      	ldr	r3, [pc, #304]	; (80013f0 <HAL_RCC_OscConfig+0x4d8>)
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	f003 030c 	and.w	r3, r3, #12
 80012c4:	2b08      	cmp	r3, #8
 80012c6:	d05c      	beq.n	8001382 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d141      	bne.n	8001354 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012d0:	4b48      	ldr	r3, [pc, #288]	; (80013f4 <HAL_RCC_OscConfig+0x4dc>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d6:	f7ff fb65 	bl	80009a4 <HAL_GetTick>
 80012da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012dc:	e008      	b.n	80012f0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012de:	f7ff fb61 	bl	80009a4 <HAL_GetTick>
 80012e2:	4602      	mov	r2, r0
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d901      	bls.n	80012f0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80012ec:	2303      	movs	r3, #3
 80012ee:	e078      	b.n	80013e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012f0:	4b3f      	ldr	r3, [pc, #252]	; (80013f0 <HAL_RCC_OscConfig+0x4d8>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d1f0      	bne.n	80012de <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	69da      	ldr	r2, [r3, #28]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6a1b      	ldr	r3, [r3, #32]
 8001304:	431a      	orrs	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800130a:	019b      	lsls	r3, r3, #6
 800130c:	431a      	orrs	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001312:	085b      	lsrs	r3, r3, #1
 8001314:	3b01      	subs	r3, #1
 8001316:	041b      	lsls	r3, r3, #16
 8001318:	431a      	orrs	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800131e:	061b      	lsls	r3, r3, #24
 8001320:	4933      	ldr	r1, [pc, #204]	; (80013f0 <HAL_RCC_OscConfig+0x4d8>)
 8001322:	4313      	orrs	r3, r2
 8001324:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001326:	4b33      	ldr	r3, [pc, #204]	; (80013f4 <HAL_RCC_OscConfig+0x4dc>)
 8001328:	2201      	movs	r2, #1
 800132a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132c:	f7ff fb3a 	bl	80009a4 <HAL_GetTick>
 8001330:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001334:	f7ff fb36 	bl	80009a4 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b02      	cmp	r3, #2
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e04d      	b.n	80013e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001346:	4b2a      	ldr	r3, [pc, #168]	; (80013f0 <HAL_RCC_OscConfig+0x4d8>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d0f0      	beq.n	8001334 <HAL_RCC_OscConfig+0x41c>
 8001352:	e045      	b.n	80013e0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001354:	4b27      	ldr	r3, [pc, #156]	; (80013f4 <HAL_RCC_OscConfig+0x4dc>)
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135a:	f7ff fb23 	bl	80009a4 <HAL_GetTick>
 800135e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001360:	e008      	b.n	8001374 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001362:	f7ff fb1f 	bl	80009a4 <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	2b02      	cmp	r3, #2
 800136e:	d901      	bls.n	8001374 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e036      	b.n	80013e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001374:	4b1e      	ldr	r3, [pc, #120]	; (80013f0 <HAL_RCC_OscConfig+0x4d8>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d1f0      	bne.n	8001362 <HAL_RCC_OscConfig+0x44a>
 8001380:	e02e      	b.n	80013e0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	699b      	ldr	r3, [r3, #24]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d101      	bne.n	800138e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e029      	b.n	80013e2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800138e:	4b18      	ldr	r3, [pc, #96]	; (80013f0 <HAL_RCC_OscConfig+0x4d8>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	429a      	cmp	r2, r3
 80013a0:	d11c      	bne.n	80013dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d115      	bne.n	80013dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80013b0:	68fa      	ldr	r2, [r7, #12]
 80013b2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80013b6:	4013      	ands	r3, r2
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80013bc:	4293      	cmp	r3, r2
 80013be:	d10d      	bne.n	80013dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d106      	bne.n	80013dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80013d8:	429a      	cmp	r2, r3
 80013da:	d001      	beq.n	80013e0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e000      	b.n	80013e2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3718      	adds	r7, #24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40007000 	.word	0x40007000
 80013f0:	40023800 	.word	0x40023800
 80013f4:	42470060 	.word	0x42470060

080013f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d101      	bne.n	800140c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e0cc      	b.n	80015a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800140c:	4b68      	ldr	r3, [pc, #416]	; (80015b0 <HAL_RCC_ClockConfig+0x1b8>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 030f 	and.w	r3, r3, #15
 8001414:	683a      	ldr	r2, [r7, #0]
 8001416:	429a      	cmp	r2, r3
 8001418:	d90c      	bls.n	8001434 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800141a:	4b65      	ldr	r3, [pc, #404]	; (80015b0 <HAL_RCC_ClockConfig+0x1b8>)
 800141c:	683a      	ldr	r2, [r7, #0]
 800141e:	b2d2      	uxtb	r2, r2
 8001420:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001422:	4b63      	ldr	r3, [pc, #396]	; (80015b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 030f 	and.w	r3, r3, #15
 800142a:	683a      	ldr	r2, [r7, #0]
 800142c:	429a      	cmp	r2, r3
 800142e:	d001      	beq.n	8001434 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e0b8      	b.n	80015a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	2b00      	cmp	r3, #0
 800143e:	d020      	beq.n	8001482 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0304 	and.w	r3, r3, #4
 8001448:	2b00      	cmp	r3, #0
 800144a:	d005      	beq.n	8001458 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800144c:	4b59      	ldr	r3, [pc, #356]	; (80015b4 <HAL_RCC_ClockConfig+0x1bc>)
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	4a58      	ldr	r2, [pc, #352]	; (80015b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001452:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001456:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0308 	and.w	r3, r3, #8
 8001460:	2b00      	cmp	r3, #0
 8001462:	d005      	beq.n	8001470 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001464:	4b53      	ldr	r3, [pc, #332]	; (80015b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	4a52      	ldr	r2, [pc, #328]	; (80015b4 <HAL_RCC_ClockConfig+0x1bc>)
 800146a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800146e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001470:	4b50      	ldr	r3, [pc, #320]	; (80015b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	494d      	ldr	r1, [pc, #308]	; (80015b4 <HAL_RCC_ClockConfig+0x1bc>)
 800147e:	4313      	orrs	r3, r2
 8001480:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	2b00      	cmp	r3, #0
 800148c:	d044      	beq.n	8001518 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d107      	bne.n	80014a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001496:	4b47      	ldr	r3, [pc, #284]	; (80015b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d119      	bne.n	80014d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e07f      	b.n	80015a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d003      	beq.n	80014b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014b2:	2b03      	cmp	r3, #3
 80014b4:	d107      	bne.n	80014c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014b6:	4b3f      	ldr	r3, [pc, #252]	; (80015b4 <HAL_RCC_ClockConfig+0x1bc>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d109      	bne.n	80014d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e06f      	b.n	80015a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c6:	4b3b      	ldr	r3, [pc, #236]	; (80015b4 <HAL_RCC_ClockConfig+0x1bc>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e067      	b.n	80015a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014d6:	4b37      	ldr	r3, [pc, #220]	; (80015b4 <HAL_RCC_ClockConfig+0x1bc>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f023 0203 	bic.w	r2, r3, #3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	4934      	ldr	r1, [pc, #208]	; (80015b4 <HAL_RCC_ClockConfig+0x1bc>)
 80014e4:	4313      	orrs	r3, r2
 80014e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014e8:	f7ff fa5c 	bl	80009a4 <HAL_GetTick>
 80014ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ee:	e00a      	b.n	8001506 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014f0:	f7ff fa58 	bl	80009a4 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80014fe:	4293      	cmp	r3, r2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e04f      	b.n	80015a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001506:	4b2b      	ldr	r3, [pc, #172]	; (80015b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	f003 020c 	and.w	r2, r3, #12
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	429a      	cmp	r2, r3
 8001516:	d1eb      	bne.n	80014f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001518:	4b25      	ldr	r3, [pc, #148]	; (80015b0 <HAL_RCC_ClockConfig+0x1b8>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 030f 	and.w	r3, r3, #15
 8001520:	683a      	ldr	r2, [r7, #0]
 8001522:	429a      	cmp	r2, r3
 8001524:	d20c      	bcs.n	8001540 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001526:	4b22      	ldr	r3, [pc, #136]	; (80015b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001528:	683a      	ldr	r2, [r7, #0]
 800152a:	b2d2      	uxtb	r2, r2
 800152c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800152e:	4b20      	ldr	r3, [pc, #128]	; (80015b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 030f 	and.w	r3, r3, #15
 8001536:	683a      	ldr	r2, [r7, #0]
 8001538:	429a      	cmp	r2, r3
 800153a:	d001      	beq.n	8001540 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e032      	b.n	80015a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0304 	and.w	r3, r3, #4
 8001548:	2b00      	cmp	r3, #0
 800154a:	d008      	beq.n	800155e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800154c:	4b19      	ldr	r3, [pc, #100]	; (80015b4 <HAL_RCC_ClockConfig+0x1bc>)
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	4916      	ldr	r1, [pc, #88]	; (80015b4 <HAL_RCC_ClockConfig+0x1bc>)
 800155a:	4313      	orrs	r3, r2
 800155c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0308 	and.w	r3, r3, #8
 8001566:	2b00      	cmp	r3, #0
 8001568:	d009      	beq.n	800157e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800156a:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <HAL_RCC_ClockConfig+0x1bc>)
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	691b      	ldr	r3, [r3, #16]
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	490e      	ldr	r1, [pc, #56]	; (80015b4 <HAL_RCC_ClockConfig+0x1bc>)
 800157a:	4313      	orrs	r3, r2
 800157c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800157e:	f000 f821 	bl	80015c4 <HAL_RCC_GetSysClockFreq>
 8001582:	4601      	mov	r1, r0
 8001584:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	091b      	lsrs	r3, r3, #4
 800158a:	f003 030f 	and.w	r3, r3, #15
 800158e:	4a0a      	ldr	r2, [pc, #40]	; (80015b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001590:	5cd3      	ldrb	r3, [r2, r3]
 8001592:	fa21 f303 	lsr.w	r3, r1, r3
 8001596:	4a09      	ldr	r2, [pc, #36]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 8001598:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800159a:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <HAL_RCC_ClockConfig+0x1c8>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff f90a 	bl	80007b8 <HAL_InitTick>

  return HAL_OK;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40023c00 	.word	0x40023c00
 80015b4:	40023800 	.word	0x40023800
 80015b8:	0800475c 	.word	0x0800475c
 80015bc:	20000000 	.word	0x20000000
 80015c0:	20000004 	.word	0x20000004

080015c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80015ca:	2300      	movs	r3, #0
 80015cc:	607b      	str	r3, [r7, #4]
 80015ce:	2300      	movs	r3, #0
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	2300      	movs	r3, #0
 80015d4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80015d6:	2300      	movs	r3, #0
 80015d8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015da:	4b50      	ldr	r3, [pc, #320]	; (800171c <HAL_RCC_GetSysClockFreq+0x158>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f003 030c 	and.w	r3, r3, #12
 80015e2:	2b04      	cmp	r3, #4
 80015e4:	d007      	beq.n	80015f6 <HAL_RCC_GetSysClockFreq+0x32>
 80015e6:	2b08      	cmp	r3, #8
 80015e8:	d008      	beq.n	80015fc <HAL_RCC_GetSysClockFreq+0x38>
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f040 808d 	bne.w	800170a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015f0:	4b4b      	ldr	r3, [pc, #300]	; (8001720 <HAL_RCC_GetSysClockFreq+0x15c>)
 80015f2:	60bb      	str	r3, [r7, #8]
       break;
 80015f4:	e08c      	b.n	8001710 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015f6:	4b4b      	ldr	r3, [pc, #300]	; (8001724 <HAL_RCC_GetSysClockFreq+0x160>)
 80015f8:	60bb      	str	r3, [r7, #8]
      break;
 80015fa:	e089      	b.n	8001710 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015fc:	4b47      	ldr	r3, [pc, #284]	; (800171c <HAL_RCC_GetSysClockFreq+0x158>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001604:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001606:	4b45      	ldr	r3, [pc, #276]	; (800171c <HAL_RCC_GetSysClockFreq+0x158>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d023      	beq.n	800165a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001612:	4b42      	ldr	r3, [pc, #264]	; (800171c <HAL_RCC_GetSysClockFreq+0x158>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	099b      	lsrs	r3, r3, #6
 8001618:	f04f 0400 	mov.w	r4, #0
 800161c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001620:	f04f 0200 	mov.w	r2, #0
 8001624:	ea03 0501 	and.w	r5, r3, r1
 8001628:	ea04 0602 	and.w	r6, r4, r2
 800162c:	4a3d      	ldr	r2, [pc, #244]	; (8001724 <HAL_RCC_GetSysClockFreq+0x160>)
 800162e:	fb02 f106 	mul.w	r1, r2, r6
 8001632:	2200      	movs	r2, #0
 8001634:	fb02 f205 	mul.w	r2, r2, r5
 8001638:	440a      	add	r2, r1
 800163a:	493a      	ldr	r1, [pc, #232]	; (8001724 <HAL_RCC_GetSysClockFreq+0x160>)
 800163c:	fba5 0101 	umull	r0, r1, r5, r1
 8001640:	1853      	adds	r3, r2, r1
 8001642:	4619      	mov	r1, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f04f 0400 	mov.w	r4, #0
 800164a:	461a      	mov	r2, r3
 800164c:	4623      	mov	r3, r4
 800164e:	f7fe fdc7 	bl	80001e0 <__aeabi_uldivmod>
 8001652:	4603      	mov	r3, r0
 8001654:	460c      	mov	r4, r1
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	e049      	b.n	80016ee <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800165a:	4b30      	ldr	r3, [pc, #192]	; (800171c <HAL_RCC_GetSysClockFreq+0x158>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	099b      	lsrs	r3, r3, #6
 8001660:	f04f 0400 	mov.w	r4, #0
 8001664:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001668:	f04f 0200 	mov.w	r2, #0
 800166c:	ea03 0501 	and.w	r5, r3, r1
 8001670:	ea04 0602 	and.w	r6, r4, r2
 8001674:	4629      	mov	r1, r5
 8001676:	4632      	mov	r2, r6
 8001678:	f04f 0300 	mov.w	r3, #0
 800167c:	f04f 0400 	mov.w	r4, #0
 8001680:	0154      	lsls	r4, r2, #5
 8001682:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001686:	014b      	lsls	r3, r1, #5
 8001688:	4619      	mov	r1, r3
 800168a:	4622      	mov	r2, r4
 800168c:	1b49      	subs	r1, r1, r5
 800168e:	eb62 0206 	sbc.w	r2, r2, r6
 8001692:	f04f 0300 	mov.w	r3, #0
 8001696:	f04f 0400 	mov.w	r4, #0
 800169a:	0194      	lsls	r4, r2, #6
 800169c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80016a0:	018b      	lsls	r3, r1, #6
 80016a2:	1a5b      	subs	r3, r3, r1
 80016a4:	eb64 0402 	sbc.w	r4, r4, r2
 80016a8:	f04f 0100 	mov.w	r1, #0
 80016ac:	f04f 0200 	mov.w	r2, #0
 80016b0:	00e2      	lsls	r2, r4, #3
 80016b2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80016b6:	00d9      	lsls	r1, r3, #3
 80016b8:	460b      	mov	r3, r1
 80016ba:	4614      	mov	r4, r2
 80016bc:	195b      	adds	r3, r3, r5
 80016be:	eb44 0406 	adc.w	r4, r4, r6
 80016c2:	f04f 0100 	mov.w	r1, #0
 80016c6:	f04f 0200 	mov.w	r2, #0
 80016ca:	02a2      	lsls	r2, r4, #10
 80016cc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80016d0:	0299      	lsls	r1, r3, #10
 80016d2:	460b      	mov	r3, r1
 80016d4:	4614      	mov	r4, r2
 80016d6:	4618      	mov	r0, r3
 80016d8:	4621      	mov	r1, r4
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f04f 0400 	mov.w	r4, #0
 80016e0:	461a      	mov	r2, r3
 80016e2:	4623      	mov	r3, r4
 80016e4:	f7fe fd7c 	bl	80001e0 <__aeabi_uldivmod>
 80016e8:	4603      	mov	r3, r0
 80016ea:	460c      	mov	r4, r1
 80016ec:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80016ee:	4b0b      	ldr	r3, [pc, #44]	; (800171c <HAL_RCC_GetSysClockFreq+0x158>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	0c1b      	lsrs	r3, r3, #16
 80016f4:	f003 0303 	and.w	r3, r3, #3
 80016f8:	3301      	adds	r3, #1
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	fbb2 f3f3 	udiv	r3, r2, r3
 8001706:	60bb      	str	r3, [r7, #8]
      break;
 8001708:	e002      	b.n	8001710 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800170a:	4b05      	ldr	r3, [pc, #20]	; (8001720 <HAL_RCC_GetSysClockFreq+0x15c>)
 800170c:	60bb      	str	r3, [r7, #8]
      break;
 800170e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001710:	68bb      	ldr	r3, [r7, #8]
}
 8001712:	4618      	mov	r0, r3
 8001714:	3714      	adds	r7, #20
 8001716:	46bd      	mov	sp, r7
 8001718:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800171a:	bf00      	nop
 800171c:	40023800 	.word	0x40023800
 8001720:	00f42400 	.word	0x00f42400
 8001724:	017d7840 	.word	0x017d7840

08001728 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800172c:	4b03      	ldr	r3, [pc, #12]	; (800173c <HAL_RCC_GetHCLKFreq+0x14>)
 800172e:	681b      	ldr	r3, [r3, #0]
}
 8001730:	4618      	mov	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	20000000 	.word	0x20000000

08001740 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001744:	f7ff fff0 	bl	8001728 <HAL_RCC_GetHCLKFreq>
 8001748:	4601      	mov	r1, r0
 800174a:	4b05      	ldr	r3, [pc, #20]	; (8001760 <HAL_RCC_GetPCLK2Freq+0x20>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	0b5b      	lsrs	r3, r3, #13
 8001750:	f003 0307 	and.w	r3, r3, #7
 8001754:	4a03      	ldr	r2, [pc, #12]	; (8001764 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001756:	5cd3      	ldrb	r3, [r2, r3]
 8001758:	fa21 f303 	lsr.w	r3, r1, r3
}
 800175c:	4618      	mov	r0, r3
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40023800 	.word	0x40023800
 8001764:	0800476c 	.word	0x0800476c

08001768 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	220f      	movs	r2, #15
 8001776:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001778:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <HAL_RCC_GetClockConfig+0x5c>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f003 0203 	and.w	r2, r3, #3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001784:	4b0f      	ldr	r3, [pc, #60]	; (80017c4 <HAL_RCC_GetClockConfig+0x5c>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001790:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <HAL_RCC_GetClockConfig+0x5c>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800179c:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <HAL_RCC_GetClockConfig+0x5c>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	08db      	lsrs	r3, r3, #3
 80017a2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80017aa:	4b07      	ldr	r3, [pc, #28]	; (80017c8 <HAL_RCC_GetClockConfig+0x60>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 020f 	and.w	r2, r3, #15
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	601a      	str	r2, [r3, #0]
}
 80017b6:	bf00      	nop
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	40023800 	.word	0x40023800
 80017c8:	40023c00 	.word	0x40023c00

080017cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d101      	bne.n	80017de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e01d      	b.n	800181a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d106      	bne.n	80017f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 f815 	bl	8001822 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2202      	movs	r2, #2
 80017fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3304      	adds	r3, #4
 8001808:	4619      	mov	r1, r3
 800180a:	4610      	mov	r0, r2
 800180c:	f000 f968 	bl	8001ae0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2201      	movs	r2, #1
 8001814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001822:	b480      	push	{r7}
 8001824:	b083      	sub	sp, #12
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800182a:	bf00      	nop
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001836:	b480      	push	{r7}
 8001838:	b085      	sub	sp, #20
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	68da      	ldr	r2, [r3, #12]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f042 0201 	orr.w	r2, r2, #1
 800184c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f003 0307 	and.w	r3, r3, #7
 8001858:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2b06      	cmp	r3, #6
 800185e:	d007      	beq.n	8001870 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f042 0201 	orr.w	r2, r2, #1
 800186e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3714      	adds	r7, #20
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b082      	sub	sp, #8
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	691b      	ldr	r3, [r3, #16]
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	2b02      	cmp	r3, #2
 8001892:	d122      	bne.n	80018da <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d11b      	bne.n	80018da <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f06f 0202 	mvn.w	r2, #2
 80018aa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2201      	movs	r2, #1
 80018b0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	f003 0303 	and.w	r3, r3, #3
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d003      	beq.n	80018c8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f000 f8ee 	bl	8001aa2 <HAL_TIM_IC_CaptureCallback>
 80018c6:	e005      	b.n	80018d4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f000 f8e0 	bl	8001a8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f000 f8f1 	bl	8001ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	691b      	ldr	r3, [r3, #16]
 80018e0:	f003 0304 	and.w	r3, r3, #4
 80018e4:	2b04      	cmp	r3, #4
 80018e6:	d122      	bne.n	800192e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	f003 0304 	and.w	r3, r3, #4
 80018f2:	2b04      	cmp	r3, #4
 80018f4:	d11b      	bne.n	800192e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f06f 0204 	mvn.w	r2, #4
 80018fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2202      	movs	r2, #2
 8001904:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001910:	2b00      	cmp	r3, #0
 8001912:	d003      	beq.n	800191c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f000 f8c4 	bl	8001aa2 <HAL_TIM_IC_CaptureCallback>
 800191a:	e005      	b.n	8001928 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f000 f8b6 	bl	8001a8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f000 f8c7 	bl	8001ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	691b      	ldr	r3, [r3, #16]
 8001934:	f003 0308 	and.w	r3, r3, #8
 8001938:	2b08      	cmp	r3, #8
 800193a:	d122      	bne.n	8001982 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	f003 0308 	and.w	r3, r3, #8
 8001946:	2b08      	cmp	r3, #8
 8001948:	d11b      	bne.n	8001982 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f06f 0208 	mvn.w	r2, #8
 8001952:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2204      	movs	r2, #4
 8001958:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	69db      	ldr	r3, [r3, #28]
 8001960:	f003 0303 	and.w	r3, r3, #3
 8001964:	2b00      	cmp	r3, #0
 8001966:	d003      	beq.n	8001970 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f000 f89a 	bl	8001aa2 <HAL_TIM_IC_CaptureCallback>
 800196e:	e005      	b.n	800197c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f000 f88c 	bl	8001a8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f000 f89d 	bl	8001ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	691b      	ldr	r3, [r3, #16]
 8001988:	f003 0310 	and.w	r3, r3, #16
 800198c:	2b10      	cmp	r3, #16
 800198e:	d122      	bne.n	80019d6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	f003 0310 	and.w	r3, r3, #16
 800199a:	2b10      	cmp	r3, #16
 800199c:	d11b      	bne.n	80019d6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f06f 0210 	mvn.w	r2, #16
 80019a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2208      	movs	r2, #8
 80019ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	69db      	ldr	r3, [r3, #28]
 80019b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d003      	beq.n	80019c4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f000 f870 	bl	8001aa2 <HAL_TIM_IC_CaptureCallback>
 80019c2:	e005      	b.n	80019d0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f000 f862 	bl	8001a8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 f873 	bl	8001ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d10e      	bne.n	8001a02 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d107      	bne.n	8001a02 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f06f 0201 	mvn.w	r2, #1
 80019fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7fe fe99 	bl	8000734 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	691b      	ldr	r3, [r3, #16]
 8001a08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a0c:	2b80      	cmp	r3, #128	; 0x80
 8001a0e:	d10e      	bne.n	8001a2e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a1a:	2b80      	cmp	r3, #128	; 0x80
 8001a1c:	d107      	bne.n	8001a2e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001a26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f000 f8e3 	bl	8001bf4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a38:	2b40      	cmp	r3, #64	; 0x40
 8001a3a:	d10e      	bne.n	8001a5a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a46:	2b40      	cmp	r3, #64	; 0x40
 8001a48:	d107      	bne.n	8001a5a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001a52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f000 f838 	bl	8001aca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	691b      	ldr	r3, [r3, #16]
 8001a60:	f003 0320 	and.w	r3, r3, #32
 8001a64:	2b20      	cmp	r3, #32
 8001a66:	d10e      	bne.n	8001a86 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	f003 0320 	and.w	r3, r3, #32
 8001a72:	2b20      	cmp	r3, #32
 8001a74:	d107      	bne.n	8001a86 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f06f 0220 	mvn.w	r2, #32
 8001a7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f000 f8ad 	bl	8001be0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001a86:	bf00      	nop
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	b083      	sub	sp, #12
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr

08001aa2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	b083      	sub	sp, #12
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001aaa:	bf00      	nop
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b083      	sub	sp, #12
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ad2:	bf00      	nop
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
	...

08001ae0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4a34      	ldr	r2, [pc, #208]	; (8001bc4 <TIM_Base_SetConfig+0xe4>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d00f      	beq.n	8001b18 <TIM_Base_SetConfig+0x38>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001afe:	d00b      	beq.n	8001b18 <TIM_Base_SetConfig+0x38>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a31      	ldr	r2, [pc, #196]	; (8001bc8 <TIM_Base_SetConfig+0xe8>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d007      	beq.n	8001b18 <TIM_Base_SetConfig+0x38>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a30      	ldr	r2, [pc, #192]	; (8001bcc <TIM_Base_SetConfig+0xec>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d003      	beq.n	8001b18 <TIM_Base_SetConfig+0x38>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a2f      	ldr	r2, [pc, #188]	; (8001bd0 <TIM_Base_SetConfig+0xf0>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d108      	bne.n	8001b2a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	68fa      	ldr	r2, [r7, #12]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a25      	ldr	r2, [pc, #148]	; (8001bc4 <TIM_Base_SetConfig+0xe4>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d01b      	beq.n	8001b6a <TIM_Base_SetConfig+0x8a>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b38:	d017      	beq.n	8001b6a <TIM_Base_SetConfig+0x8a>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a22      	ldr	r2, [pc, #136]	; (8001bc8 <TIM_Base_SetConfig+0xe8>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d013      	beq.n	8001b6a <TIM_Base_SetConfig+0x8a>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a21      	ldr	r2, [pc, #132]	; (8001bcc <TIM_Base_SetConfig+0xec>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d00f      	beq.n	8001b6a <TIM_Base_SetConfig+0x8a>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a20      	ldr	r2, [pc, #128]	; (8001bd0 <TIM_Base_SetConfig+0xf0>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d00b      	beq.n	8001b6a <TIM_Base_SetConfig+0x8a>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a1f      	ldr	r2, [pc, #124]	; (8001bd4 <TIM_Base_SetConfig+0xf4>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d007      	beq.n	8001b6a <TIM_Base_SetConfig+0x8a>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a1e      	ldr	r2, [pc, #120]	; (8001bd8 <TIM_Base_SetConfig+0xf8>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d003      	beq.n	8001b6a <TIM_Base_SetConfig+0x8a>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a1d      	ldr	r2, [pc, #116]	; (8001bdc <TIM_Base_SetConfig+0xfc>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d108      	bne.n	8001b7c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	695b      	ldr	r3, [r3, #20]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	68fa      	ldr	r2, [r7, #12]
 8001b8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	689a      	ldr	r2, [r3, #8]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	4a08      	ldr	r2, [pc, #32]	; (8001bc4 <TIM_Base_SetConfig+0xe4>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d103      	bne.n	8001bb0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	691a      	ldr	r2, [r3, #16]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	615a      	str	r2, [r3, #20]
}
 8001bb6:	bf00      	nop
 8001bb8:	3714      	adds	r7, #20
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	40010000 	.word	0x40010000
 8001bc8:	40000400 	.word	0x40000400
 8001bcc:	40000800 	.word	0x40000800
 8001bd0:	40000c00 	.word	0x40000c00
 8001bd4:	40014000 	.word	0x40014000
 8001bd8:	40014400 	.word	0x40014400
 8001bdc:	40014800 	.word	0x40014800

08001be0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
	...

08001c18 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001c1e:	f3ef 8305 	mrs	r3, IPSR
 8001c22:	60bb      	str	r3, [r7, #8]
  return(result);
 8001c24:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d10f      	bne.n	8001c4a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c2a:	f3ef 8310 	mrs	r3, PRIMASK
 8001c2e:	607b      	str	r3, [r7, #4]
  return(result);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d105      	bne.n	8001c42 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001c36:	f3ef 8311 	mrs	r3, BASEPRI
 8001c3a:	603b      	str	r3, [r7, #0]
  return(result);
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d007      	beq.n	8001c52 <osKernelInitialize+0x3a>
 8001c42:	4b0e      	ldr	r3, [pc, #56]	; (8001c7c <osKernelInitialize+0x64>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d103      	bne.n	8001c52 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8001c4a:	f06f 0305 	mvn.w	r3, #5
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	e00c      	b.n	8001c6c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001c52:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <osKernelInitialize+0x64>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d105      	bne.n	8001c66 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001c5a:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <osKernelInitialize+0x64>)
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001c60:	2300      	movs	r3, #0
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	e002      	b.n	8001c6c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001c66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c6a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3714      	adds	r7, #20
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	20000030 	.word	0x20000030

08001c80 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001c86:	f3ef 8305 	mrs	r3, IPSR
 8001c8a:	60bb      	str	r3, [r7, #8]
  return(result);
 8001c8c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d10f      	bne.n	8001cb2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c92:	f3ef 8310 	mrs	r3, PRIMASK
 8001c96:	607b      	str	r3, [r7, #4]
  return(result);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d105      	bne.n	8001caa <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001c9e:	f3ef 8311 	mrs	r3, BASEPRI
 8001ca2:	603b      	str	r3, [r7, #0]
  return(result);
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d007      	beq.n	8001cba <osKernelStart+0x3a>
 8001caa:	4b0f      	ldr	r3, [pc, #60]	; (8001ce8 <osKernelStart+0x68>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d103      	bne.n	8001cba <osKernelStart+0x3a>
    stat = osErrorISR;
 8001cb2:	f06f 0305 	mvn.w	r3, #5
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	e010      	b.n	8001cdc <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001cba:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <osKernelStart+0x68>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d109      	bne.n	8001cd6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001cc2:	f7ff ffa1 	bl	8001c08 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001cc6:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <osKernelStart+0x68>)
 8001cc8:	2202      	movs	r2, #2
 8001cca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001ccc:	f001 f870 	bl	8002db0 <vTaskStartScheduler>
      stat = osOK;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	e002      	b.n	8001cdc <osKernelStart+0x5c>
    } else {
      stat = osError;
 8001cd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cda:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20000030 	.word	0x20000030

08001cec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b090      	sub	sp, #64	; 0x40
 8001cf0:	af04      	add	r7, sp, #16
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001cfc:	f3ef 8305 	mrs	r3, IPSR
 8001d00:	61fb      	str	r3, [r7, #28]
  return(result);
 8001d02:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f040 808f 	bne.w	8001e28 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d0a:	f3ef 8310 	mrs	r3, PRIMASK
 8001d0e:	61bb      	str	r3, [r7, #24]
  return(result);
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d105      	bne.n	8001d22 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001d16:	f3ef 8311 	mrs	r3, BASEPRI
 8001d1a:	617b      	str	r3, [r7, #20]
  return(result);
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <osThreadNew+0x3e>
 8001d22:	4b44      	ldr	r3, [pc, #272]	; (8001e34 <osThreadNew+0x148>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d07e      	beq.n	8001e28 <osThreadNew+0x13c>
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d07b      	beq.n	8001e28 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8001d30:	2380      	movs	r3, #128	; 0x80
 8001d32:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8001d34:	2318      	movs	r3, #24
 8001d36:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8001d3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d40:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d045      	beq.n	8001dd4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d002      	beq.n	8001d56 <osThreadNew+0x6a>
        name = attr->name;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	699b      	ldr	r3, [r3, #24]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d002      	beq.n	8001d64 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d008      	beq.n	8001d7c <osThreadNew+0x90>
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6c:	2b38      	cmp	r3, #56	; 0x38
 8001d6e:	d805      	bhi.n	8001d7c <osThreadNew+0x90>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <osThreadNew+0x94>
        return (NULL);
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	e054      	b.n	8001e2a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	695b      	ldr	r3, [r3, #20]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d003      	beq.n	8001d90 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	695b      	ldr	r3, [r3, #20]
 8001d8c:	089b      	lsrs	r3, r3, #2
 8001d8e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d00e      	beq.n	8001db6 <osThreadNew+0xca>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	2b5b      	cmp	r3, #91	; 0x5b
 8001d9e:	d90a      	bls.n	8001db6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d006      	beq.n	8001db6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	695b      	ldr	r3, [r3, #20]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d002      	beq.n	8001db6 <osThreadNew+0xca>
        mem = 1;
 8001db0:	2301      	movs	r3, #1
 8001db2:	623b      	str	r3, [r7, #32]
 8001db4:	e010      	b.n	8001dd8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d10c      	bne.n	8001dd8 <osThreadNew+0xec>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d108      	bne.n	8001dd8 <osThreadNew+0xec>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d104      	bne.n	8001dd8 <osThreadNew+0xec>
          mem = 0;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	623b      	str	r3, [r7, #32]
 8001dd2:	e001      	b.n	8001dd8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8001dd8:	6a3b      	ldr	r3, [r7, #32]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d110      	bne.n	8001e00 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001de6:	9202      	str	r2, [sp, #8]
 8001de8:	9301      	str	r3, [sp, #4]
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	9300      	str	r3, [sp, #0]
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001df2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001df4:	68f8      	ldr	r0, [r7, #12]
 8001df6:	f000 fe09 	bl	8002a0c <xTaskCreateStatic>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	613b      	str	r3, [r7, #16]
 8001dfe:	e013      	b.n	8001e28 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8001e00:	6a3b      	ldr	r3, [r7, #32]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d110      	bne.n	8001e28 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	f107 0310 	add.w	r3, r7, #16
 8001e0e:	9301      	str	r3, [sp, #4]
 8001e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001e18:	68f8      	ldr	r0, [r7, #12]
 8001e1a:	f000 fe51 	bl	8002ac0 <xTaskCreate>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d001      	beq.n	8001e28 <osThreadNew+0x13c>
          hTask = NULL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001e28:	693b      	ldr	r3, [r7, #16]
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3730      	adds	r7, #48	; 0x30
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20000030 	.word	0x20000030

08001e38 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e40:	f3ef 8305 	mrs	r3, IPSR
 8001e44:	613b      	str	r3, [r7, #16]
  return(result);
 8001e46:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d10f      	bne.n	8001e6c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e4c:	f3ef 8310 	mrs	r3, PRIMASK
 8001e50:	60fb      	str	r3, [r7, #12]
  return(result);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d105      	bne.n	8001e64 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001e58:	f3ef 8311 	mrs	r3, BASEPRI
 8001e5c:	60bb      	str	r3, [r7, #8]
  return(result);
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d007      	beq.n	8001e74 <osDelay+0x3c>
 8001e64:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <osDelay+0x58>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d103      	bne.n	8001e74 <osDelay+0x3c>
    stat = osErrorISR;
 8001e6c:	f06f 0305 	mvn.w	r3, #5
 8001e70:	617b      	str	r3, [r7, #20]
 8001e72:	e007      	b.n	8001e84 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d002      	beq.n	8001e84 <osDelay+0x4c>
      vTaskDelay(ticks);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 ff62 	bl	8002d48 <vTaskDelay>
    }
  }

  return (stat);
 8001e84:	697b      	ldr	r3, [r7, #20]
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3718      	adds	r7, #24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20000030 	.word	0x20000030

08001e94 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	4a07      	ldr	r2, [pc, #28]	; (8001ec0 <vApplicationGetIdleTaskMemory+0x2c>)
 8001ea4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	4a06      	ldr	r2, [pc, #24]	; (8001ec4 <vApplicationGetIdleTaskMemory+0x30>)
 8001eaa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2280      	movs	r2, #128	; 0x80
 8001eb0:	601a      	str	r2, [r3, #0]
}
 8001eb2:	bf00      	nop
 8001eb4:	3714      	adds	r7, #20
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	20000034 	.word	0x20000034
 8001ec4:	20000090 	.word	0x20000090

08001ec8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4a07      	ldr	r2, [pc, #28]	; (8001ef4 <vApplicationGetTimerTaskMemory+0x2c>)
 8001ed8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	4a06      	ldr	r2, [pc, #24]	; (8001ef8 <vApplicationGetTimerTaskMemory+0x30>)
 8001ede:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ee6:	601a      	str	r2, [r3, #0]
}
 8001ee8:	bf00      	nop
 8001eea:	3714      	adds	r7, #20
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	20000290 	.word	0x20000290
 8001ef8:	200002ec 	.word	0x200002ec

08001efc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f103 0208 	add.w	r2, r3, #8
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f14:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f103 0208 	add.w	r2, r3, #8
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f103 0208 	add.w	r2, r3, #8
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001f4a:	bf00      	nop
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001f56:	b480      	push	{r7}
 8001f58:	b085      	sub	sp, #20
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
 8001f5e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	689a      	ldr	r2, [r3, #8]
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	1c5a      	adds	r2, r3, #1
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	601a      	str	r2, [r3, #0]
}
 8001f92:	bf00      	nop
 8001f94:	3714      	adds	r7, #20
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b085      	sub	sp, #20
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
 8001fa6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fb4:	d103      	bne.n	8001fbe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	e00c      	b.n	8001fd8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	3308      	adds	r3, #8
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	e002      	b.n	8001fcc <vListInsert+0x2e>
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68ba      	ldr	r2, [r7, #8]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d2f6      	bcs.n	8001fc6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	685a      	ldr	r2, [r3, #4]
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	683a      	ldr	r2, [r7, #0]
 8001fe6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	1c5a      	adds	r2, r3, #1
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	601a      	str	r2, [r3, #0]
}
 8002004:	bf00      	nop
 8002006:	3714      	adds	r7, #20
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	6892      	ldr	r2, [r2, #8]
 8002026:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	6852      	ldr	r2, [r2, #4]
 8002030:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	429a      	cmp	r2, r3
 800203a:	d103      	bne.n	8002044 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689a      	ldr	r2, [r3, #8]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	1e5a      	subs	r2, r3, #1
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3714      	adds	r7, #20
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d109      	bne.n	800208c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800207c:	f383 8811 	msr	BASEPRI, r3
 8002080:	f3bf 8f6f 	isb	sy
 8002084:	f3bf 8f4f 	dsb	sy
 8002088:	60bb      	str	r3, [r7, #8]
 800208a:	e7fe      	b.n	800208a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800208c:	f002 f80e 	bl	80040ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002098:	68f9      	ldr	r1, [r7, #12]
 800209a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800209c:	fb01 f303 	mul.w	r3, r1, r3
 80020a0:	441a      	add	r2, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2200      	movs	r2, #0
 80020aa:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020bc:	3b01      	subs	r3, #1
 80020be:	68f9      	ldr	r1, [r7, #12]
 80020c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80020c2:	fb01 f303 	mul.w	r3, r1, r3
 80020c6:	441a      	add	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	22ff      	movs	r2, #255	; 0xff
 80020d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	22ff      	movs	r2, #255	; 0xff
 80020d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d114      	bne.n	800210c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d01a      	beq.n	8002120 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	3310      	adds	r3, #16
 80020ee:	4618      	mov	r0, r3
 80020f0:	f001 f8de 	bl	80032b0 <xTaskRemoveFromEventList>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d012      	beq.n	8002120 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80020fa:	4b0d      	ldr	r3, [pc, #52]	; (8002130 <xQueueGenericReset+0xcc>)
 80020fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	f3bf 8f4f 	dsb	sy
 8002106:	f3bf 8f6f 	isb	sy
 800210a:	e009      	b.n	8002120 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	3310      	adds	r3, #16
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff fef3 	bl	8001efc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	3324      	adds	r3, #36	; 0x24
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff feee 	bl	8001efc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002120:	f001 fff2 	bl	8004108 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002124:	2301      	movs	r3, #1
}
 8002126:	4618      	mov	r0, r3
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	e000ed04 	.word	0xe000ed04

08002134 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002134:	b580      	push	{r7, lr}
 8002136:	b08e      	sub	sp, #56	; 0x38
 8002138:	af02      	add	r7, sp, #8
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
 8002140:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d109      	bne.n	800215c <xQueueGenericCreateStatic+0x28>
 8002148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800214c:	f383 8811 	msr	BASEPRI, r3
 8002150:	f3bf 8f6f 	isb	sy
 8002154:	f3bf 8f4f 	dsb	sy
 8002158:	62bb      	str	r3, [r7, #40]	; 0x28
 800215a:	e7fe      	b.n	800215a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d109      	bne.n	8002176 <xQueueGenericCreateStatic+0x42>
 8002162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002166:	f383 8811 	msr	BASEPRI, r3
 800216a:	f3bf 8f6f 	isb	sy
 800216e:	f3bf 8f4f 	dsb	sy
 8002172:	627b      	str	r3, [r7, #36]	; 0x24
 8002174:	e7fe      	b.n	8002174 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d002      	beq.n	8002182 <xQueueGenericCreateStatic+0x4e>
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <xQueueGenericCreateStatic+0x52>
 8002182:	2301      	movs	r3, #1
 8002184:	e000      	b.n	8002188 <xQueueGenericCreateStatic+0x54>
 8002186:	2300      	movs	r3, #0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d109      	bne.n	80021a0 <xQueueGenericCreateStatic+0x6c>
 800218c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002190:	f383 8811 	msr	BASEPRI, r3
 8002194:	f3bf 8f6f 	isb	sy
 8002198:	f3bf 8f4f 	dsb	sy
 800219c:	623b      	str	r3, [r7, #32]
 800219e:	e7fe      	b.n	800219e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d102      	bne.n	80021ac <xQueueGenericCreateStatic+0x78>
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d101      	bne.n	80021b0 <xQueueGenericCreateStatic+0x7c>
 80021ac:	2301      	movs	r3, #1
 80021ae:	e000      	b.n	80021b2 <xQueueGenericCreateStatic+0x7e>
 80021b0:	2300      	movs	r3, #0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d109      	bne.n	80021ca <xQueueGenericCreateStatic+0x96>
 80021b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021ba:	f383 8811 	msr	BASEPRI, r3
 80021be:	f3bf 8f6f 	isb	sy
 80021c2:	f3bf 8f4f 	dsb	sy
 80021c6:	61fb      	str	r3, [r7, #28]
 80021c8:	e7fe      	b.n	80021c8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80021ca:	2350      	movs	r3, #80	; 0x50
 80021cc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	2b50      	cmp	r3, #80	; 0x50
 80021d2:	d009      	beq.n	80021e8 <xQueueGenericCreateStatic+0xb4>
 80021d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021d8:	f383 8811 	msr	BASEPRI, r3
 80021dc:	f3bf 8f6f 	isb	sy
 80021e0:	f3bf 8f4f 	dsb	sy
 80021e4:	61bb      	str	r3, [r7, #24]
 80021e6:	e7fe      	b.n	80021e6 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80021e8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80021ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00d      	beq.n	8002210 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80021f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80021fc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	4613      	mov	r3, r2
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	68b9      	ldr	r1, [r7, #8]
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f000 f805 	bl	800221a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002212:	4618      	mov	r0, r3
 8002214:	3730      	adds	r7, #48	; 0x30
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b084      	sub	sp, #16
 800221e:	af00      	add	r7, sp, #0
 8002220:	60f8      	str	r0, [r7, #12]
 8002222:	60b9      	str	r1, [r7, #8]
 8002224:	607a      	str	r2, [r7, #4]
 8002226:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d103      	bne.n	8002236 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	e002      	b.n	800223c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	68ba      	ldr	r2, [r7, #8]
 8002246:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002248:	2101      	movs	r1, #1
 800224a:	69b8      	ldr	r0, [r7, #24]
 800224c:	f7ff ff0a 	bl	8002064 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	78fa      	ldrb	r2, [r7, #3]
 8002254:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002258:	bf00      	nop
 800225a:	3710      	adds	r7, #16
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b08e      	sub	sp, #56	; 0x38
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
 800226c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800226e:	2300      	movs	r3, #0
 8002270:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002278:	2b00      	cmp	r3, #0
 800227a:	d109      	bne.n	8002290 <xQueueGenericSend+0x30>
 800227c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002280:	f383 8811 	msr	BASEPRI, r3
 8002284:	f3bf 8f6f 	isb	sy
 8002288:	f3bf 8f4f 	dsb	sy
 800228c:	62bb      	str	r3, [r7, #40]	; 0x28
 800228e:	e7fe      	b.n	800228e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d103      	bne.n	800229e <xQueueGenericSend+0x3e>
 8002296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <xQueueGenericSend+0x42>
 800229e:	2301      	movs	r3, #1
 80022a0:	e000      	b.n	80022a4 <xQueueGenericSend+0x44>
 80022a2:	2300      	movs	r3, #0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d109      	bne.n	80022bc <xQueueGenericSend+0x5c>
 80022a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ac:	f383 8811 	msr	BASEPRI, r3
 80022b0:	f3bf 8f6f 	isb	sy
 80022b4:	f3bf 8f4f 	dsb	sy
 80022b8:	627b      	str	r3, [r7, #36]	; 0x24
 80022ba:	e7fe      	b.n	80022ba <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d103      	bne.n	80022ca <xQueueGenericSend+0x6a>
 80022c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d101      	bne.n	80022ce <xQueueGenericSend+0x6e>
 80022ca:	2301      	movs	r3, #1
 80022cc:	e000      	b.n	80022d0 <xQueueGenericSend+0x70>
 80022ce:	2300      	movs	r3, #0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d109      	bne.n	80022e8 <xQueueGenericSend+0x88>
 80022d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022d8:	f383 8811 	msr	BASEPRI, r3
 80022dc:	f3bf 8f6f 	isb	sy
 80022e0:	f3bf 8f4f 	dsb	sy
 80022e4:	623b      	str	r3, [r7, #32]
 80022e6:	e7fe      	b.n	80022e6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80022e8:	f001 f998 	bl	800361c <xTaskGetSchedulerState>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d102      	bne.n	80022f8 <xQueueGenericSend+0x98>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d101      	bne.n	80022fc <xQueueGenericSend+0x9c>
 80022f8:	2301      	movs	r3, #1
 80022fa:	e000      	b.n	80022fe <xQueueGenericSend+0x9e>
 80022fc:	2300      	movs	r3, #0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d109      	bne.n	8002316 <xQueueGenericSend+0xb6>
 8002302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002306:	f383 8811 	msr	BASEPRI, r3
 800230a:	f3bf 8f6f 	isb	sy
 800230e:	f3bf 8f4f 	dsb	sy
 8002312:	61fb      	str	r3, [r7, #28]
 8002314:	e7fe      	b.n	8002314 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002316:	f001 fec9 	bl	80040ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800231a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800231c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800231e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002322:	429a      	cmp	r2, r3
 8002324:	d302      	bcc.n	800232c <xQueueGenericSend+0xcc>
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	2b02      	cmp	r3, #2
 800232a:	d129      	bne.n	8002380 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800232c:	683a      	ldr	r2, [r7, #0]
 800232e:	68b9      	ldr	r1, [r7, #8]
 8002330:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002332:	f000 f9ff 	bl	8002734 <prvCopyDataToQueue>
 8002336:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800233a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233c:	2b00      	cmp	r3, #0
 800233e:	d010      	beq.n	8002362 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002342:	3324      	adds	r3, #36	; 0x24
 8002344:	4618      	mov	r0, r3
 8002346:	f000 ffb3 	bl	80032b0 <xTaskRemoveFromEventList>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d013      	beq.n	8002378 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002350:	4b3f      	ldr	r3, [pc, #252]	; (8002450 <xQueueGenericSend+0x1f0>)
 8002352:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	f3bf 8f4f 	dsb	sy
 800235c:	f3bf 8f6f 	isb	sy
 8002360:	e00a      	b.n	8002378 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002364:	2b00      	cmp	r3, #0
 8002366:	d007      	beq.n	8002378 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002368:	4b39      	ldr	r3, [pc, #228]	; (8002450 <xQueueGenericSend+0x1f0>)
 800236a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	f3bf 8f4f 	dsb	sy
 8002374:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002378:	f001 fec6 	bl	8004108 <vPortExitCritical>
				return pdPASS;
 800237c:	2301      	movs	r3, #1
 800237e:	e063      	b.n	8002448 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d103      	bne.n	800238e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002386:	f001 febf 	bl	8004108 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800238a:	2300      	movs	r3, #0
 800238c:	e05c      	b.n	8002448 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800238e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002390:	2b00      	cmp	r3, #0
 8002392:	d106      	bne.n	80023a2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002394:	f107 0314 	add.w	r3, r7, #20
 8002398:	4618      	mov	r0, r3
 800239a:	f000 ffeb 	bl	8003374 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800239e:	2301      	movs	r3, #1
 80023a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80023a2:	f001 feb1 	bl	8004108 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80023a6:	f000 fd67 	bl	8002e78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80023aa:	f001 fe7f 	bl	80040ac <vPortEnterCritical>
 80023ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80023b4:	b25b      	sxtb	r3, r3
 80023b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023ba:	d103      	bne.n	80023c4 <xQueueGenericSend+0x164>
 80023bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80023ca:	b25b      	sxtb	r3, r3
 80023cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023d0:	d103      	bne.n	80023da <xQueueGenericSend+0x17a>
 80023d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80023da:	f001 fe95 	bl	8004108 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80023de:	1d3a      	adds	r2, r7, #4
 80023e0:	f107 0314 	add.w	r3, r7, #20
 80023e4:	4611      	mov	r1, r2
 80023e6:	4618      	mov	r0, r3
 80023e8:	f000 ffda 	bl	80033a0 <xTaskCheckForTimeOut>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d124      	bne.n	800243c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80023f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80023f4:	f000 fa96 	bl	8002924 <prvIsQueueFull>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d018      	beq.n	8002430 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80023fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002400:	3310      	adds	r3, #16
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	4611      	mov	r1, r2
 8002406:	4618      	mov	r0, r3
 8002408:	f000 ff04 	bl	8003214 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800240c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800240e:	f000 fa21 	bl	8002854 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002412:	f000 fd3f 	bl	8002e94 <xTaskResumeAll>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	f47f af7c 	bne.w	8002316 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800241e:	4b0c      	ldr	r3, [pc, #48]	; (8002450 <xQueueGenericSend+0x1f0>)
 8002420:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002424:	601a      	str	r2, [r3, #0]
 8002426:	f3bf 8f4f 	dsb	sy
 800242a:	f3bf 8f6f 	isb	sy
 800242e:	e772      	b.n	8002316 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002430:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002432:	f000 fa0f 	bl	8002854 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002436:	f000 fd2d 	bl	8002e94 <xTaskResumeAll>
 800243a:	e76c      	b.n	8002316 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800243c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800243e:	f000 fa09 	bl	8002854 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002442:	f000 fd27 	bl	8002e94 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002446:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002448:	4618      	mov	r0, r3
 800244a:	3738      	adds	r7, #56	; 0x38
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	e000ed04 	.word	0xe000ed04

08002454 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b08e      	sub	sp, #56	; 0x38
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
 8002460:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002468:	2b00      	cmp	r3, #0
 800246a:	d109      	bne.n	8002480 <xQueueGenericSendFromISR+0x2c>
 800246c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002470:	f383 8811 	msr	BASEPRI, r3
 8002474:	f3bf 8f6f 	isb	sy
 8002478:	f3bf 8f4f 	dsb	sy
 800247c:	627b      	str	r3, [r7, #36]	; 0x24
 800247e:	e7fe      	b.n	800247e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d103      	bne.n	800248e <xQueueGenericSendFromISR+0x3a>
 8002486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <xQueueGenericSendFromISR+0x3e>
 800248e:	2301      	movs	r3, #1
 8002490:	e000      	b.n	8002494 <xQueueGenericSendFromISR+0x40>
 8002492:	2300      	movs	r3, #0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d109      	bne.n	80024ac <xQueueGenericSendFromISR+0x58>
 8002498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800249c:	f383 8811 	msr	BASEPRI, r3
 80024a0:	f3bf 8f6f 	isb	sy
 80024a4:	f3bf 8f4f 	dsb	sy
 80024a8:	623b      	str	r3, [r7, #32]
 80024aa:	e7fe      	b.n	80024aa <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d103      	bne.n	80024ba <xQueueGenericSendFromISR+0x66>
 80024b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d101      	bne.n	80024be <xQueueGenericSendFromISR+0x6a>
 80024ba:	2301      	movs	r3, #1
 80024bc:	e000      	b.n	80024c0 <xQueueGenericSendFromISR+0x6c>
 80024be:	2300      	movs	r3, #0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d109      	bne.n	80024d8 <xQueueGenericSendFromISR+0x84>
 80024c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024c8:	f383 8811 	msr	BASEPRI, r3
 80024cc:	f3bf 8f6f 	isb	sy
 80024d0:	f3bf 8f4f 	dsb	sy
 80024d4:	61fb      	str	r3, [r7, #28]
 80024d6:	e7fe      	b.n	80024d6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80024d8:	f001 fec4 	bl	8004264 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80024dc:	f3ef 8211 	mrs	r2, BASEPRI
 80024e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024e4:	f383 8811 	msr	BASEPRI, r3
 80024e8:	f3bf 8f6f 	isb	sy
 80024ec:	f3bf 8f4f 	dsb	sy
 80024f0:	61ba      	str	r2, [r7, #24]
 80024f2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80024f4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80024f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80024f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002500:	429a      	cmp	r2, r3
 8002502:	d302      	bcc.n	800250a <xQueueGenericSendFromISR+0xb6>
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	2b02      	cmp	r3, #2
 8002508:	d12c      	bne.n	8002564 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800250a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800250c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002510:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	68b9      	ldr	r1, [r7, #8]
 8002518:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800251a:	f000 f90b 	bl	8002734 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800251e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002522:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002526:	d112      	bne.n	800254e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800252a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252c:	2b00      	cmp	r3, #0
 800252e:	d016      	beq.n	800255e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002532:	3324      	adds	r3, #36	; 0x24
 8002534:	4618      	mov	r0, r3
 8002536:	f000 febb 	bl	80032b0 <xTaskRemoveFromEventList>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00e      	beq.n	800255e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00b      	beq.n	800255e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2201      	movs	r2, #1
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	e007      	b.n	800255e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800254e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002552:	3301      	adds	r3, #1
 8002554:	b2db      	uxtb	r3, r3
 8002556:	b25a      	sxtb	r2, r3
 8002558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800255a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800255e:	2301      	movs	r3, #1
 8002560:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002562:	e001      	b.n	8002568 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002564:	2300      	movs	r3, #0
 8002566:	637b      	str	r3, [r7, #52]	; 0x34
 8002568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800256a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002574:	4618      	mov	r0, r3
 8002576:	3738      	adds	r7, #56	; 0x38
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b08c      	sub	sp, #48	; 0x30
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002588:	2300      	movs	r3, #0
 800258a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002592:	2b00      	cmp	r3, #0
 8002594:	d109      	bne.n	80025aa <xQueueReceive+0x2e>
	__asm volatile
 8002596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800259a:	f383 8811 	msr	BASEPRI, r3
 800259e:	f3bf 8f6f 	isb	sy
 80025a2:	f3bf 8f4f 	dsb	sy
 80025a6:	623b      	str	r3, [r7, #32]
 80025a8:	e7fe      	b.n	80025a8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d103      	bne.n	80025b8 <xQueueReceive+0x3c>
 80025b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d101      	bne.n	80025bc <xQueueReceive+0x40>
 80025b8:	2301      	movs	r3, #1
 80025ba:	e000      	b.n	80025be <xQueueReceive+0x42>
 80025bc:	2300      	movs	r3, #0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d109      	bne.n	80025d6 <xQueueReceive+0x5a>
 80025c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025c6:	f383 8811 	msr	BASEPRI, r3
 80025ca:	f3bf 8f6f 	isb	sy
 80025ce:	f3bf 8f4f 	dsb	sy
 80025d2:	61fb      	str	r3, [r7, #28]
 80025d4:	e7fe      	b.n	80025d4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80025d6:	f001 f821 	bl	800361c <xTaskGetSchedulerState>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d102      	bne.n	80025e6 <xQueueReceive+0x6a>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <xQueueReceive+0x6e>
 80025e6:	2301      	movs	r3, #1
 80025e8:	e000      	b.n	80025ec <xQueueReceive+0x70>
 80025ea:	2300      	movs	r3, #0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d109      	bne.n	8002604 <xQueueReceive+0x88>
 80025f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025f4:	f383 8811 	msr	BASEPRI, r3
 80025f8:	f3bf 8f6f 	isb	sy
 80025fc:	f3bf 8f4f 	dsb	sy
 8002600:	61bb      	str	r3, [r7, #24]
 8002602:	e7fe      	b.n	8002602 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002604:	f001 fd52 	bl	80040ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800260a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800260c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	2b00      	cmp	r3, #0
 8002612:	d01f      	beq.n	8002654 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002614:	68b9      	ldr	r1, [r7, #8]
 8002616:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002618:	f000 f8f6 	bl	8002808 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800261c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261e:	1e5a      	subs	r2, r3, #1
 8002620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002622:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d00f      	beq.n	800264c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800262c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800262e:	3310      	adds	r3, #16
 8002630:	4618      	mov	r0, r3
 8002632:	f000 fe3d 	bl	80032b0 <xTaskRemoveFromEventList>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d007      	beq.n	800264c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800263c:	4b3c      	ldr	r3, [pc, #240]	; (8002730 <xQueueReceive+0x1b4>)
 800263e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	f3bf 8f4f 	dsb	sy
 8002648:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800264c:	f001 fd5c 	bl	8004108 <vPortExitCritical>
				return pdPASS;
 8002650:	2301      	movs	r3, #1
 8002652:	e069      	b.n	8002728 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d103      	bne.n	8002662 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800265a:	f001 fd55 	bl	8004108 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800265e:	2300      	movs	r3, #0
 8002660:	e062      	b.n	8002728 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002664:	2b00      	cmp	r3, #0
 8002666:	d106      	bne.n	8002676 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002668:	f107 0310 	add.w	r3, r7, #16
 800266c:	4618      	mov	r0, r3
 800266e:	f000 fe81 	bl	8003374 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002672:	2301      	movs	r3, #1
 8002674:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002676:	f001 fd47 	bl	8004108 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800267a:	f000 fbfd 	bl	8002e78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800267e:	f001 fd15 	bl	80040ac <vPortEnterCritical>
 8002682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002684:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002688:	b25b      	sxtb	r3, r3
 800268a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800268e:	d103      	bne.n	8002698 <xQueueReceive+0x11c>
 8002690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002692:	2200      	movs	r2, #0
 8002694:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800269a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800269e:	b25b      	sxtb	r3, r3
 80026a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026a4:	d103      	bne.n	80026ae <xQueueReceive+0x132>
 80026a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026ae:	f001 fd2b 	bl	8004108 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80026b2:	1d3a      	adds	r2, r7, #4
 80026b4:	f107 0310 	add.w	r3, r7, #16
 80026b8:	4611      	mov	r1, r2
 80026ba:	4618      	mov	r0, r3
 80026bc:	f000 fe70 	bl	80033a0 <xTaskCheckForTimeOut>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d123      	bne.n	800270e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80026c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026c8:	f000 f916 	bl	80028f8 <prvIsQueueEmpty>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d017      	beq.n	8002702 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80026d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d4:	3324      	adds	r3, #36	; 0x24
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	4611      	mov	r1, r2
 80026da:	4618      	mov	r0, r3
 80026dc:	f000 fd9a 	bl	8003214 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80026e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026e2:	f000 f8b7 	bl	8002854 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80026e6:	f000 fbd5 	bl	8002e94 <xTaskResumeAll>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d189      	bne.n	8002604 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80026f0:	4b0f      	ldr	r3, [pc, #60]	; (8002730 <xQueueReceive+0x1b4>)
 80026f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	f3bf 8f4f 	dsb	sy
 80026fc:	f3bf 8f6f 	isb	sy
 8002700:	e780      	b.n	8002604 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002702:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002704:	f000 f8a6 	bl	8002854 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002708:	f000 fbc4 	bl	8002e94 <xTaskResumeAll>
 800270c:	e77a      	b.n	8002604 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800270e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002710:	f000 f8a0 	bl	8002854 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002714:	f000 fbbe 	bl	8002e94 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002718:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800271a:	f000 f8ed 	bl	80028f8 <prvIsQueueEmpty>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	f43f af6f 	beq.w	8002604 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002726:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002728:	4618      	mov	r0, r3
 800272a:	3730      	adds	r7, #48	; 0x30
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	e000ed04 	.word	0xe000ed04

08002734 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002740:	2300      	movs	r3, #0
 8002742:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002748:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10d      	bne.n	800276e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d14d      	bne.n	80027f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	4618      	mov	r0, r3
 8002760:	f000 ff7a 	bl	8003658 <xTaskPriorityDisinherit>
 8002764:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	609a      	str	r2, [r3, #8]
 800276c:	e043      	b.n	80027f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d119      	bne.n	80027a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6858      	ldr	r0, [r3, #4]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277c:	461a      	mov	r2, r3
 800277e:	68b9      	ldr	r1, [r7, #8]
 8002780:	f001 ffa8 	bl	80046d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278c:	441a      	add	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	685a      	ldr	r2, [r3, #4]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	429a      	cmp	r2, r3
 800279c:	d32b      	bcc.n	80027f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	605a      	str	r2, [r3, #4]
 80027a6:	e026      	b.n	80027f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	68d8      	ldr	r0, [r3, #12]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b0:	461a      	mov	r2, r3
 80027b2:	68b9      	ldr	r1, [r7, #8]
 80027b4:	f001 ff8e 	bl	80046d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	68da      	ldr	r2, [r3, #12]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c0:	425b      	negs	r3, r3
 80027c2:	441a      	add	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	68da      	ldr	r2, [r3, #12]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d207      	bcs.n	80027e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027dc:	425b      	negs	r3, r3
 80027de:	441a      	add	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d105      	bne.n	80027f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d002      	beq.n	80027f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	3b01      	subs	r3, #1
 80027f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1c5a      	adds	r2, r3, #1
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80027fe:	697b      	ldr	r3, [r7, #20]
}
 8002800:	4618      	mov	r0, r3
 8002802:	3718      	adds	r7, #24
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	2b00      	cmp	r3, #0
 8002818:	d018      	beq.n	800284c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	68da      	ldr	r2, [r3, #12]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	441a      	add	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68da      	ldr	r2, [r3, #12]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	429a      	cmp	r2, r3
 8002832:	d303      	bcc.n	800283c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68d9      	ldr	r1, [r3, #12]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002844:	461a      	mov	r2, r3
 8002846:	6838      	ldr	r0, [r7, #0]
 8002848:	f001 ff44 	bl	80046d4 <memcpy>
	}
}
 800284c:	bf00      	nop
 800284e:	3708      	adds	r7, #8
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800285c:	f001 fc26 	bl	80040ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002866:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002868:	e011      	b.n	800288e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286e:	2b00      	cmp	r3, #0
 8002870:	d012      	beq.n	8002898 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	3324      	adds	r3, #36	; 0x24
 8002876:	4618      	mov	r0, r3
 8002878:	f000 fd1a 	bl	80032b0 <xTaskRemoveFromEventList>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002882:	f000 fded 	bl	8003460 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002886:	7bfb      	ldrb	r3, [r7, #15]
 8002888:	3b01      	subs	r3, #1
 800288a:	b2db      	uxtb	r3, r3
 800288c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800288e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002892:	2b00      	cmp	r3, #0
 8002894:	dce9      	bgt.n	800286a <prvUnlockQueue+0x16>
 8002896:	e000      	b.n	800289a <prvUnlockQueue+0x46>
					break;
 8002898:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	22ff      	movs	r2, #255	; 0xff
 800289e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80028a2:	f001 fc31 	bl	8004108 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80028a6:	f001 fc01 	bl	80040ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80028b2:	e011      	b.n	80028d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d012      	beq.n	80028e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3310      	adds	r3, #16
 80028c0:	4618      	mov	r0, r3
 80028c2:	f000 fcf5 	bl	80032b0 <xTaskRemoveFromEventList>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80028cc:	f000 fdc8 	bl	8003460 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80028d0:	7bbb      	ldrb	r3, [r7, #14]
 80028d2:	3b01      	subs	r3, #1
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80028d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	dce9      	bgt.n	80028b4 <prvUnlockQueue+0x60>
 80028e0:	e000      	b.n	80028e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80028e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	22ff      	movs	r2, #255	; 0xff
 80028e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80028ec:	f001 fc0c 	bl	8004108 <vPortExitCritical>
}
 80028f0:	bf00      	nop
 80028f2:	3710      	adds	r7, #16
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002900:	f001 fbd4 	bl	80040ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002908:	2b00      	cmp	r3, #0
 800290a:	d102      	bne.n	8002912 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800290c:	2301      	movs	r3, #1
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	e001      	b.n	8002916 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002912:	2300      	movs	r3, #0
 8002914:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002916:	f001 fbf7 	bl	8004108 <vPortExitCritical>

	return xReturn;
 800291a:	68fb      	ldr	r3, [r7, #12]
}
 800291c:	4618      	mov	r0, r3
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800292c:	f001 fbbe 	bl	80040ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002938:	429a      	cmp	r2, r3
 800293a:	d102      	bne.n	8002942 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800293c:	2301      	movs	r3, #1
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	e001      	b.n	8002946 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002942:	2300      	movs	r3, #0
 8002944:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002946:	f001 fbdf 	bl	8004108 <vPortExitCritical>

	return xReturn;
 800294a:	68fb      	ldr	r3, [r7, #12]
}
 800294c:	4618      	mov	r0, r3
 800294e:	3710      	adds	r7, #16
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800295e:	2300      	movs	r3, #0
 8002960:	60fb      	str	r3, [r7, #12]
 8002962:	e014      	b.n	800298e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002964:	4a0e      	ldr	r2, [pc, #56]	; (80029a0 <vQueueAddToRegistry+0x4c>)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d10b      	bne.n	8002988 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002970:	490b      	ldr	r1, [pc, #44]	; (80029a0 <vQueueAddToRegistry+0x4c>)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800297a:	4a09      	ldr	r2, [pc, #36]	; (80029a0 <vQueueAddToRegistry+0x4c>)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	4413      	add	r3, r2
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002986:	e005      	b.n	8002994 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	3301      	adds	r3, #1
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2b07      	cmp	r3, #7
 8002992:	d9e7      	bls.n	8002964 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002994:	bf00      	nop
 8002996:	3714      	adds	r7, #20
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr
 80029a0:	20004980 	.word	0x20004980

080029a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80029b4:	f001 fb7a 	bl	80040ac <vPortEnterCritical>
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029be:	b25b      	sxtb	r3, r3
 80029c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029c4:	d103      	bne.n	80029ce <vQueueWaitForMessageRestricted+0x2a>
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029d4:	b25b      	sxtb	r3, r3
 80029d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029da:	d103      	bne.n	80029e4 <vQueueWaitForMessageRestricted+0x40>
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029e4:	f001 fb90 	bl	8004108 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d106      	bne.n	80029fe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	3324      	adds	r3, #36	; 0x24
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	68b9      	ldr	r1, [r7, #8]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f000 fc2f 	bl	800325c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80029fe:	6978      	ldr	r0, [r7, #20]
 8002a00:	f7ff ff28 	bl	8002854 <prvUnlockQueue>
	}
 8002a04:	bf00      	nop
 8002a06:	3718      	adds	r7, #24
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b08e      	sub	sp, #56	; 0x38
 8002a10:	af04      	add	r7, sp, #16
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
 8002a18:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d109      	bne.n	8002a34 <xTaskCreateStatic+0x28>
 8002a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a24:	f383 8811 	msr	BASEPRI, r3
 8002a28:	f3bf 8f6f 	isb	sy
 8002a2c:	f3bf 8f4f 	dsb	sy
 8002a30:	623b      	str	r3, [r7, #32]
 8002a32:	e7fe      	b.n	8002a32 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8002a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d109      	bne.n	8002a4e <xTaskCreateStatic+0x42>
 8002a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a3e:	f383 8811 	msr	BASEPRI, r3
 8002a42:	f3bf 8f6f 	isb	sy
 8002a46:	f3bf 8f4f 	dsb	sy
 8002a4a:	61fb      	str	r3, [r7, #28]
 8002a4c:	e7fe      	b.n	8002a4c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002a4e:	235c      	movs	r3, #92	; 0x5c
 8002a50:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	2b5c      	cmp	r3, #92	; 0x5c
 8002a56:	d009      	beq.n	8002a6c <xTaskCreateStatic+0x60>
 8002a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a5c:	f383 8811 	msr	BASEPRI, r3
 8002a60:	f3bf 8f6f 	isb	sy
 8002a64:	f3bf 8f4f 	dsb	sy
 8002a68:	61bb      	str	r3, [r7, #24]
 8002a6a:	e7fe      	b.n	8002a6a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002a6c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d01e      	beq.n	8002ab2 <xTaskCreateStatic+0xa6>
 8002a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d01b      	beq.n	8002ab2 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a7c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a82:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a86:	2202      	movs	r2, #2
 8002a88:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	9303      	str	r3, [sp, #12]
 8002a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a92:	9302      	str	r3, [sp, #8]
 8002a94:	f107 0314 	add.w	r3, r7, #20
 8002a98:	9301      	str	r3, [sp, #4]
 8002a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	68b9      	ldr	r1, [r7, #8]
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f000 f850 	bl	8002b4a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002aaa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002aac:	f000 f8dc 	bl	8002c68 <prvAddNewTaskToReadyList>
 8002ab0:	e001      	b.n	8002ab6 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002ab6:	697b      	ldr	r3, [r7, #20]
	}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3728      	adds	r7, #40	; 0x28
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b08c      	sub	sp, #48	; 0x30
 8002ac4:	af04      	add	r7, sp, #16
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	603b      	str	r3, [r7, #0]
 8002acc:	4613      	mov	r3, r2
 8002ace:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002ad0:	88fb      	ldrh	r3, [r7, #6]
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f001 fc03 	bl	80042e0 <pvPortMalloc>
 8002ada:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00e      	beq.n	8002b00 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002ae2:	205c      	movs	r0, #92	; 0x5c
 8002ae4:	f001 fbfc 	bl	80042e0 <pvPortMalloc>
 8002ae8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d003      	beq.n	8002af8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	631a      	str	r2, [r3, #48]	; 0x30
 8002af6:	e005      	b.n	8002b04 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002af8:	6978      	ldr	r0, [r7, #20]
 8002afa:	f001 fcb3 	bl	8004464 <vPortFree>
 8002afe:	e001      	b.n	8002b04 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002b00:	2300      	movs	r3, #0
 8002b02:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d017      	beq.n	8002b3a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002b12:	88fa      	ldrh	r2, [r7, #6]
 8002b14:	2300      	movs	r3, #0
 8002b16:	9303      	str	r3, [sp, #12]
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	9302      	str	r3, [sp, #8]
 8002b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b1e:	9301      	str	r3, [sp, #4]
 8002b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b22:	9300      	str	r3, [sp, #0]
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	68b9      	ldr	r1, [r7, #8]
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	f000 f80e 	bl	8002b4a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002b2e:	69f8      	ldr	r0, [r7, #28]
 8002b30:	f000 f89a 	bl	8002c68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002b34:	2301      	movs	r3, #1
 8002b36:	61bb      	str	r3, [r7, #24]
 8002b38:	e002      	b.n	8002b40 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002b3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b3e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002b40:	69bb      	ldr	r3, [r7, #24]
	}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3720      	adds	r7, #32
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b088      	sub	sp, #32
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	60f8      	str	r0, [r7, #12]
 8002b52:	60b9      	str	r1, [r7, #8]
 8002b54:	607a      	str	r2, [r7, #4]
 8002b56:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b5a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	461a      	mov	r2, r3
 8002b62:	21a5      	movs	r1, #165	; 0xa5
 8002b64:	f001 fdc1 	bl	80046ea <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002b72:	3b01      	subs	r3, #1
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	4413      	add	r3, r2
 8002b78:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	f023 0307 	bic.w	r3, r3, #7
 8002b80:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d009      	beq.n	8002ba0 <prvInitialiseNewTask+0x56>
 8002b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b90:	f383 8811 	msr	BASEPRI, r3
 8002b94:	f3bf 8f6f 	isb	sy
 8002b98:	f3bf 8f4f 	dsb	sy
 8002b9c:	617b      	str	r3, [r7, #20]
 8002b9e:	e7fe      	b.n	8002b9e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d01f      	beq.n	8002be6 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61fb      	str	r3, [r7, #28]
 8002baa:	e012      	b.n	8002bd2 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002bac:	68ba      	ldr	r2, [r7, #8]
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	7819      	ldrb	r1, [r3, #0]
 8002bb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	4413      	add	r3, r2
 8002bba:	3334      	adds	r3, #52	; 0x34
 8002bbc:	460a      	mov	r2, r1
 8002bbe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002bc0:	68ba      	ldr	r2, [r7, #8]
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d006      	beq.n	8002bda <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	61fb      	str	r3, [r7, #28]
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	2b0f      	cmp	r3, #15
 8002bd6:	d9e9      	bls.n	8002bac <prvInitialiseNewTask+0x62>
 8002bd8:	e000      	b.n	8002bdc <prvInitialiseNewTask+0x92>
			{
				break;
 8002bda:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002be4:	e003      	b.n	8002bee <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf0:	2b37      	cmp	r3, #55	; 0x37
 8002bf2:	d901      	bls.n	8002bf8 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002bf4:	2337      	movs	r3, #55	; 0x37
 8002bf6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bfc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c02:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c06:	2200      	movs	r2, #0
 8002c08:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7ff f994 	bl	8001f3c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c16:	3318      	adds	r3, #24
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7ff f98f 	bl	8001f3c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c22:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c26:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c32:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c36:	2200      	movs	r2, #0
 8002c38:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	68f9      	ldr	r1, [r7, #12]
 8002c46:	69b8      	ldr	r0, [r7, #24]
 8002c48:	f001 f90c 	bl	8003e64 <pxPortInitialiseStack>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c50:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d002      	beq.n	8002c5e <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c5c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002c5e:	bf00      	nop
 8002c60:	3720      	adds	r7, #32
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
	...

08002c68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002c70:	f001 fa1c 	bl	80040ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002c74:	4b2d      	ldr	r3, [pc, #180]	; (8002d2c <prvAddNewTaskToReadyList+0xc4>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	3301      	adds	r3, #1
 8002c7a:	4a2c      	ldr	r2, [pc, #176]	; (8002d2c <prvAddNewTaskToReadyList+0xc4>)
 8002c7c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002c7e:	4b2c      	ldr	r3, [pc, #176]	; (8002d30 <prvAddNewTaskToReadyList+0xc8>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d109      	bne.n	8002c9a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002c86:	4a2a      	ldr	r2, [pc, #168]	; (8002d30 <prvAddNewTaskToReadyList+0xc8>)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002c8c:	4b27      	ldr	r3, [pc, #156]	; (8002d2c <prvAddNewTaskToReadyList+0xc4>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d110      	bne.n	8002cb6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002c94:	f000 fc08 	bl	80034a8 <prvInitialiseTaskLists>
 8002c98:	e00d      	b.n	8002cb6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002c9a:	4b26      	ldr	r3, [pc, #152]	; (8002d34 <prvAddNewTaskToReadyList+0xcc>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d109      	bne.n	8002cb6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002ca2:	4b23      	ldr	r3, [pc, #140]	; (8002d30 <prvAddNewTaskToReadyList+0xc8>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d802      	bhi.n	8002cb6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002cb0:	4a1f      	ldr	r2, [pc, #124]	; (8002d30 <prvAddNewTaskToReadyList+0xc8>)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002cb6:	4b20      	ldr	r3, [pc, #128]	; (8002d38 <prvAddNewTaskToReadyList+0xd0>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	3301      	adds	r3, #1
 8002cbc:	4a1e      	ldr	r2, [pc, #120]	; (8002d38 <prvAddNewTaskToReadyList+0xd0>)
 8002cbe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002cc0:	4b1d      	ldr	r3, [pc, #116]	; (8002d38 <prvAddNewTaskToReadyList+0xd0>)
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ccc:	4b1b      	ldr	r3, [pc, #108]	; (8002d3c <prvAddNewTaskToReadyList+0xd4>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d903      	bls.n	8002cdc <prvAddNewTaskToReadyList+0x74>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd8:	4a18      	ldr	r2, [pc, #96]	; (8002d3c <prvAddNewTaskToReadyList+0xd4>)
 8002cda:	6013      	str	r3, [r2, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	4413      	add	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4a15      	ldr	r2, [pc, #84]	; (8002d40 <prvAddNewTaskToReadyList+0xd8>)
 8002cea:	441a      	add	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	3304      	adds	r3, #4
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	4610      	mov	r0, r2
 8002cf4:	f7ff f92f 	bl	8001f56 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002cf8:	f001 fa06 	bl	8004108 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002cfc:	4b0d      	ldr	r3, [pc, #52]	; (8002d34 <prvAddNewTaskToReadyList+0xcc>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00e      	beq.n	8002d22 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002d04:	4b0a      	ldr	r3, [pc, #40]	; (8002d30 <prvAddNewTaskToReadyList+0xc8>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d207      	bcs.n	8002d22 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002d12:	4b0c      	ldr	r3, [pc, #48]	; (8002d44 <prvAddNewTaskToReadyList+0xdc>)
 8002d14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d18:	601a      	str	r2, [r3, #0]
 8002d1a:	f3bf 8f4f 	dsb	sy
 8002d1e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002d22:	bf00      	nop
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	20000bc0 	.word	0x20000bc0
 8002d30:	200006ec 	.word	0x200006ec
 8002d34:	20000bcc 	.word	0x20000bcc
 8002d38:	20000bdc 	.word	0x20000bdc
 8002d3c:	20000bc8 	.word	0x20000bc8
 8002d40:	200006f0 	.word	0x200006f0
 8002d44:	e000ed04 	.word	0xe000ed04

08002d48 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002d50:	2300      	movs	r3, #0
 8002d52:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d016      	beq.n	8002d88 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002d5a:	4b13      	ldr	r3, [pc, #76]	; (8002da8 <vTaskDelay+0x60>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d009      	beq.n	8002d76 <vTaskDelay+0x2e>
 8002d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d66:	f383 8811 	msr	BASEPRI, r3
 8002d6a:	f3bf 8f6f 	isb	sy
 8002d6e:	f3bf 8f4f 	dsb	sy
 8002d72:	60bb      	str	r3, [r7, #8]
 8002d74:	e7fe      	b.n	8002d74 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002d76:	f000 f87f 	bl	8002e78 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 fcd7 	bl	8003730 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002d82:	f000 f887 	bl	8002e94 <xTaskResumeAll>
 8002d86:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d107      	bne.n	8002d9e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8002d8e:	4b07      	ldr	r3, [pc, #28]	; (8002dac <vTaskDelay+0x64>)
 8002d90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d94:	601a      	str	r2, [r3, #0]
 8002d96:	f3bf 8f4f 	dsb	sy
 8002d9a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002d9e:	bf00      	nop
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	20000be8 	.word	0x20000be8
 8002dac:	e000ed04 	.word	0xe000ed04

08002db0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b08a      	sub	sp, #40	; 0x28
 8002db4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002db6:	2300      	movs	r3, #0
 8002db8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002dbe:	463a      	mov	r2, r7
 8002dc0:	1d39      	adds	r1, r7, #4
 8002dc2:	f107 0308 	add.w	r3, r7, #8
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7ff f864 	bl	8001e94 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002dcc:	6839      	ldr	r1, [r7, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	68ba      	ldr	r2, [r7, #8]
 8002dd2:	9202      	str	r2, [sp, #8]
 8002dd4:	9301      	str	r3, [sp, #4]
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	9300      	str	r3, [sp, #0]
 8002dda:	2300      	movs	r3, #0
 8002ddc:	460a      	mov	r2, r1
 8002dde:	4920      	ldr	r1, [pc, #128]	; (8002e60 <vTaskStartScheduler+0xb0>)
 8002de0:	4820      	ldr	r0, [pc, #128]	; (8002e64 <vTaskStartScheduler+0xb4>)
 8002de2:	f7ff fe13 	bl	8002a0c <xTaskCreateStatic>
 8002de6:	4602      	mov	r2, r0
 8002de8:	4b1f      	ldr	r3, [pc, #124]	; (8002e68 <vTaskStartScheduler+0xb8>)
 8002dea:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002dec:	4b1e      	ldr	r3, [pc, #120]	; (8002e68 <vTaskStartScheduler+0xb8>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d002      	beq.n	8002dfa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002df4:	2301      	movs	r3, #1
 8002df6:	617b      	str	r3, [r7, #20]
 8002df8:	e001      	b.n	8002dfe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d102      	bne.n	8002e0a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002e04:	f000 fce8 	bl	80037d8 <xTimerCreateTimerTask>
 8002e08:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d115      	bne.n	8002e3c <vTaskStartScheduler+0x8c>
 8002e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e14:	f383 8811 	msr	BASEPRI, r3
 8002e18:	f3bf 8f6f 	isb	sy
 8002e1c:	f3bf 8f4f 	dsb	sy
 8002e20:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002e22:	4b12      	ldr	r3, [pc, #72]	; (8002e6c <vTaskStartScheduler+0xbc>)
 8002e24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e28:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002e2a:	4b11      	ldr	r3, [pc, #68]	; (8002e70 <vTaskStartScheduler+0xc0>)
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002e30:	4b10      	ldr	r3, [pc, #64]	; (8002e74 <vTaskStartScheduler+0xc4>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002e36:	f001 f89b 	bl	8003f70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002e3a:	e00d      	b.n	8002e58 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e42:	d109      	bne.n	8002e58 <vTaskStartScheduler+0xa8>
 8002e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e48:	f383 8811 	msr	BASEPRI, r3
 8002e4c:	f3bf 8f6f 	isb	sy
 8002e50:	f3bf 8f4f 	dsb	sy
 8002e54:	60fb      	str	r3, [r7, #12]
 8002e56:	e7fe      	b.n	8002e56 <vTaskStartScheduler+0xa6>
}
 8002e58:	bf00      	nop
 8002e5a:	3718      	adds	r7, #24
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	08004720 	.word	0x08004720
 8002e64:	08003479 	.word	0x08003479
 8002e68:	20000be4 	.word	0x20000be4
 8002e6c:	20000be0 	.word	0x20000be0
 8002e70:	20000bcc 	.word	0x20000bcc
 8002e74:	20000bc4 	.word	0x20000bc4

08002e78 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002e7c:	4b04      	ldr	r3, [pc, #16]	; (8002e90 <vTaskSuspendAll+0x18>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	3301      	adds	r3, #1
 8002e82:	4a03      	ldr	r2, [pc, #12]	; (8002e90 <vTaskSuspendAll+0x18>)
 8002e84:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8002e86:	bf00      	nop
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	20000be8 	.word	0x20000be8

08002e94 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002ea2:	4b41      	ldr	r3, [pc, #260]	; (8002fa8 <xTaskResumeAll+0x114>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d109      	bne.n	8002ebe <xTaskResumeAll+0x2a>
 8002eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eae:	f383 8811 	msr	BASEPRI, r3
 8002eb2:	f3bf 8f6f 	isb	sy
 8002eb6:	f3bf 8f4f 	dsb	sy
 8002eba:	603b      	str	r3, [r7, #0]
 8002ebc:	e7fe      	b.n	8002ebc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002ebe:	f001 f8f5 	bl	80040ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002ec2:	4b39      	ldr	r3, [pc, #228]	; (8002fa8 <xTaskResumeAll+0x114>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	4a37      	ldr	r2, [pc, #220]	; (8002fa8 <xTaskResumeAll+0x114>)
 8002eca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ecc:	4b36      	ldr	r3, [pc, #216]	; (8002fa8 <xTaskResumeAll+0x114>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d162      	bne.n	8002f9a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002ed4:	4b35      	ldr	r3, [pc, #212]	; (8002fac <xTaskResumeAll+0x118>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d05e      	beq.n	8002f9a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002edc:	e02f      	b.n	8002f3e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ede:	4b34      	ldr	r3, [pc, #208]	; (8002fb0 <xTaskResumeAll+0x11c>)
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	3318      	adds	r3, #24
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7ff f890 	bl	8002010 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	3304      	adds	r3, #4
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff f88b 	bl	8002010 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002efe:	4b2d      	ldr	r3, [pc, #180]	; (8002fb4 <xTaskResumeAll+0x120>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d903      	bls.n	8002f0e <xTaskResumeAll+0x7a>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0a:	4a2a      	ldr	r2, [pc, #168]	; (8002fb4 <xTaskResumeAll+0x120>)
 8002f0c:	6013      	str	r3, [r2, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f12:	4613      	mov	r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	4413      	add	r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	4a27      	ldr	r2, [pc, #156]	; (8002fb8 <xTaskResumeAll+0x124>)
 8002f1c:	441a      	add	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	3304      	adds	r3, #4
 8002f22:	4619      	mov	r1, r3
 8002f24:	4610      	mov	r0, r2
 8002f26:	f7ff f816 	bl	8001f56 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f2e:	4b23      	ldr	r3, [pc, #140]	; (8002fbc <xTaskResumeAll+0x128>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d302      	bcc.n	8002f3e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002f38:	4b21      	ldr	r3, [pc, #132]	; (8002fc0 <xTaskResumeAll+0x12c>)
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f3e:	4b1c      	ldr	r3, [pc, #112]	; (8002fb0 <xTaskResumeAll+0x11c>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1cb      	bne.n	8002ede <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002f4c:	f000 fb46 	bl	80035dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002f50:	4b1c      	ldr	r3, [pc, #112]	; (8002fc4 <xTaskResumeAll+0x130>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d010      	beq.n	8002f7e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002f5c:	f000 f846 	bl	8002fec <xTaskIncrementTick>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d002      	beq.n	8002f6c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002f66:	4b16      	ldr	r3, [pc, #88]	; (8002fc0 <xTaskResumeAll+0x12c>)
 8002f68:	2201      	movs	r2, #1
 8002f6a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1f1      	bne.n	8002f5c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8002f78:	4b12      	ldr	r3, [pc, #72]	; (8002fc4 <xTaskResumeAll+0x130>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002f7e:	4b10      	ldr	r3, [pc, #64]	; (8002fc0 <xTaskResumeAll+0x12c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d009      	beq.n	8002f9a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002f86:	2301      	movs	r3, #1
 8002f88:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002f8a:	4b0f      	ldr	r3, [pc, #60]	; (8002fc8 <xTaskResumeAll+0x134>)
 8002f8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f90:	601a      	str	r2, [r3, #0]
 8002f92:	f3bf 8f4f 	dsb	sy
 8002f96:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002f9a:	f001 f8b5 	bl	8004108 <vPortExitCritical>

	return xAlreadyYielded;
 8002f9e:	68bb      	ldr	r3, [r7, #8]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	20000be8 	.word	0x20000be8
 8002fac:	20000bc0 	.word	0x20000bc0
 8002fb0:	20000b80 	.word	0x20000b80
 8002fb4:	20000bc8 	.word	0x20000bc8
 8002fb8:	200006f0 	.word	0x200006f0
 8002fbc:	200006ec 	.word	0x200006ec
 8002fc0:	20000bd4 	.word	0x20000bd4
 8002fc4:	20000bd0 	.word	0x20000bd0
 8002fc8:	e000ed04 	.word	0xe000ed04

08002fcc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002fd2:	4b05      	ldr	r3, [pc, #20]	; (8002fe8 <xTaskGetTickCount+0x1c>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002fd8:	687b      	ldr	r3, [r7, #4]
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	20000bc4 	.word	0x20000bc4

08002fec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ff6:	4b4e      	ldr	r3, [pc, #312]	; (8003130 <xTaskIncrementTick+0x144>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f040 8088 	bne.w	8003110 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003000:	4b4c      	ldr	r3, [pc, #304]	; (8003134 <xTaskIncrementTick+0x148>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	3301      	adds	r3, #1
 8003006:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003008:	4a4a      	ldr	r2, [pc, #296]	; (8003134 <xTaskIncrementTick+0x148>)
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d11f      	bne.n	8003054 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003014:	4b48      	ldr	r3, [pc, #288]	; (8003138 <xTaskIncrementTick+0x14c>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d009      	beq.n	8003032 <xTaskIncrementTick+0x46>
 800301e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003022:	f383 8811 	msr	BASEPRI, r3
 8003026:	f3bf 8f6f 	isb	sy
 800302a:	f3bf 8f4f 	dsb	sy
 800302e:	603b      	str	r3, [r7, #0]
 8003030:	e7fe      	b.n	8003030 <xTaskIncrementTick+0x44>
 8003032:	4b41      	ldr	r3, [pc, #260]	; (8003138 <xTaskIncrementTick+0x14c>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	60fb      	str	r3, [r7, #12]
 8003038:	4b40      	ldr	r3, [pc, #256]	; (800313c <xTaskIncrementTick+0x150>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a3e      	ldr	r2, [pc, #248]	; (8003138 <xTaskIncrementTick+0x14c>)
 800303e:	6013      	str	r3, [r2, #0]
 8003040:	4a3e      	ldr	r2, [pc, #248]	; (800313c <xTaskIncrementTick+0x150>)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6013      	str	r3, [r2, #0]
 8003046:	4b3e      	ldr	r3, [pc, #248]	; (8003140 <xTaskIncrementTick+0x154>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	3301      	adds	r3, #1
 800304c:	4a3c      	ldr	r2, [pc, #240]	; (8003140 <xTaskIncrementTick+0x154>)
 800304e:	6013      	str	r3, [r2, #0]
 8003050:	f000 fac4 	bl	80035dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003054:	4b3b      	ldr	r3, [pc, #236]	; (8003144 <xTaskIncrementTick+0x158>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	693a      	ldr	r2, [r7, #16]
 800305a:	429a      	cmp	r2, r3
 800305c:	d349      	bcc.n	80030f2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800305e:	4b36      	ldr	r3, [pc, #216]	; (8003138 <xTaskIncrementTick+0x14c>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d104      	bne.n	8003072 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003068:	4b36      	ldr	r3, [pc, #216]	; (8003144 <xTaskIncrementTick+0x158>)
 800306a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800306e:	601a      	str	r2, [r3, #0]
					break;
 8003070:	e03f      	b.n	80030f2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003072:	4b31      	ldr	r3, [pc, #196]	; (8003138 <xTaskIncrementTick+0x14c>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	429a      	cmp	r2, r3
 8003088:	d203      	bcs.n	8003092 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800308a:	4a2e      	ldr	r2, [pc, #184]	; (8003144 <xTaskIncrementTick+0x158>)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003090:	e02f      	b.n	80030f2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	3304      	adds	r3, #4
 8003096:	4618      	mov	r0, r3
 8003098:	f7fe ffba 	bl	8002010 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d004      	beq.n	80030ae <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	3318      	adds	r3, #24
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7fe ffb1 	bl	8002010 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030b2:	4b25      	ldr	r3, [pc, #148]	; (8003148 <xTaskIncrementTick+0x15c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d903      	bls.n	80030c2 <xTaskIncrementTick+0xd6>
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030be:	4a22      	ldr	r2, [pc, #136]	; (8003148 <xTaskIncrementTick+0x15c>)
 80030c0:	6013      	str	r3, [r2, #0]
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c6:	4613      	mov	r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4413      	add	r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	4a1f      	ldr	r2, [pc, #124]	; (800314c <xTaskIncrementTick+0x160>)
 80030d0:	441a      	add	r2, r3
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	3304      	adds	r3, #4
 80030d6:	4619      	mov	r1, r3
 80030d8:	4610      	mov	r0, r2
 80030da:	f7fe ff3c 	bl	8001f56 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030e2:	4b1b      	ldr	r3, [pc, #108]	; (8003150 <xTaskIncrementTick+0x164>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d3b8      	bcc.n	800305e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80030ec:	2301      	movs	r3, #1
 80030ee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030f0:	e7b5      	b.n	800305e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80030f2:	4b17      	ldr	r3, [pc, #92]	; (8003150 <xTaskIncrementTick+0x164>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030f8:	4914      	ldr	r1, [pc, #80]	; (800314c <xTaskIncrementTick+0x160>)
 80030fa:	4613      	mov	r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	4413      	add	r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	440b      	add	r3, r1
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d907      	bls.n	800311a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800310a:	2301      	movs	r3, #1
 800310c:	617b      	str	r3, [r7, #20]
 800310e:	e004      	b.n	800311a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003110:	4b10      	ldr	r3, [pc, #64]	; (8003154 <xTaskIncrementTick+0x168>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	3301      	adds	r3, #1
 8003116:	4a0f      	ldr	r2, [pc, #60]	; (8003154 <xTaskIncrementTick+0x168>)
 8003118:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800311a:	4b0f      	ldr	r3, [pc, #60]	; (8003158 <xTaskIncrementTick+0x16c>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8003122:	2301      	movs	r3, #1
 8003124:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003126:	697b      	ldr	r3, [r7, #20]
}
 8003128:	4618      	mov	r0, r3
 800312a:	3718      	adds	r7, #24
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	20000be8 	.word	0x20000be8
 8003134:	20000bc4 	.word	0x20000bc4
 8003138:	20000b78 	.word	0x20000b78
 800313c:	20000b7c 	.word	0x20000b7c
 8003140:	20000bd8 	.word	0x20000bd8
 8003144:	20000be0 	.word	0x20000be0
 8003148:	20000bc8 	.word	0x20000bc8
 800314c:	200006f0 	.word	0x200006f0
 8003150:	200006ec 	.word	0x200006ec
 8003154:	20000bd0 	.word	0x20000bd0
 8003158:	20000bd4 	.word	0x20000bd4

0800315c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800315c:	b480      	push	{r7}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003162:	4b27      	ldr	r3, [pc, #156]	; (8003200 <vTaskSwitchContext+0xa4>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800316a:	4b26      	ldr	r3, [pc, #152]	; (8003204 <vTaskSwitchContext+0xa8>)
 800316c:	2201      	movs	r2, #1
 800316e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003170:	e040      	b.n	80031f4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8003172:	4b24      	ldr	r3, [pc, #144]	; (8003204 <vTaskSwitchContext+0xa8>)
 8003174:	2200      	movs	r2, #0
 8003176:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003178:	4b23      	ldr	r3, [pc, #140]	; (8003208 <vTaskSwitchContext+0xac>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	60fb      	str	r3, [r7, #12]
 800317e:	e00f      	b.n	80031a0 <vTaskSwitchContext+0x44>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d109      	bne.n	800319a <vTaskSwitchContext+0x3e>
 8003186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800318a:	f383 8811 	msr	BASEPRI, r3
 800318e:	f3bf 8f6f 	isb	sy
 8003192:	f3bf 8f4f 	dsb	sy
 8003196:	607b      	str	r3, [r7, #4]
 8003198:	e7fe      	b.n	8003198 <vTaskSwitchContext+0x3c>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	3b01      	subs	r3, #1
 800319e:	60fb      	str	r3, [r7, #12]
 80031a0:	491a      	ldr	r1, [pc, #104]	; (800320c <vTaskSwitchContext+0xb0>)
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	4613      	mov	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4413      	add	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	440b      	add	r3, r1
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d0e5      	beq.n	8003180 <vTaskSwitchContext+0x24>
 80031b4:	68fa      	ldr	r2, [r7, #12]
 80031b6:	4613      	mov	r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	4413      	add	r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	4a13      	ldr	r2, [pc, #76]	; (800320c <vTaskSwitchContext+0xb0>)
 80031c0:	4413      	add	r3, r2
 80031c2:	60bb      	str	r3, [r7, #8]
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	605a      	str	r2, [r3, #4]
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	685a      	ldr	r2, [r3, #4]
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	3308      	adds	r3, #8
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d104      	bne.n	80031e4 <vTaskSwitchContext+0x88>
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	605a      	str	r2, [r3, #4]
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	4a09      	ldr	r2, [pc, #36]	; (8003210 <vTaskSwitchContext+0xb4>)
 80031ec:	6013      	str	r3, [r2, #0]
 80031ee:	4a06      	ldr	r2, [pc, #24]	; (8003208 <vTaskSwitchContext+0xac>)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6013      	str	r3, [r2, #0]
}
 80031f4:	bf00      	nop
 80031f6:	3714      	adds	r7, #20
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr
 8003200:	20000be8 	.word	0x20000be8
 8003204:	20000bd4 	.word	0x20000bd4
 8003208:	20000bc8 	.word	0x20000bc8
 800320c:	200006f0 	.word	0x200006f0
 8003210:	200006ec 	.word	0x200006ec

08003214 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d109      	bne.n	8003238 <vTaskPlaceOnEventList+0x24>
 8003224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003228:	f383 8811 	msr	BASEPRI, r3
 800322c:	f3bf 8f6f 	isb	sy
 8003230:	f3bf 8f4f 	dsb	sy
 8003234:	60fb      	str	r3, [r7, #12]
 8003236:	e7fe      	b.n	8003236 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003238:	4b07      	ldr	r3, [pc, #28]	; (8003258 <vTaskPlaceOnEventList+0x44>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	3318      	adds	r3, #24
 800323e:	4619      	mov	r1, r3
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f7fe feac 	bl	8001f9e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003246:	2101      	movs	r1, #1
 8003248:	6838      	ldr	r0, [r7, #0]
 800324a:	f000 fa71 	bl	8003730 <prvAddCurrentTaskToDelayedList>
}
 800324e:	bf00      	nop
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	200006ec 	.word	0x200006ec

0800325c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d109      	bne.n	8003282 <vTaskPlaceOnEventListRestricted+0x26>
 800326e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003272:	f383 8811 	msr	BASEPRI, r3
 8003276:	f3bf 8f6f 	isb	sy
 800327a:	f3bf 8f4f 	dsb	sy
 800327e:	617b      	str	r3, [r7, #20]
 8003280:	e7fe      	b.n	8003280 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003282:	4b0a      	ldr	r3, [pc, #40]	; (80032ac <vTaskPlaceOnEventListRestricted+0x50>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	3318      	adds	r3, #24
 8003288:	4619      	mov	r1, r3
 800328a:	68f8      	ldr	r0, [r7, #12]
 800328c:	f7fe fe63 	bl	8001f56 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d002      	beq.n	800329c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8003296:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800329a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	68b8      	ldr	r0, [r7, #8]
 80032a0:	f000 fa46 	bl	8003730 <prvAddCurrentTaskToDelayedList>
	}
 80032a4:	bf00      	nop
 80032a6:	3718      	adds	r7, #24
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	200006ec 	.word	0x200006ec

080032b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d109      	bne.n	80032da <xTaskRemoveFromEventList+0x2a>
 80032c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ca:	f383 8811 	msr	BASEPRI, r3
 80032ce:	f3bf 8f6f 	isb	sy
 80032d2:	f3bf 8f4f 	dsb	sy
 80032d6:	60fb      	str	r3, [r7, #12]
 80032d8:	e7fe      	b.n	80032d8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	3318      	adds	r3, #24
 80032de:	4618      	mov	r0, r3
 80032e0:	f7fe fe96 	bl	8002010 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032e4:	4b1d      	ldr	r3, [pc, #116]	; (800335c <xTaskRemoveFromEventList+0xac>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d11d      	bne.n	8003328 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	3304      	adds	r3, #4
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7fe fe8d 	bl	8002010 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032fa:	4b19      	ldr	r3, [pc, #100]	; (8003360 <xTaskRemoveFromEventList+0xb0>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d903      	bls.n	800330a <xTaskRemoveFromEventList+0x5a>
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003306:	4a16      	ldr	r2, [pc, #88]	; (8003360 <xTaskRemoveFromEventList+0xb0>)
 8003308:	6013      	str	r3, [r2, #0]
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800330e:	4613      	mov	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	4413      	add	r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	4a13      	ldr	r2, [pc, #76]	; (8003364 <xTaskRemoveFromEventList+0xb4>)
 8003318:	441a      	add	r2, r3
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	3304      	adds	r3, #4
 800331e:	4619      	mov	r1, r3
 8003320:	4610      	mov	r0, r2
 8003322:	f7fe fe18 	bl	8001f56 <vListInsertEnd>
 8003326:	e005      	b.n	8003334 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	3318      	adds	r3, #24
 800332c:	4619      	mov	r1, r3
 800332e:	480e      	ldr	r0, [pc, #56]	; (8003368 <xTaskRemoveFromEventList+0xb8>)
 8003330:	f7fe fe11 	bl	8001f56 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003338:	4b0c      	ldr	r3, [pc, #48]	; (800336c <xTaskRemoveFromEventList+0xbc>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333e:	429a      	cmp	r2, r3
 8003340:	d905      	bls.n	800334e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003342:	2301      	movs	r3, #1
 8003344:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003346:	4b0a      	ldr	r3, [pc, #40]	; (8003370 <xTaskRemoveFromEventList+0xc0>)
 8003348:	2201      	movs	r2, #1
 800334a:	601a      	str	r2, [r3, #0]
 800334c:	e001      	b.n	8003352 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800334e:	2300      	movs	r3, #0
 8003350:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003352:	697b      	ldr	r3, [r7, #20]
}
 8003354:	4618      	mov	r0, r3
 8003356:	3718      	adds	r7, #24
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	20000be8 	.word	0x20000be8
 8003360:	20000bc8 	.word	0x20000bc8
 8003364:	200006f0 	.word	0x200006f0
 8003368:	20000b80 	.word	0x20000b80
 800336c:	200006ec 	.word	0x200006ec
 8003370:	20000bd4 	.word	0x20000bd4

08003374 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800337c:	4b06      	ldr	r3, [pc, #24]	; (8003398 <vTaskInternalSetTimeOutState+0x24>)
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003384:	4b05      	ldr	r3, [pc, #20]	; (800339c <vTaskInternalSetTimeOutState+0x28>)
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	605a      	str	r2, [r3, #4]
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr
 8003398:	20000bd8 	.word	0x20000bd8
 800339c:	20000bc4 	.word	0x20000bc4

080033a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b088      	sub	sp, #32
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d109      	bne.n	80033c4 <xTaskCheckForTimeOut+0x24>
 80033b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b4:	f383 8811 	msr	BASEPRI, r3
 80033b8:	f3bf 8f6f 	isb	sy
 80033bc:	f3bf 8f4f 	dsb	sy
 80033c0:	613b      	str	r3, [r7, #16]
 80033c2:	e7fe      	b.n	80033c2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d109      	bne.n	80033de <xTaskCheckForTimeOut+0x3e>
 80033ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ce:	f383 8811 	msr	BASEPRI, r3
 80033d2:	f3bf 8f6f 	isb	sy
 80033d6:	f3bf 8f4f 	dsb	sy
 80033da:	60fb      	str	r3, [r7, #12]
 80033dc:	e7fe      	b.n	80033dc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80033de:	f000 fe65 	bl	80040ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80033e2:	4b1d      	ldr	r3, [pc, #116]	; (8003458 <xTaskCheckForTimeOut+0xb8>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033fa:	d102      	bne.n	8003402 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80033fc:	2300      	movs	r3, #0
 80033fe:	61fb      	str	r3, [r7, #28]
 8003400:	e023      	b.n	800344a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	4b15      	ldr	r3, [pc, #84]	; (800345c <xTaskCheckForTimeOut+0xbc>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	429a      	cmp	r2, r3
 800340c:	d007      	beq.n	800341e <xTaskCheckForTimeOut+0x7e>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	429a      	cmp	r2, r3
 8003416:	d302      	bcc.n	800341e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003418:	2301      	movs	r3, #1
 800341a:	61fb      	str	r3, [r7, #28]
 800341c:	e015      	b.n	800344a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	429a      	cmp	r2, r3
 8003426:	d20b      	bcs.n	8003440 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	1ad2      	subs	r2, r2, r3
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f7ff ff9d 	bl	8003374 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800343a:	2300      	movs	r3, #0
 800343c:	61fb      	str	r3, [r7, #28]
 800343e:	e004      	b.n	800344a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	2200      	movs	r2, #0
 8003444:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003446:	2301      	movs	r3, #1
 8003448:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800344a:	f000 fe5d 	bl	8004108 <vPortExitCritical>

	return xReturn;
 800344e:	69fb      	ldr	r3, [r7, #28]
}
 8003450:	4618      	mov	r0, r3
 8003452:	3720      	adds	r7, #32
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	20000bc4 	.word	0x20000bc4
 800345c:	20000bd8 	.word	0x20000bd8

08003460 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003464:	4b03      	ldr	r3, [pc, #12]	; (8003474 <vTaskMissedYield+0x14>)
 8003466:	2201      	movs	r2, #1
 8003468:	601a      	str	r2, [r3, #0]
}
 800346a:	bf00      	nop
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr
 8003474:	20000bd4 	.word	0x20000bd4

08003478 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003480:	f000 f852 	bl	8003528 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003484:	4b06      	ldr	r3, [pc, #24]	; (80034a0 <prvIdleTask+0x28>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d9f9      	bls.n	8003480 <prvIdleTask+0x8>
			{
				taskYIELD();
 800348c:	4b05      	ldr	r3, [pc, #20]	; (80034a4 <prvIdleTask+0x2c>)
 800348e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003492:	601a      	str	r2, [r3, #0]
 8003494:	f3bf 8f4f 	dsb	sy
 8003498:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800349c:	e7f0      	b.n	8003480 <prvIdleTask+0x8>
 800349e:	bf00      	nop
 80034a0:	200006f0 	.word	0x200006f0
 80034a4:	e000ed04 	.word	0xe000ed04

080034a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80034ae:	2300      	movs	r3, #0
 80034b0:	607b      	str	r3, [r7, #4]
 80034b2:	e00c      	b.n	80034ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	4613      	mov	r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4413      	add	r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	4a12      	ldr	r2, [pc, #72]	; (8003508 <prvInitialiseTaskLists+0x60>)
 80034c0:	4413      	add	r3, r2
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7fe fd1a 	bl	8001efc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	3301      	adds	r3, #1
 80034cc:	607b      	str	r3, [r7, #4]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2b37      	cmp	r3, #55	; 0x37
 80034d2:	d9ef      	bls.n	80034b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80034d4:	480d      	ldr	r0, [pc, #52]	; (800350c <prvInitialiseTaskLists+0x64>)
 80034d6:	f7fe fd11 	bl	8001efc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80034da:	480d      	ldr	r0, [pc, #52]	; (8003510 <prvInitialiseTaskLists+0x68>)
 80034dc:	f7fe fd0e 	bl	8001efc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80034e0:	480c      	ldr	r0, [pc, #48]	; (8003514 <prvInitialiseTaskLists+0x6c>)
 80034e2:	f7fe fd0b 	bl	8001efc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80034e6:	480c      	ldr	r0, [pc, #48]	; (8003518 <prvInitialiseTaskLists+0x70>)
 80034e8:	f7fe fd08 	bl	8001efc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80034ec:	480b      	ldr	r0, [pc, #44]	; (800351c <prvInitialiseTaskLists+0x74>)
 80034ee:	f7fe fd05 	bl	8001efc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80034f2:	4b0b      	ldr	r3, [pc, #44]	; (8003520 <prvInitialiseTaskLists+0x78>)
 80034f4:	4a05      	ldr	r2, [pc, #20]	; (800350c <prvInitialiseTaskLists+0x64>)
 80034f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80034f8:	4b0a      	ldr	r3, [pc, #40]	; (8003524 <prvInitialiseTaskLists+0x7c>)
 80034fa:	4a05      	ldr	r2, [pc, #20]	; (8003510 <prvInitialiseTaskLists+0x68>)
 80034fc:	601a      	str	r2, [r3, #0]
}
 80034fe:	bf00      	nop
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	200006f0 	.word	0x200006f0
 800350c:	20000b50 	.word	0x20000b50
 8003510:	20000b64 	.word	0x20000b64
 8003514:	20000b80 	.word	0x20000b80
 8003518:	20000b94 	.word	0x20000b94
 800351c:	20000bac 	.word	0x20000bac
 8003520:	20000b78 	.word	0x20000b78
 8003524:	20000b7c 	.word	0x20000b7c

08003528 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800352e:	e019      	b.n	8003564 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003530:	f000 fdbc 	bl	80040ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003534:	4b0f      	ldr	r3, [pc, #60]	; (8003574 <prvCheckTasksWaitingTermination+0x4c>)
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	3304      	adds	r3, #4
 8003540:	4618      	mov	r0, r3
 8003542:	f7fe fd65 	bl	8002010 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003546:	4b0c      	ldr	r3, [pc, #48]	; (8003578 <prvCheckTasksWaitingTermination+0x50>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	3b01      	subs	r3, #1
 800354c:	4a0a      	ldr	r2, [pc, #40]	; (8003578 <prvCheckTasksWaitingTermination+0x50>)
 800354e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003550:	4b0a      	ldr	r3, [pc, #40]	; (800357c <prvCheckTasksWaitingTermination+0x54>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	3b01      	subs	r3, #1
 8003556:	4a09      	ldr	r2, [pc, #36]	; (800357c <prvCheckTasksWaitingTermination+0x54>)
 8003558:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800355a:	f000 fdd5 	bl	8004108 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 f80e 	bl	8003580 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003564:	4b05      	ldr	r3, [pc, #20]	; (800357c <prvCheckTasksWaitingTermination+0x54>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1e1      	bne.n	8003530 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800356c:	bf00      	nop
 800356e:	3708      	adds	r7, #8
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	20000b94 	.word	0x20000b94
 8003578:	20000bc0 	.word	0x20000bc0
 800357c:	20000ba8 	.word	0x20000ba8

08003580 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800358e:	2b00      	cmp	r3, #0
 8003590:	d108      	bne.n	80035a4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003596:	4618      	mov	r0, r3
 8003598:	f000 ff64 	bl	8004464 <vPortFree>
				vPortFree( pxTCB );
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 ff61 	bl	8004464 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80035a2:	e017      	b.n	80035d4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d103      	bne.n	80035b6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 ff58 	bl	8004464 <vPortFree>
	}
 80035b4:	e00e      	b.n	80035d4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d009      	beq.n	80035d4 <prvDeleteTCB+0x54>
 80035c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c4:	f383 8811 	msr	BASEPRI, r3
 80035c8:	f3bf 8f6f 	isb	sy
 80035cc:	f3bf 8f4f 	dsb	sy
 80035d0:	60fb      	str	r3, [r7, #12]
 80035d2:	e7fe      	b.n	80035d2 <prvDeleteTCB+0x52>
	}
 80035d4:	bf00      	nop
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035e2:	4b0c      	ldr	r3, [pc, #48]	; (8003614 <prvResetNextTaskUnblockTime+0x38>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d104      	bne.n	80035f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80035ec:	4b0a      	ldr	r3, [pc, #40]	; (8003618 <prvResetNextTaskUnblockTime+0x3c>)
 80035ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80035f4:	e008      	b.n	8003608 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035f6:	4b07      	ldr	r3, [pc, #28]	; (8003614 <prvResetNextTaskUnblockTime+0x38>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	4a04      	ldr	r2, [pc, #16]	; (8003618 <prvResetNextTaskUnblockTime+0x3c>)
 8003606:	6013      	str	r3, [r2, #0]
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr
 8003614:	20000b78 	.word	0x20000b78
 8003618:	20000be0 	.word	0x20000be0

0800361c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003622:	4b0b      	ldr	r3, [pc, #44]	; (8003650 <xTaskGetSchedulerState+0x34>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d102      	bne.n	8003630 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800362a:	2301      	movs	r3, #1
 800362c:	607b      	str	r3, [r7, #4]
 800362e:	e008      	b.n	8003642 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003630:	4b08      	ldr	r3, [pc, #32]	; (8003654 <xTaskGetSchedulerState+0x38>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d102      	bne.n	800363e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003638:	2302      	movs	r3, #2
 800363a:	607b      	str	r3, [r7, #4]
 800363c:	e001      	b.n	8003642 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800363e:	2300      	movs	r3, #0
 8003640:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003642:	687b      	ldr	r3, [r7, #4]
	}
 8003644:	4618      	mov	r0, r3
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr
 8003650:	20000bcc 	.word	0x20000bcc
 8003654:	20000be8 	.word	0x20000be8

08003658 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003658:	b580      	push	{r7, lr}
 800365a:	b086      	sub	sp, #24
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003664:	2300      	movs	r3, #0
 8003666:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d054      	beq.n	8003718 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800366e:	4b2d      	ldr	r3, [pc, #180]	; (8003724 <xTaskPriorityDisinherit+0xcc>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	429a      	cmp	r2, r3
 8003676:	d009      	beq.n	800368c <xTaskPriorityDisinherit+0x34>
 8003678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800367c:	f383 8811 	msr	BASEPRI, r3
 8003680:	f3bf 8f6f 	isb	sy
 8003684:	f3bf 8f4f 	dsb	sy
 8003688:	60fb      	str	r3, [r7, #12]
 800368a:	e7fe      	b.n	800368a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003690:	2b00      	cmp	r3, #0
 8003692:	d109      	bne.n	80036a8 <xTaskPriorityDisinherit+0x50>
 8003694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003698:	f383 8811 	msr	BASEPRI, r3
 800369c:	f3bf 8f6f 	isb	sy
 80036a0:	f3bf 8f4f 	dsb	sy
 80036a4:	60bb      	str	r3, [r7, #8]
 80036a6:	e7fe      	b.n	80036a6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ac:	1e5a      	subs	r2, r3, #1
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d02c      	beq.n	8003718 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d128      	bne.n	8003718 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	3304      	adds	r3, #4
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7fe fca0 	bl	8002010 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036dc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e8:	4b0f      	ldr	r3, [pc, #60]	; (8003728 <xTaskPriorityDisinherit+0xd0>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d903      	bls.n	80036f8 <xTaskPriorityDisinherit+0xa0>
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f4:	4a0c      	ldr	r2, [pc, #48]	; (8003728 <xTaskPriorityDisinherit+0xd0>)
 80036f6:	6013      	str	r3, [r2, #0]
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036fc:	4613      	mov	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	4413      	add	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	4a09      	ldr	r2, [pc, #36]	; (800372c <xTaskPriorityDisinherit+0xd4>)
 8003706:	441a      	add	r2, r3
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	3304      	adds	r3, #4
 800370c:	4619      	mov	r1, r3
 800370e:	4610      	mov	r0, r2
 8003710:	f7fe fc21 	bl	8001f56 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003714:	2301      	movs	r3, #1
 8003716:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003718:	697b      	ldr	r3, [r7, #20]
	}
 800371a:	4618      	mov	r0, r3
 800371c:	3718      	adds	r7, #24
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	200006ec 	.word	0x200006ec
 8003728:	20000bc8 	.word	0x20000bc8
 800372c:	200006f0 	.word	0x200006f0

08003730 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800373a:	4b21      	ldr	r3, [pc, #132]	; (80037c0 <prvAddCurrentTaskToDelayedList+0x90>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003740:	4b20      	ldr	r3, [pc, #128]	; (80037c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	3304      	adds	r3, #4
 8003746:	4618      	mov	r0, r3
 8003748:	f7fe fc62 	bl	8002010 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003752:	d10a      	bne.n	800376a <prvAddCurrentTaskToDelayedList+0x3a>
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d007      	beq.n	800376a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800375a:	4b1a      	ldr	r3, [pc, #104]	; (80037c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	3304      	adds	r3, #4
 8003760:	4619      	mov	r1, r3
 8003762:	4819      	ldr	r0, [pc, #100]	; (80037c8 <prvAddCurrentTaskToDelayedList+0x98>)
 8003764:	f7fe fbf7 	bl	8001f56 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003768:	e026      	b.n	80037b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4413      	add	r3, r2
 8003770:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003772:	4b14      	ldr	r3, [pc, #80]	; (80037c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68ba      	ldr	r2, [r7, #8]
 8003778:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800377a:	68ba      	ldr	r2, [r7, #8]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	429a      	cmp	r2, r3
 8003780:	d209      	bcs.n	8003796 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003782:	4b12      	ldr	r3, [pc, #72]	; (80037cc <prvAddCurrentTaskToDelayedList+0x9c>)
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	4b0f      	ldr	r3, [pc, #60]	; (80037c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	3304      	adds	r3, #4
 800378c:	4619      	mov	r1, r3
 800378e:	4610      	mov	r0, r2
 8003790:	f7fe fc05 	bl	8001f9e <vListInsert>
}
 8003794:	e010      	b.n	80037b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003796:	4b0e      	ldr	r3, [pc, #56]	; (80037d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	4b0a      	ldr	r3, [pc, #40]	; (80037c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	3304      	adds	r3, #4
 80037a0:	4619      	mov	r1, r3
 80037a2:	4610      	mov	r0, r2
 80037a4:	f7fe fbfb 	bl	8001f9e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80037a8:	4b0a      	ldr	r3, [pc, #40]	; (80037d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68ba      	ldr	r2, [r7, #8]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d202      	bcs.n	80037b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80037b2:	4a08      	ldr	r2, [pc, #32]	; (80037d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	6013      	str	r3, [r2, #0]
}
 80037b8:	bf00      	nop
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	20000bc4 	.word	0x20000bc4
 80037c4:	200006ec 	.word	0x200006ec
 80037c8:	20000bac 	.word	0x20000bac
 80037cc:	20000b7c 	.word	0x20000b7c
 80037d0:	20000b78 	.word	0x20000b78
 80037d4:	20000be0 	.word	0x20000be0

080037d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b08a      	sub	sp, #40	; 0x28
 80037dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80037de:	2300      	movs	r3, #0
 80037e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80037e2:	f000 faff 	bl	8003de4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80037e6:	4b1c      	ldr	r3, [pc, #112]	; (8003858 <xTimerCreateTimerTask+0x80>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d021      	beq.n	8003832 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80037ee:	2300      	movs	r3, #0
 80037f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80037f2:	2300      	movs	r3, #0
 80037f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80037f6:	1d3a      	adds	r2, r7, #4
 80037f8:	f107 0108 	add.w	r1, r7, #8
 80037fc:	f107 030c 	add.w	r3, r7, #12
 8003800:	4618      	mov	r0, r3
 8003802:	f7fe fb61 	bl	8001ec8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003806:	6879      	ldr	r1, [r7, #4]
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	9202      	str	r2, [sp, #8]
 800380e:	9301      	str	r3, [sp, #4]
 8003810:	2302      	movs	r3, #2
 8003812:	9300      	str	r3, [sp, #0]
 8003814:	2300      	movs	r3, #0
 8003816:	460a      	mov	r2, r1
 8003818:	4910      	ldr	r1, [pc, #64]	; (800385c <xTimerCreateTimerTask+0x84>)
 800381a:	4811      	ldr	r0, [pc, #68]	; (8003860 <xTimerCreateTimerTask+0x88>)
 800381c:	f7ff f8f6 	bl	8002a0c <xTaskCreateStatic>
 8003820:	4602      	mov	r2, r0
 8003822:	4b10      	ldr	r3, [pc, #64]	; (8003864 <xTimerCreateTimerTask+0x8c>)
 8003824:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003826:	4b0f      	ldr	r3, [pc, #60]	; (8003864 <xTimerCreateTimerTask+0x8c>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800382e:	2301      	movs	r3, #1
 8003830:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d109      	bne.n	800384c <xTimerCreateTimerTask+0x74>
 8003838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800383c:	f383 8811 	msr	BASEPRI, r3
 8003840:	f3bf 8f6f 	isb	sy
 8003844:	f3bf 8f4f 	dsb	sy
 8003848:	613b      	str	r3, [r7, #16]
 800384a:	e7fe      	b.n	800384a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800384c:	697b      	ldr	r3, [r7, #20]
}
 800384e:	4618      	mov	r0, r3
 8003850:	3718      	adds	r7, #24
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	20000c1c 	.word	0x20000c1c
 800385c:	08004728 	.word	0x08004728
 8003860:	08003999 	.word	0x08003999
 8003864:	20000c20 	.word	0x20000c20

08003868 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b08a      	sub	sp, #40	; 0x28
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
 8003874:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003876:	2300      	movs	r3, #0
 8003878:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d109      	bne.n	8003894 <xTimerGenericCommand+0x2c>
 8003880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003884:	f383 8811 	msr	BASEPRI, r3
 8003888:	f3bf 8f6f 	isb	sy
 800388c:	f3bf 8f4f 	dsb	sy
 8003890:	623b      	str	r3, [r7, #32]
 8003892:	e7fe      	b.n	8003892 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003894:	4b19      	ldr	r3, [pc, #100]	; (80038fc <xTimerGenericCommand+0x94>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d02a      	beq.n	80038f2 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	2b05      	cmp	r3, #5
 80038ac:	dc18      	bgt.n	80038e0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80038ae:	f7ff feb5 	bl	800361c <xTaskGetSchedulerState>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d109      	bne.n	80038cc <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80038b8:	4b10      	ldr	r3, [pc, #64]	; (80038fc <xTimerGenericCommand+0x94>)
 80038ba:	6818      	ldr	r0, [r3, #0]
 80038bc:	f107 0110 	add.w	r1, r7, #16
 80038c0:	2300      	movs	r3, #0
 80038c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038c4:	f7fe fccc 	bl	8002260 <xQueueGenericSend>
 80038c8:	6278      	str	r0, [r7, #36]	; 0x24
 80038ca:	e012      	b.n	80038f2 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80038cc:	4b0b      	ldr	r3, [pc, #44]	; (80038fc <xTimerGenericCommand+0x94>)
 80038ce:	6818      	ldr	r0, [r3, #0]
 80038d0:	f107 0110 	add.w	r1, r7, #16
 80038d4:	2300      	movs	r3, #0
 80038d6:	2200      	movs	r2, #0
 80038d8:	f7fe fcc2 	bl	8002260 <xQueueGenericSend>
 80038dc:	6278      	str	r0, [r7, #36]	; 0x24
 80038de:	e008      	b.n	80038f2 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80038e0:	4b06      	ldr	r3, [pc, #24]	; (80038fc <xTimerGenericCommand+0x94>)
 80038e2:	6818      	ldr	r0, [r3, #0]
 80038e4:	f107 0110 	add.w	r1, r7, #16
 80038e8:	2300      	movs	r3, #0
 80038ea:	683a      	ldr	r2, [r7, #0]
 80038ec:	f7fe fdb2 	bl	8002454 <xQueueGenericSendFromISR>
 80038f0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80038f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3728      	adds	r7, #40	; 0x28
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	20000c1c 	.word	0x20000c1c

08003900 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b088      	sub	sp, #32
 8003904:	af02      	add	r7, sp, #8
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800390a:	4b22      	ldr	r3, [pc, #136]	; (8003994 <prvProcessExpiredTimer+0x94>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	3304      	adds	r3, #4
 8003918:	4618      	mov	r0, r3
 800391a:	f7fe fb79 	bl	8002010 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003924:	f003 0304 	and.w	r3, r3, #4
 8003928:	2b00      	cmp	r3, #0
 800392a:	d021      	beq.n	8003970 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	699a      	ldr	r2, [r3, #24]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	18d1      	adds	r1, r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	683a      	ldr	r2, [r7, #0]
 8003938:	6978      	ldr	r0, [r7, #20]
 800393a:	f000 f8d1 	bl	8003ae0 <prvInsertTimerInActiveList>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d01e      	beq.n	8003982 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003944:	2300      	movs	r3, #0
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	2300      	movs	r3, #0
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	2100      	movs	r1, #0
 800394e:	6978      	ldr	r0, [r7, #20]
 8003950:	f7ff ff8a 	bl	8003868 <xTimerGenericCommand>
 8003954:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d112      	bne.n	8003982 <prvProcessExpiredTimer+0x82>
 800395c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003960:	f383 8811 	msr	BASEPRI, r3
 8003964:	f3bf 8f6f 	isb	sy
 8003968:	f3bf 8f4f 	dsb	sy
 800396c:	60fb      	str	r3, [r7, #12]
 800396e:	e7fe      	b.n	800396e <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003976:	f023 0301 	bic.w	r3, r3, #1
 800397a:	b2da      	uxtb	r2, r3
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	6978      	ldr	r0, [r7, #20]
 8003988:	4798      	blx	r3
}
 800398a:	bf00      	nop
 800398c:	3718      	adds	r7, #24
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	20000c14 	.word	0x20000c14

08003998 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80039a0:	f107 0308 	add.w	r3, r7, #8
 80039a4:	4618      	mov	r0, r3
 80039a6:	f000 f857 	bl	8003a58 <prvGetNextExpireTime>
 80039aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	4619      	mov	r1, r3
 80039b0:	68f8      	ldr	r0, [r7, #12]
 80039b2:	f000 f803 	bl	80039bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80039b6:	f000 f8d5 	bl	8003b64 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80039ba:	e7f1      	b.n	80039a0 <prvTimerTask+0x8>

080039bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80039c6:	f7ff fa57 	bl	8002e78 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80039ca:	f107 0308 	add.w	r3, r7, #8
 80039ce:	4618      	mov	r0, r3
 80039d0:	f000 f866 	bl	8003aa0 <prvSampleTimeNow>
 80039d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d130      	bne.n	8003a3e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10a      	bne.n	80039f8 <prvProcessTimerOrBlockTask+0x3c>
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d806      	bhi.n	80039f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80039ea:	f7ff fa53 	bl	8002e94 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80039ee:	68f9      	ldr	r1, [r7, #12]
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f7ff ff85 	bl	8003900 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80039f6:	e024      	b.n	8003a42 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d008      	beq.n	8003a10 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80039fe:	4b13      	ldr	r3, [pc, #76]	; (8003a4c <prvProcessTimerOrBlockTask+0x90>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d101      	bne.n	8003a0c <prvProcessTimerOrBlockTask+0x50>
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e000      	b.n	8003a0e <prvProcessTimerOrBlockTask+0x52>
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003a10:	4b0f      	ldr	r3, [pc, #60]	; (8003a50 <prvProcessTimerOrBlockTask+0x94>)
 8003a12:	6818      	ldr	r0, [r3, #0]
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	683a      	ldr	r2, [r7, #0]
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	f7fe ffc1 	bl	80029a4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003a22:	f7ff fa37 	bl	8002e94 <xTaskResumeAll>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d10a      	bne.n	8003a42 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003a2c:	4b09      	ldr	r3, [pc, #36]	; (8003a54 <prvProcessTimerOrBlockTask+0x98>)
 8003a2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a32:	601a      	str	r2, [r3, #0]
 8003a34:	f3bf 8f4f 	dsb	sy
 8003a38:	f3bf 8f6f 	isb	sy
}
 8003a3c:	e001      	b.n	8003a42 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003a3e:	f7ff fa29 	bl	8002e94 <xTaskResumeAll>
}
 8003a42:	bf00      	nop
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	20000c18 	.word	0x20000c18
 8003a50:	20000c1c 	.word	0x20000c1c
 8003a54:	e000ed04 	.word	0xe000ed04

08003a58 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b085      	sub	sp, #20
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003a60:	4b0e      	ldr	r3, [pc, #56]	; (8003a9c <prvGetNextExpireTime+0x44>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <prvGetNextExpireTime+0x16>
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	e000      	b.n	8003a70 <prvGetNextExpireTime+0x18>
 8003a6e:	2200      	movs	r2, #0
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d105      	bne.n	8003a88 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a7c:	4b07      	ldr	r3, [pc, #28]	; (8003a9c <prvGetNextExpireTime+0x44>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	60fb      	str	r3, [r7, #12]
 8003a86:	e001      	b.n	8003a8c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3714      	adds	r7, #20
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	20000c14 	.word	0x20000c14

08003aa0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003aa8:	f7ff fa90 	bl	8002fcc <xTaskGetTickCount>
 8003aac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003aae:	4b0b      	ldr	r3, [pc, #44]	; (8003adc <prvSampleTimeNow+0x3c>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d205      	bcs.n	8003ac4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003ab8:	f000 f930 	bl	8003d1c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	601a      	str	r2, [r3, #0]
 8003ac2:	e002      	b.n	8003aca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003aca:	4a04      	ldr	r2, [pc, #16]	; (8003adc <prvSampleTimeNow+0x3c>)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3710      	adds	r7, #16
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	20000c24 	.word	0x20000c24

08003ae0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
 8003aec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003aee:	2300      	movs	r3, #0
 8003af0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	68ba      	ldr	r2, [r7, #8]
 8003af6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003afe:	68ba      	ldr	r2, [r7, #8]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d812      	bhi.n	8003b2c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	1ad2      	subs	r2, r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d302      	bcc.n	8003b1a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003b14:	2301      	movs	r3, #1
 8003b16:	617b      	str	r3, [r7, #20]
 8003b18:	e01b      	b.n	8003b52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003b1a:	4b10      	ldr	r3, [pc, #64]	; (8003b5c <prvInsertTimerInActiveList+0x7c>)
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	3304      	adds	r3, #4
 8003b22:	4619      	mov	r1, r3
 8003b24:	4610      	mov	r0, r2
 8003b26:	f7fe fa3a 	bl	8001f9e <vListInsert>
 8003b2a:	e012      	b.n	8003b52 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d206      	bcs.n	8003b42 <prvInsertTimerInActiveList+0x62>
 8003b34:	68ba      	ldr	r2, [r7, #8]
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d302      	bcc.n	8003b42 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	617b      	str	r3, [r7, #20]
 8003b40:	e007      	b.n	8003b52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003b42:	4b07      	ldr	r3, [pc, #28]	; (8003b60 <prvInsertTimerInActiveList+0x80>)
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	3304      	adds	r3, #4
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	4610      	mov	r0, r2
 8003b4e:	f7fe fa26 	bl	8001f9e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003b52:	697b      	ldr	r3, [r7, #20]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3718      	adds	r7, #24
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	20000c18 	.word	0x20000c18
 8003b60:	20000c14 	.word	0x20000c14

08003b64 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b08e      	sub	sp, #56	; 0x38
 8003b68:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003b6a:	e0c6      	b.n	8003cfa <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	da17      	bge.n	8003ba2 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003b72:	1d3b      	adds	r3, r7, #4
 8003b74:	3304      	adds	r3, #4
 8003b76:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d109      	bne.n	8003b92 <prvProcessReceivedCommands+0x2e>
 8003b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b82:	f383 8811 	msr	BASEPRI, r3
 8003b86:	f3bf 8f6f 	isb	sy
 8003b8a:	f3bf 8f4f 	dsb	sy
 8003b8e:	61fb      	str	r3, [r7, #28]
 8003b90:	e7fe      	b.n	8003b90 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b98:	6850      	ldr	r0, [r2, #4]
 8003b9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b9c:	6892      	ldr	r2, [r2, #8]
 8003b9e:	4611      	mov	r1, r2
 8003ba0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f2c0 80a7 	blt.w	8003cf8 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d004      	beq.n	8003bc0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb8:	3304      	adds	r3, #4
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7fe fa28 	bl	8002010 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003bc0:	463b      	mov	r3, r7
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7ff ff6c 	bl	8003aa0 <prvSampleTimeNow>
 8003bc8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2b09      	cmp	r3, #9
 8003bce:	f200 8094 	bhi.w	8003cfa <prvProcessReceivedCommands+0x196>
 8003bd2:	a201      	add	r2, pc, #4	; (adr r2, 8003bd8 <prvProcessReceivedCommands+0x74>)
 8003bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd8:	08003c01 	.word	0x08003c01
 8003bdc:	08003c01 	.word	0x08003c01
 8003be0:	08003c01 	.word	0x08003c01
 8003be4:	08003c73 	.word	0x08003c73
 8003be8:	08003c87 	.word	0x08003c87
 8003bec:	08003ccf 	.word	0x08003ccf
 8003bf0:	08003c01 	.word	0x08003c01
 8003bf4:	08003c01 	.word	0x08003c01
 8003bf8:	08003c73 	.word	0x08003c73
 8003bfc:	08003c87 	.word	0x08003c87
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c06:	f043 0301 	orr.w	r3, r3, #1
 8003c0a:	b2da      	uxtb	r2, r3
 8003c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	18d1      	adds	r1, r2, r3
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c20:	f7ff ff5e 	bl	8003ae0 <prvInsertTimerInActiveList>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d067      	beq.n	8003cfa <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c30:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c38:	f003 0304 	and.w	r3, r3, #4
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d05c      	beq.n	8003cfa <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003c40:	68ba      	ldr	r2, [r7, #8]
 8003c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	441a      	add	r2, r3
 8003c48:	2300      	movs	r3, #0
 8003c4a:	9300      	str	r3, [sp, #0]
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	2100      	movs	r1, #0
 8003c50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c52:	f7ff fe09 	bl	8003868 <xTimerGenericCommand>
 8003c56:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003c58:	6a3b      	ldr	r3, [r7, #32]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d14d      	bne.n	8003cfa <prvProcessReceivedCommands+0x196>
 8003c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c62:	f383 8811 	msr	BASEPRI, r3
 8003c66:	f3bf 8f6f 	isb	sy
 8003c6a:	f3bf 8f4f 	dsb	sy
 8003c6e:	61bb      	str	r3, [r7, #24]
 8003c70:	e7fe      	b.n	8003c70 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c78:	f023 0301 	bic.w	r3, r3, #1
 8003c7c:	b2da      	uxtb	r2, r3
 8003c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c80:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8003c84:	e039      	b.n	8003cfa <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c8c:	f043 0301 	orr.w	r3, r3, #1
 8003c90:	b2da      	uxtb	r2, r3
 8003c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c94:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003c98:	68ba      	ldr	r2, [r7, #8]
 8003c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d109      	bne.n	8003cba <prvProcessReceivedCommands+0x156>
 8003ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003caa:	f383 8811 	msr	BASEPRI, r3
 8003cae:	f3bf 8f6f 	isb	sy
 8003cb2:	f3bf 8f4f 	dsb	sy
 8003cb6:	617b      	str	r3, [r7, #20]
 8003cb8:	e7fe      	b.n	8003cb8 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cbc:	699a      	ldr	r2, [r3, #24]
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc0:	18d1      	adds	r1, r2, r3
 8003cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cc8:	f7ff ff0a 	bl	8003ae0 <prvInsertTimerInActiveList>
					break;
 8003ccc:	e015      	b.n	8003cfa <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d103      	bne.n	8003ce4 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8003cdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cde:	f000 fbc1 	bl	8004464 <vPortFree>
 8003ce2:	e00a      	b.n	8003cfa <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cea:	f023 0301 	bic.w	r3, r3, #1
 8003cee:	b2da      	uxtb	r2, r3
 8003cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003cf6:	e000      	b.n	8003cfa <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003cf8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003cfa:	4b07      	ldr	r3, [pc, #28]	; (8003d18 <prvProcessReceivedCommands+0x1b4>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	1d39      	adds	r1, r7, #4
 8003d00:	2200      	movs	r2, #0
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7fe fc3a 	bl	800257c <xQueueReceive>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f47f af2e 	bne.w	8003b6c <prvProcessReceivedCommands+0x8>
	}
}
 8003d10:	bf00      	nop
 8003d12:	3730      	adds	r7, #48	; 0x30
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	20000c1c 	.word	0x20000c1c

08003d1c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b088      	sub	sp, #32
 8003d20:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003d22:	e047      	b.n	8003db4 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003d24:	4b2d      	ldr	r3, [pc, #180]	; (8003ddc <prvSwitchTimerLists+0xc0>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d2e:	4b2b      	ldr	r3, [pc, #172]	; (8003ddc <prvSwitchTimerLists+0xc0>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	3304      	adds	r3, #4
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7fe f967 	bl	8002010 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	68f8      	ldr	r0, [r7, #12]
 8003d48:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d50:	f003 0304 	and.w	r3, r3, #4
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d02d      	beq.n	8003db4 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	693a      	ldr	r2, [r7, #16]
 8003d5e:	4413      	add	r3, r2
 8003d60:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003d62:	68ba      	ldr	r2, [r7, #8]
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d90e      	bls.n	8003d88 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	68ba      	ldr	r2, [r7, #8]
 8003d6e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003d76:	4b19      	ldr	r3, [pc, #100]	; (8003ddc <prvSwitchTimerLists+0xc0>)
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	4619      	mov	r1, r3
 8003d80:	4610      	mov	r0, r2
 8003d82:	f7fe f90c 	bl	8001f9e <vListInsert>
 8003d86:	e015      	b.n	8003db4 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003d88:	2300      	movs	r3, #0
 8003d8a:	9300      	str	r3, [sp, #0]
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	2100      	movs	r1, #0
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	f7ff fd68 	bl	8003868 <xTimerGenericCommand>
 8003d98:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d109      	bne.n	8003db4 <prvSwitchTimerLists+0x98>
 8003da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da4:	f383 8811 	msr	BASEPRI, r3
 8003da8:	f3bf 8f6f 	isb	sy
 8003dac:	f3bf 8f4f 	dsb	sy
 8003db0:	603b      	str	r3, [r7, #0]
 8003db2:	e7fe      	b.n	8003db2 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003db4:	4b09      	ldr	r3, [pc, #36]	; (8003ddc <prvSwitchTimerLists+0xc0>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1b2      	bne.n	8003d24 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003dbe:	4b07      	ldr	r3, [pc, #28]	; (8003ddc <prvSwitchTimerLists+0xc0>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003dc4:	4b06      	ldr	r3, [pc, #24]	; (8003de0 <prvSwitchTimerLists+0xc4>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a04      	ldr	r2, [pc, #16]	; (8003ddc <prvSwitchTimerLists+0xc0>)
 8003dca:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003dcc:	4a04      	ldr	r2, [pc, #16]	; (8003de0 <prvSwitchTimerLists+0xc4>)
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	6013      	str	r3, [r2, #0]
}
 8003dd2:	bf00      	nop
 8003dd4:	3718      	adds	r7, #24
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	20000c14 	.word	0x20000c14
 8003de0:	20000c18 	.word	0x20000c18

08003de4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003dea:	f000 f95f 	bl	80040ac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003dee:	4b15      	ldr	r3, [pc, #84]	; (8003e44 <prvCheckForValidListAndQueue+0x60>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d120      	bne.n	8003e38 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003df6:	4814      	ldr	r0, [pc, #80]	; (8003e48 <prvCheckForValidListAndQueue+0x64>)
 8003df8:	f7fe f880 	bl	8001efc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003dfc:	4813      	ldr	r0, [pc, #76]	; (8003e4c <prvCheckForValidListAndQueue+0x68>)
 8003dfe:	f7fe f87d 	bl	8001efc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003e02:	4b13      	ldr	r3, [pc, #76]	; (8003e50 <prvCheckForValidListAndQueue+0x6c>)
 8003e04:	4a10      	ldr	r2, [pc, #64]	; (8003e48 <prvCheckForValidListAndQueue+0x64>)
 8003e06:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003e08:	4b12      	ldr	r3, [pc, #72]	; (8003e54 <prvCheckForValidListAndQueue+0x70>)
 8003e0a:	4a10      	ldr	r2, [pc, #64]	; (8003e4c <prvCheckForValidListAndQueue+0x68>)
 8003e0c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003e0e:	2300      	movs	r3, #0
 8003e10:	9300      	str	r3, [sp, #0]
 8003e12:	4b11      	ldr	r3, [pc, #68]	; (8003e58 <prvCheckForValidListAndQueue+0x74>)
 8003e14:	4a11      	ldr	r2, [pc, #68]	; (8003e5c <prvCheckForValidListAndQueue+0x78>)
 8003e16:	2110      	movs	r1, #16
 8003e18:	200a      	movs	r0, #10
 8003e1a:	f7fe f98b 	bl	8002134 <xQueueGenericCreateStatic>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	4b08      	ldr	r3, [pc, #32]	; (8003e44 <prvCheckForValidListAndQueue+0x60>)
 8003e22:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003e24:	4b07      	ldr	r3, [pc, #28]	; (8003e44 <prvCheckForValidListAndQueue+0x60>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d005      	beq.n	8003e38 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003e2c:	4b05      	ldr	r3, [pc, #20]	; (8003e44 <prvCheckForValidListAndQueue+0x60>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	490b      	ldr	r1, [pc, #44]	; (8003e60 <prvCheckForValidListAndQueue+0x7c>)
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7fe fd8e 	bl	8002954 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003e38:	f000 f966 	bl	8004108 <vPortExitCritical>
}
 8003e3c:	bf00      	nop
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	20000c1c 	.word	0x20000c1c
 8003e48:	20000bec 	.word	0x20000bec
 8003e4c:	20000c00 	.word	0x20000c00
 8003e50:	20000c14 	.word	0x20000c14
 8003e54:	20000c18 	.word	0x20000c18
 8003e58:	20000cc8 	.word	0x20000cc8
 8003e5c:	20000c28 	.word	0x20000c28
 8003e60:	08004730 	.word	0x08004730

08003e64 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	3b04      	subs	r3, #4
 8003e74:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	3b04      	subs	r3, #4
 8003e82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	f023 0201 	bic.w	r2, r3, #1
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	3b04      	subs	r3, #4
 8003e92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003e94:	4a0c      	ldr	r2, [pc, #48]	; (8003ec8 <pxPortInitialiseStack+0x64>)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	3b14      	subs	r3, #20
 8003e9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	3b04      	subs	r3, #4
 8003eaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f06f 0202 	mvn.w	r2, #2
 8003eb2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	3b20      	subs	r3, #32
 8003eb8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003eba:	68fb      	ldr	r3, [r7, #12]
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3714      	adds	r7, #20
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr
 8003ec8:	08003ecd 	.word	0x08003ecd

08003ecc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b085      	sub	sp, #20
 8003ed0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003ed6:	4b11      	ldr	r3, [pc, #68]	; (8003f1c <prvTaskExitError+0x50>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ede:	d009      	beq.n	8003ef4 <prvTaskExitError+0x28>
 8003ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee4:	f383 8811 	msr	BASEPRI, r3
 8003ee8:	f3bf 8f6f 	isb	sy
 8003eec:	f3bf 8f4f 	dsb	sy
 8003ef0:	60fb      	str	r3, [r7, #12]
 8003ef2:	e7fe      	b.n	8003ef2 <prvTaskExitError+0x26>
 8003ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef8:	f383 8811 	msr	BASEPRI, r3
 8003efc:	f3bf 8f6f 	isb	sy
 8003f00:	f3bf 8f4f 	dsb	sy
 8003f04:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003f06:	bf00      	nop
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d0fc      	beq.n	8003f08 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003f0e:	bf00      	nop
 8003f10:	3714      	adds	r7, #20
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	2000000c 	.word	0x2000000c

08003f20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003f20:	4b07      	ldr	r3, [pc, #28]	; (8003f40 <pxCurrentTCBConst2>)
 8003f22:	6819      	ldr	r1, [r3, #0]
 8003f24:	6808      	ldr	r0, [r1, #0]
 8003f26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f2a:	f380 8809 	msr	PSP, r0
 8003f2e:	f3bf 8f6f 	isb	sy
 8003f32:	f04f 0000 	mov.w	r0, #0
 8003f36:	f380 8811 	msr	BASEPRI, r0
 8003f3a:	4770      	bx	lr
 8003f3c:	f3af 8000 	nop.w

08003f40 <pxCurrentTCBConst2>:
 8003f40:	200006ec 	.word	0x200006ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003f44:	bf00      	nop
 8003f46:	bf00      	nop

08003f48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003f48:	4808      	ldr	r0, [pc, #32]	; (8003f6c <prvPortStartFirstTask+0x24>)
 8003f4a:	6800      	ldr	r0, [r0, #0]
 8003f4c:	6800      	ldr	r0, [r0, #0]
 8003f4e:	f380 8808 	msr	MSP, r0
 8003f52:	f04f 0000 	mov.w	r0, #0
 8003f56:	f380 8814 	msr	CONTROL, r0
 8003f5a:	b662      	cpsie	i
 8003f5c:	b661      	cpsie	f
 8003f5e:	f3bf 8f4f 	dsb	sy
 8003f62:	f3bf 8f6f 	isb	sy
 8003f66:	df00      	svc	0
 8003f68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003f6a:	bf00      	nop
 8003f6c:	e000ed08 	.word	0xe000ed08

08003f70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b086      	sub	sp, #24
 8003f74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003f76:	4b44      	ldr	r3, [pc, #272]	; (8004088 <xPortStartScheduler+0x118>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a44      	ldr	r2, [pc, #272]	; (800408c <xPortStartScheduler+0x11c>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d109      	bne.n	8003f94 <xPortStartScheduler+0x24>
 8003f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f84:	f383 8811 	msr	BASEPRI, r3
 8003f88:	f3bf 8f6f 	isb	sy
 8003f8c:	f3bf 8f4f 	dsb	sy
 8003f90:	613b      	str	r3, [r7, #16]
 8003f92:	e7fe      	b.n	8003f92 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003f94:	4b3c      	ldr	r3, [pc, #240]	; (8004088 <xPortStartScheduler+0x118>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a3d      	ldr	r2, [pc, #244]	; (8004090 <xPortStartScheduler+0x120>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d109      	bne.n	8003fb2 <xPortStartScheduler+0x42>
 8003f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa2:	f383 8811 	msr	BASEPRI, r3
 8003fa6:	f3bf 8f6f 	isb	sy
 8003faa:	f3bf 8f4f 	dsb	sy
 8003fae:	60fb      	str	r3, [r7, #12]
 8003fb0:	e7fe      	b.n	8003fb0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003fb2:	4b38      	ldr	r3, [pc, #224]	; (8004094 <xPortStartScheduler+0x124>)
 8003fb4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	22ff      	movs	r2, #255	; 0xff
 8003fc2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003fcc:	78fb      	ldrb	r3, [r7, #3]
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003fd4:	b2da      	uxtb	r2, r3
 8003fd6:	4b30      	ldr	r3, [pc, #192]	; (8004098 <xPortStartScheduler+0x128>)
 8003fd8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003fda:	4b30      	ldr	r3, [pc, #192]	; (800409c <xPortStartScheduler+0x12c>)
 8003fdc:	2207      	movs	r2, #7
 8003fde:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003fe0:	e009      	b.n	8003ff6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003fe2:	4b2e      	ldr	r3, [pc, #184]	; (800409c <xPortStartScheduler+0x12c>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	4a2c      	ldr	r2, [pc, #176]	; (800409c <xPortStartScheduler+0x12c>)
 8003fea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003fec:	78fb      	ldrb	r3, [r7, #3]
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	005b      	lsls	r3, r3, #1
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ff6:	78fb      	ldrb	r3, [r7, #3]
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ffe:	2b80      	cmp	r3, #128	; 0x80
 8004000:	d0ef      	beq.n	8003fe2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004002:	4b26      	ldr	r3, [pc, #152]	; (800409c <xPortStartScheduler+0x12c>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f1c3 0307 	rsb	r3, r3, #7
 800400a:	2b04      	cmp	r3, #4
 800400c:	d009      	beq.n	8004022 <xPortStartScheduler+0xb2>
 800400e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004012:	f383 8811 	msr	BASEPRI, r3
 8004016:	f3bf 8f6f 	isb	sy
 800401a:	f3bf 8f4f 	dsb	sy
 800401e:	60bb      	str	r3, [r7, #8]
 8004020:	e7fe      	b.n	8004020 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004022:	4b1e      	ldr	r3, [pc, #120]	; (800409c <xPortStartScheduler+0x12c>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	021b      	lsls	r3, r3, #8
 8004028:	4a1c      	ldr	r2, [pc, #112]	; (800409c <xPortStartScheduler+0x12c>)
 800402a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800402c:	4b1b      	ldr	r3, [pc, #108]	; (800409c <xPortStartScheduler+0x12c>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004034:	4a19      	ldr	r2, [pc, #100]	; (800409c <xPortStartScheduler+0x12c>)
 8004036:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	b2da      	uxtb	r2, r3
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004040:	4b17      	ldr	r3, [pc, #92]	; (80040a0 <xPortStartScheduler+0x130>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a16      	ldr	r2, [pc, #88]	; (80040a0 <xPortStartScheduler+0x130>)
 8004046:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800404a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800404c:	4b14      	ldr	r3, [pc, #80]	; (80040a0 <xPortStartScheduler+0x130>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a13      	ldr	r2, [pc, #76]	; (80040a0 <xPortStartScheduler+0x130>)
 8004052:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004056:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004058:	f000 f8d6 	bl	8004208 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800405c:	4b11      	ldr	r3, [pc, #68]	; (80040a4 <xPortStartScheduler+0x134>)
 800405e:	2200      	movs	r2, #0
 8004060:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004062:	f000 f8f5 	bl	8004250 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004066:	4b10      	ldr	r3, [pc, #64]	; (80040a8 <xPortStartScheduler+0x138>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a0f      	ldr	r2, [pc, #60]	; (80040a8 <xPortStartScheduler+0x138>)
 800406c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004070:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004072:	f7ff ff69 	bl	8003f48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004076:	f7ff f871 	bl	800315c <vTaskSwitchContext>
	prvTaskExitError();
 800407a:	f7ff ff27 	bl	8003ecc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3718      	adds	r7, #24
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	e000ed00 	.word	0xe000ed00
 800408c:	410fc271 	.word	0x410fc271
 8004090:	410fc270 	.word	0x410fc270
 8004094:	e000e400 	.word	0xe000e400
 8004098:	20000d18 	.word	0x20000d18
 800409c:	20000d1c 	.word	0x20000d1c
 80040a0:	e000ed20 	.word	0xe000ed20
 80040a4:	2000000c 	.word	0x2000000c
 80040a8:	e000ef34 	.word	0xe000ef34

080040ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b6:	f383 8811 	msr	BASEPRI, r3
 80040ba:	f3bf 8f6f 	isb	sy
 80040be:	f3bf 8f4f 	dsb	sy
 80040c2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80040c4:	4b0e      	ldr	r3, [pc, #56]	; (8004100 <vPortEnterCritical+0x54>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	3301      	adds	r3, #1
 80040ca:	4a0d      	ldr	r2, [pc, #52]	; (8004100 <vPortEnterCritical+0x54>)
 80040cc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80040ce:	4b0c      	ldr	r3, [pc, #48]	; (8004100 <vPortEnterCritical+0x54>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d10e      	bne.n	80040f4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80040d6:	4b0b      	ldr	r3, [pc, #44]	; (8004104 <vPortEnterCritical+0x58>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d009      	beq.n	80040f4 <vPortEnterCritical+0x48>
 80040e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e4:	f383 8811 	msr	BASEPRI, r3
 80040e8:	f3bf 8f6f 	isb	sy
 80040ec:	f3bf 8f4f 	dsb	sy
 80040f0:	603b      	str	r3, [r7, #0]
 80040f2:	e7fe      	b.n	80040f2 <vPortEnterCritical+0x46>
	}
}
 80040f4:	bf00      	nop
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr
 8004100:	2000000c 	.word	0x2000000c
 8004104:	e000ed04 	.word	0xe000ed04

08004108 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800410e:	4b11      	ldr	r3, [pc, #68]	; (8004154 <vPortExitCritical+0x4c>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d109      	bne.n	800412a <vPortExitCritical+0x22>
 8004116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800411a:	f383 8811 	msr	BASEPRI, r3
 800411e:	f3bf 8f6f 	isb	sy
 8004122:	f3bf 8f4f 	dsb	sy
 8004126:	607b      	str	r3, [r7, #4]
 8004128:	e7fe      	b.n	8004128 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800412a:	4b0a      	ldr	r3, [pc, #40]	; (8004154 <vPortExitCritical+0x4c>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	3b01      	subs	r3, #1
 8004130:	4a08      	ldr	r2, [pc, #32]	; (8004154 <vPortExitCritical+0x4c>)
 8004132:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004134:	4b07      	ldr	r3, [pc, #28]	; (8004154 <vPortExitCritical+0x4c>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d104      	bne.n	8004146 <vPortExitCritical+0x3e>
 800413c:	2300      	movs	r3, #0
 800413e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004146:	bf00      	nop
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	2000000c 	.word	0x2000000c
	...

08004160 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004160:	f3ef 8009 	mrs	r0, PSP
 8004164:	f3bf 8f6f 	isb	sy
 8004168:	4b15      	ldr	r3, [pc, #84]	; (80041c0 <pxCurrentTCBConst>)
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	f01e 0f10 	tst.w	lr, #16
 8004170:	bf08      	it	eq
 8004172:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004176:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800417a:	6010      	str	r0, [r2, #0]
 800417c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004180:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004184:	f380 8811 	msr	BASEPRI, r0
 8004188:	f3bf 8f4f 	dsb	sy
 800418c:	f3bf 8f6f 	isb	sy
 8004190:	f7fe ffe4 	bl	800315c <vTaskSwitchContext>
 8004194:	f04f 0000 	mov.w	r0, #0
 8004198:	f380 8811 	msr	BASEPRI, r0
 800419c:	bc09      	pop	{r0, r3}
 800419e:	6819      	ldr	r1, [r3, #0]
 80041a0:	6808      	ldr	r0, [r1, #0]
 80041a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041a6:	f01e 0f10 	tst.w	lr, #16
 80041aa:	bf08      	it	eq
 80041ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80041b0:	f380 8809 	msr	PSP, r0
 80041b4:	f3bf 8f6f 	isb	sy
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	f3af 8000 	nop.w

080041c0 <pxCurrentTCBConst>:
 80041c0:	200006ec 	.word	0x200006ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80041c4:	bf00      	nop
 80041c6:	bf00      	nop

080041c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
	__asm volatile
 80041ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d2:	f383 8811 	msr	BASEPRI, r3
 80041d6:	f3bf 8f6f 	isb	sy
 80041da:	f3bf 8f4f 	dsb	sy
 80041de:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80041e0:	f7fe ff04 	bl	8002fec <xTaskIncrementTick>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d003      	beq.n	80041f2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80041ea:	4b06      	ldr	r3, [pc, #24]	; (8004204 <SysTick_Handler+0x3c>)
 80041ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041f0:	601a      	str	r2, [r3, #0]
 80041f2:	2300      	movs	r3, #0
 80041f4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80041fc:	bf00      	nop
 80041fe:	3708      	adds	r7, #8
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	e000ed04 	.word	0xe000ed04

08004208 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004208:	b480      	push	{r7}
 800420a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800420c:	4b0b      	ldr	r3, [pc, #44]	; (800423c <vPortSetupTimerInterrupt+0x34>)
 800420e:	2200      	movs	r2, #0
 8004210:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004212:	4b0b      	ldr	r3, [pc, #44]	; (8004240 <vPortSetupTimerInterrupt+0x38>)
 8004214:	2200      	movs	r2, #0
 8004216:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004218:	4b0a      	ldr	r3, [pc, #40]	; (8004244 <vPortSetupTimerInterrupt+0x3c>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a0a      	ldr	r2, [pc, #40]	; (8004248 <vPortSetupTimerInterrupt+0x40>)
 800421e:	fba2 2303 	umull	r2, r3, r2, r3
 8004222:	099b      	lsrs	r3, r3, #6
 8004224:	4a09      	ldr	r2, [pc, #36]	; (800424c <vPortSetupTimerInterrupt+0x44>)
 8004226:	3b01      	subs	r3, #1
 8004228:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800422a:	4b04      	ldr	r3, [pc, #16]	; (800423c <vPortSetupTimerInterrupt+0x34>)
 800422c:	2207      	movs	r2, #7
 800422e:	601a      	str	r2, [r3, #0]
}
 8004230:	bf00      	nop
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	e000e010 	.word	0xe000e010
 8004240:	e000e018 	.word	0xe000e018
 8004244:	20000000 	.word	0x20000000
 8004248:	10624dd3 	.word	0x10624dd3
 800424c:	e000e014 	.word	0xe000e014

08004250 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004250:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004260 <vPortEnableVFP+0x10>
 8004254:	6801      	ldr	r1, [r0, #0]
 8004256:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800425a:	6001      	str	r1, [r0, #0]
 800425c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800425e:	bf00      	nop
 8004260:	e000ed88 	.word	0xe000ed88

08004264 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800426a:	f3ef 8305 	mrs	r3, IPSR
 800426e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2b0f      	cmp	r3, #15
 8004274:	d913      	bls.n	800429e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004276:	4a16      	ldr	r2, [pc, #88]	; (80042d0 <vPortValidateInterruptPriority+0x6c>)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	4413      	add	r3, r2
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004280:	4b14      	ldr	r3, [pc, #80]	; (80042d4 <vPortValidateInterruptPriority+0x70>)
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	7afa      	ldrb	r2, [r7, #11]
 8004286:	429a      	cmp	r2, r3
 8004288:	d209      	bcs.n	800429e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800428a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428e:	f383 8811 	msr	BASEPRI, r3
 8004292:	f3bf 8f6f 	isb	sy
 8004296:	f3bf 8f4f 	dsb	sy
 800429a:	607b      	str	r3, [r7, #4]
 800429c:	e7fe      	b.n	800429c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800429e:	4b0e      	ldr	r3, [pc, #56]	; (80042d8 <vPortValidateInterruptPriority+0x74>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80042a6:	4b0d      	ldr	r3, [pc, #52]	; (80042dc <vPortValidateInterruptPriority+0x78>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d909      	bls.n	80042c2 <vPortValidateInterruptPriority+0x5e>
 80042ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b2:	f383 8811 	msr	BASEPRI, r3
 80042b6:	f3bf 8f6f 	isb	sy
 80042ba:	f3bf 8f4f 	dsb	sy
 80042be:	603b      	str	r3, [r7, #0]
 80042c0:	e7fe      	b.n	80042c0 <vPortValidateInterruptPriority+0x5c>
	}
 80042c2:	bf00      	nop
 80042c4:	3714      	adds	r7, #20
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	e000e3f0 	.word	0xe000e3f0
 80042d4:	20000d18 	.word	0x20000d18
 80042d8:	e000ed0c 	.word	0xe000ed0c
 80042dc:	20000d1c 	.word	0x20000d1c

080042e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b08a      	sub	sp, #40	; 0x28
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80042e8:	2300      	movs	r3, #0
 80042ea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80042ec:	f7fe fdc4 	bl	8002e78 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80042f0:	4b57      	ldr	r3, [pc, #348]	; (8004450 <pvPortMalloc+0x170>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d101      	bne.n	80042fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80042f8:	f000 f90c 	bl	8004514 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80042fc:	4b55      	ldr	r3, [pc, #340]	; (8004454 <pvPortMalloc+0x174>)
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4013      	ands	r3, r2
 8004304:	2b00      	cmp	r3, #0
 8004306:	f040 808c 	bne.w	8004422 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d01c      	beq.n	800434a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004310:	2208      	movs	r2, #8
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4413      	add	r3, r2
 8004316:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f003 0307 	and.w	r3, r3, #7
 800431e:	2b00      	cmp	r3, #0
 8004320:	d013      	beq.n	800434a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f023 0307 	bic.w	r3, r3, #7
 8004328:	3308      	adds	r3, #8
 800432a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f003 0307 	and.w	r3, r3, #7
 8004332:	2b00      	cmp	r3, #0
 8004334:	d009      	beq.n	800434a <pvPortMalloc+0x6a>
 8004336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433a:	f383 8811 	msr	BASEPRI, r3
 800433e:	f3bf 8f6f 	isb	sy
 8004342:	f3bf 8f4f 	dsb	sy
 8004346:	617b      	str	r3, [r7, #20]
 8004348:	e7fe      	b.n	8004348 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d068      	beq.n	8004422 <pvPortMalloc+0x142>
 8004350:	4b41      	ldr	r3, [pc, #260]	; (8004458 <pvPortMalloc+0x178>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	429a      	cmp	r2, r3
 8004358:	d863      	bhi.n	8004422 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800435a:	4b40      	ldr	r3, [pc, #256]	; (800445c <pvPortMalloc+0x17c>)
 800435c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800435e:	4b3f      	ldr	r3, [pc, #252]	; (800445c <pvPortMalloc+0x17c>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004364:	e004      	b.n	8004370 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004368:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800436a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	429a      	cmp	r2, r3
 8004378:	d903      	bls.n	8004382 <pvPortMalloc+0xa2>
 800437a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d1f1      	bne.n	8004366 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004382:	4b33      	ldr	r3, [pc, #204]	; (8004450 <pvPortMalloc+0x170>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004388:	429a      	cmp	r2, r3
 800438a:	d04a      	beq.n	8004422 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800438c:	6a3b      	ldr	r3, [r7, #32]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2208      	movs	r2, #8
 8004392:	4413      	add	r3, r2
 8004394:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	6a3b      	ldr	r3, [r7, #32]
 800439c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800439e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a0:	685a      	ldr	r2, [r3, #4]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	1ad2      	subs	r2, r2, r3
 80043a6:	2308      	movs	r3, #8
 80043a8:	005b      	lsls	r3, r3, #1
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d91e      	bls.n	80043ec <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80043ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4413      	add	r3, r2
 80043b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	f003 0307 	and.w	r3, r3, #7
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d009      	beq.n	80043d4 <pvPortMalloc+0xf4>
 80043c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c4:	f383 8811 	msr	BASEPRI, r3
 80043c8:	f3bf 8f6f 	isb	sy
 80043cc:	f3bf 8f4f 	dsb	sy
 80043d0:	613b      	str	r3, [r7, #16]
 80043d2:	e7fe      	b.n	80043d2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80043d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d6:	685a      	ldr	r2, [r3, #4]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	1ad2      	subs	r2, r2, r3
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80043e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80043e6:	69b8      	ldr	r0, [r7, #24]
 80043e8:	f000 f8f6 	bl	80045d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80043ec:	4b1a      	ldr	r3, [pc, #104]	; (8004458 <pvPortMalloc+0x178>)
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	4a18      	ldr	r2, [pc, #96]	; (8004458 <pvPortMalloc+0x178>)
 80043f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80043fa:	4b17      	ldr	r3, [pc, #92]	; (8004458 <pvPortMalloc+0x178>)
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	4b18      	ldr	r3, [pc, #96]	; (8004460 <pvPortMalloc+0x180>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	429a      	cmp	r2, r3
 8004404:	d203      	bcs.n	800440e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004406:	4b14      	ldr	r3, [pc, #80]	; (8004458 <pvPortMalloc+0x178>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a15      	ldr	r2, [pc, #84]	; (8004460 <pvPortMalloc+0x180>)
 800440c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800440e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004410:	685a      	ldr	r2, [r3, #4]
 8004412:	4b10      	ldr	r3, [pc, #64]	; (8004454 <pvPortMalloc+0x174>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	431a      	orrs	r2, r3
 8004418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800441c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441e:	2200      	movs	r2, #0
 8004420:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004422:	f7fe fd37 	bl	8002e94 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	f003 0307 	and.w	r3, r3, #7
 800442c:	2b00      	cmp	r3, #0
 800442e:	d009      	beq.n	8004444 <pvPortMalloc+0x164>
 8004430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004434:	f383 8811 	msr	BASEPRI, r3
 8004438:	f3bf 8f6f 	isb	sy
 800443c:	f3bf 8f4f 	dsb	sy
 8004440:	60fb      	str	r3, [r7, #12]
 8004442:	e7fe      	b.n	8004442 <pvPortMalloc+0x162>
	return pvReturn;
 8004444:	69fb      	ldr	r3, [r7, #28]
}
 8004446:	4618      	mov	r0, r3
 8004448:	3728      	adds	r7, #40	; 0x28
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	20004928 	.word	0x20004928
 8004454:	20004934 	.word	0x20004934
 8004458:	2000492c 	.word	0x2000492c
 800445c:	20004920 	.word	0x20004920
 8004460:	20004930 	.word	0x20004930

08004464 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b086      	sub	sp, #24
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d046      	beq.n	8004504 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004476:	2308      	movs	r3, #8
 8004478:	425b      	negs	r3, r3
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	4413      	add	r3, r2
 800447e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	685a      	ldr	r2, [r3, #4]
 8004488:	4b20      	ldr	r3, [pc, #128]	; (800450c <vPortFree+0xa8>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4013      	ands	r3, r2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d109      	bne.n	80044a6 <vPortFree+0x42>
 8004492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004496:	f383 8811 	msr	BASEPRI, r3
 800449a:	f3bf 8f6f 	isb	sy
 800449e:	f3bf 8f4f 	dsb	sy
 80044a2:	60fb      	str	r3, [r7, #12]
 80044a4:	e7fe      	b.n	80044a4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d009      	beq.n	80044c2 <vPortFree+0x5e>
 80044ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b2:	f383 8811 	msr	BASEPRI, r3
 80044b6:	f3bf 8f6f 	isb	sy
 80044ba:	f3bf 8f4f 	dsb	sy
 80044be:	60bb      	str	r3, [r7, #8]
 80044c0:	e7fe      	b.n	80044c0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	4b11      	ldr	r3, [pc, #68]	; (800450c <vPortFree+0xa8>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4013      	ands	r3, r2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d019      	beq.n	8004504 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d115      	bne.n	8004504 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	685a      	ldr	r2, [r3, #4]
 80044dc:	4b0b      	ldr	r3, [pc, #44]	; (800450c <vPortFree+0xa8>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	43db      	mvns	r3, r3
 80044e2:	401a      	ands	r2, r3
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80044e8:	f7fe fcc6 	bl	8002e78 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	685a      	ldr	r2, [r3, #4]
 80044f0:	4b07      	ldr	r3, [pc, #28]	; (8004510 <vPortFree+0xac>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4413      	add	r3, r2
 80044f6:	4a06      	ldr	r2, [pc, #24]	; (8004510 <vPortFree+0xac>)
 80044f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80044fa:	6938      	ldr	r0, [r7, #16]
 80044fc:	f000 f86c 	bl	80045d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004500:	f7fe fcc8 	bl	8002e94 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004504:	bf00      	nop
 8004506:	3718      	adds	r7, #24
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}
 800450c:	20004934 	.word	0x20004934
 8004510:	2000492c 	.word	0x2000492c

08004514 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800451a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800451e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004520:	4b27      	ldr	r3, [pc, #156]	; (80045c0 <prvHeapInit+0xac>)
 8004522:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f003 0307 	and.w	r3, r3, #7
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00c      	beq.n	8004548 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	3307      	adds	r3, #7
 8004532:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f023 0307 	bic.w	r3, r3, #7
 800453a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800453c:	68ba      	ldr	r2, [r7, #8]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	4a1f      	ldr	r2, [pc, #124]	; (80045c0 <prvHeapInit+0xac>)
 8004544:	4413      	add	r3, r2
 8004546:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800454c:	4a1d      	ldr	r2, [pc, #116]	; (80045c4 <prvHeapInit+0xb0>)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004552:	4b1c      	ldr	r3, [pc, #112]	; (80045c4 <prvHeapInit+0xb0>)
 8004554:	2200      	movs	r2, #0
 8004556:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	68ba      	ldr	r2, [r7, #8]
 800455c:	4413      	add	r3, r2
 800455e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004560:	2208      	movs	r2, #8
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	1a9b      	subs	r3, r3, r2
 8004566:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f023 0307 	bic.w	r3, r3, #7
 800456e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	4a15      	ldr	r2, [pc, #84]	; (80045c8 <prvHeapInit+0xb4>)
 8004574:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004576:	4b14      	ldr	r3, [pc, #80]	; (80045c8 <prvHeapInit+0xb4>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2200      	movs	r2, #0
 800457c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800457e:	4b12      	ldr	r3, [pc, #72]	; (80045c8 <prvHeapInit+0xb4>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2200      	movs	r2, #0
 8004584:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	68fa      	ldr	r2, [r7, #12]
 800458e:	1ad2      	subs	r2, r2, r3
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004594:	4b0c      	ldr	r3, [pc, #48]	; (80045c8 <prvHeapInit+0xb4>)
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	4a0a      	ldr	r2, [pc, #40]	; (80045cc <prvHeapInit+0xb8>)
 80045a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	4a09      	ldr	r2, [pc, #36]	; (80045d0 <prvHeapInit+0xbc>)
 80045aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80045ac:	4b09      	ldr	r3, [pc, #36]	; (80045d4 <prvHeapInit+0xc0>)
 80045ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80045b2:	601a      	str	r2, [r3, #0]
}
 80045b4:	bf00      	nop
 80045b6:	3714      	adds	r7, #20
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr
 80045c0:	20000d20 	.word	0x20000d20
 80045c4:	20004920 	.word	0x20004920
 80045c8:	20004928 	.word	0x20004928
 80045cc:	20004930 	.word	0x20004930
 80045d0:	2000492c 	.word	0x2000492c
 80045d4:	20004934 	.word	0x20004934

080045d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80045d8:	b480      	push	{r7}
 80045da:	b085      	sub	sp, #20
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80045e0:	4b28      	ldr	r3, [pc, #160]	; (8004684 <prvInsertBlockIntoFreeList+0xac>)
 80045e2:	60fb      	str	r3, [r7, #12]
 80045e4:	e002      	b.n	80045ec <prvInsertBlockIntoFreeList+0x14>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	60fb      	str	r3, [r7, #12]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d8f7      	bhi.n	80045e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	4413      	add	r3, r2
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	429a      	cmp	r2, r3
 8004606:	d108      	bne.n	800461a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	685a      	ldr	r2, [r3, #4]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	441a      	add	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	68ba      	ldr	r2, [r7, #8]
 8004624:	441a      	add	r2, r3
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	429a      	cmp	r2, r3
 800462c:	d118      	bne.n	8004660 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	4b15      	ldr	r3, [pc, #84]	; (8004688 <prvInsertBlockIntoFreeList+0xb0>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	429a      	cmp	r2, r3
 8004638:	d00d      	beq.n	8004656 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685a      	ldr	r2, [r3, #4]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	441a      	add	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	601a      	str	r2, [r3, #0]
 8004654:	e008      	b.n	8004668 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004656:	4b0c      	ldr	r3, [pc, #48]	; (8004688 <prvInsertBlockIntoFreeList+0xb0>)
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	601a      	str	r2, [r3, #0]
 800465e:	e003      	b.n	8004668 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	429a      	cmp	r2, r3
 800466e:	d002      	beq.n	8004676 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004676:	bf00      	nop
 8004678:	3714      	adds	r7, #20
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	20004920 	.word	0x20004920
 8004688:	20004928 	.word	0x20004928

0800468c <__libc_init_array>:
 800468c:	b570      	push	{r4, r5, r6, lr}
 800468e:	4e0d      	ldr	r6, [pc, #52]	; (80046c4 <__libc_init_array+0x38>)
 8004690:	4c0d      	ldr	r4, [pc, #52]	; (80046c8 <__libc_init_array+0x3c>)
 8004692:	1ba4      	subs	r4, r4, r6
 8004694:	10a4      	asrs	r4, r4, #2
 8004696:	2500      	movs	r5, #0
 8004698:	42a5      	cmp	r5, r4
 800469a:	d109      	bne.n	80046b0 <__libc_init_array+0x24>
 800469c:	4e0b      	ldr	r6, [pc, #44]	; (80046cc <__libc_init_array+0x40>)
 800469e:	4c0c      	ldr	r4, [pc, #48]	; (80046d0 <__libc_init_array+0x44>)
 80046a0:	f000 f82c 	bl	80046fc <_init>
 80046a4:	1ba4      	subs	r4, r4, r6
 80046a6:	10a4      	asrs	r4, r4, #2
 80046a8:	2500      	movs	r5, #0
 80046aa:	42a5      	cmp	r5, r4
 80046ac:	d105      	bne.n	80046ba <__libc_init_array+0x2e>
 80046ae:	bd70      	pop	{r4, r5, r6, pc}
 80046b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80046b4:	4798      	blx	r3
 80046b6:	3501      	adds	r5, #1
 80046b8:	e7ee      	b.n	8004698 <__libc_init_array+0xc>
 80046ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80046be:	4798      	blx	r3
 80046c0:	3501      	adds	r5, #1
 80046c2:	e7f2      	b.n	80046aa <__libc_init_array+0x1e>
 80046c4:	0800477c 	.word	0x0800477c
 80046c8:	0800477c 	.word	0x0800477c
 80046cc:	0800477c 	.word	0x0800477c
 80046d0:	08004780 	.word	0x08004780

080046d4 <memcpy>:
 80046d4:	b510      	push	{r4, lr}
 80046d6:	1e43      	subs	r3, r0, #1
 80046d8:	440a      	add	r2, r1
 80046da:	4291      	cmp	r1, r2
 80046dc:	d100      	bne.n	80046e0 <memcpy+0xc>
 80046de:	bd10      	pop	{r4, pc}
 80046e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046e8:	e7f7      	b.n	80046da <memcpy+0x6>

080046ea <memset>:
 80046ea:	4402      	add	r2, r0
 80046ec:	4603      	mov	r3, r0
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d100      	bne.n	80046f4 <memset+0xa>
 80046f2:	4770      	bx	lr
 80046f4:	f803 1b01 	strb.w	r1, [r3], #1
 80046f8:	e7f9      	b.n	80046ee <memset+0x4>
	...

080046fc <_init>:
 80046fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046fe:	bf00      	nop
 8004700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004702:	bc08      	pop	{r3}
 8004704:	469e      	mov	lr, r3
 8004706:	4770      	bx	lr

08004708 <_fini>:
 8004708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800470a:	bf00      	nop
 800470c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800470e:	bc08      	pop	{r3}
 8004710:	469e      	mov	lr, r3
 8004712:	4770      	bx	lr
