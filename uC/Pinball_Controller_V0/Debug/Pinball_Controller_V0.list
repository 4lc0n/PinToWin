
Pinball_Controller_V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009344  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  080094e4  080094e4  000194e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095f8  080095f8  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  080095f8  080095f8  000195f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009600  08009600  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009600  08009600  00019600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009604  08009604  00019604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08009608  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000629c  200001e8  080097f0  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006484  080097f0  00026484  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000233f9  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004566  00000000  00000000  00043611  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017b8  00000000  00000000  00047b78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015d0  00000000  00000000  00049330  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00006883  00000000  00000000  0004a900  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000150e5  00000000  00000000  00051183  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009884c  00000000  00000000  00066268  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000feab4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063ac  00000000  00000000  000feb30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080094cc 	.word	0x080094cc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	080094cc 	.word	0x080094cc

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e4:	f000 faa4 	bl	8000a30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e8:	f000 f816 	bl	8000518 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ec:	f000 f87e 	bl	80005ec <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f0:	f005 fcda 	bl	8005ea8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of solenoid_driver */
  solenoid_driverHandle = osThreadNew(start_solenoid_driver, NULL, &solenoid_driver_attributes);
 80004f4:	4a05      	ldr	r2, [pc, #20]	; (800050c <main+0x2c>)
 80004f6:	2100      	movs	r1, #0
 80004f8:	4805      	ldr	r0, [pc, #20]	; (8000510 <main+0x30>)
 80004fa:	f005 fd3f 	bl	8005f7c <osThreadNew>
 80004fe:	4602      	mov	r2, r0
 8000500:	4b04      	ldr	r3, [pc, #16]	; (8000514 <main+0x34>)
 8000502:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000504:	f005 fd04 	bl	8005f10 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000508:	e7fe      	b.n	8000508 <main+0x28>
 800050a:	bf00      	nop
 800050c:	080095bc 	.word	0x080095bc
 8000510:	080006fd 	.word	0x080006fd
 8000514:	20004b20 	.word	0x20004b20

08000518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b094      	sub	sp, #80	; 0x50
 800051c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051e:	f107 0320 	add.w	r3, r7, #32
 8000522:	2230      	movs	r2, #48	; 0x30
 8000524:	2100      	movs	r1, #0
 8000526:	4618      	mov	r0, r3
 8000528:	f008 ff0d 	bl	8009346 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052c:	f107 030c 	add.w	r3, r7, #12
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
 8000538:	60da      	str	r2, [r3, #12]
 800053a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800053c:	2300      	movs	r3, #0
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	4b28      	ldr	r3, [pc, #160]	; (80005e4 <SystemClock_Config+0xcc>)
 8000542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000544:	4a27      	ldr	r2, [pc, #156]	; (80005e4 <SystemClock_Config+0xcc>)
 8000546:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054a:	6413      	str	r3, [r2, #64]	; 0x40
 800054c:	4b25      	ldr	r3, [pc, #148]	; (80005e4 <SystemClock_Config+0xcc>)
 800054e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000558:	2300      	movs	r3, #0
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	4b22      	ldr	r3, [pc, #136]	; (80005e8 <SystemClock_Config+0xd0>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a21      	ldr	r2, [pc, #132]	; (80005e8 <SystemClock_Config+0xd0>)
 8000562:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000566:	6013      	str	r3, [r2, #0]
 8000568:	4b1f      	ldr	r3, [pc, #124]	; (80005e8 <SystemClock_Config+0xd0>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000574:	2301      	movs	r3, #1
 8000576:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000578:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800057c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057e:	2302      	movs	r3, #2
 8000580:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000582:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000586:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000588:	2319      	movs	r3, #25
 800058a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800058c:	23c0      	movs	r3, #192	; 0xc0
 800058e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000590:	2302      	movs	r3, #2
 8000592:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000594:	2304      	movs	r3, #4
 8000596:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000598:	f107 0320 	add.w	r3, r7, #32
 800059c:	4618      	mov	r0, r3
 800059e:	f001 fedd 	bl	800235c <HAL_RCC_OscConfig>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005a8:	f000 f910 	bl	80007cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ac:	230f      	movs	r3, #15
 80005ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b0:	2302      	movs	r3, #2
 80005b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005be:	2300      	movs	r3, #0
 80005c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005c2:	f107 030c 	add.w	r3, r7, #12
 80005c6:	2103      	movs	r1, #3
 80005c8:	4618      	mov	r0, r3
 80005ca:	f002 f937 	bl	800283c <HAL_RCC_ClockConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005d4:	f000 f8fa 	bl	80007cc <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80005d8:	f002 fa16 	bl	8002a08 <HAL_RCC_EnableCSS>
}
 80005dc:	bf00      	nop
 80005de:	3750      	adds	r7, #80	; 0x50
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40023800 	.word	0x40023800
 80005e8:	40007000 	.word	0x40007000

080005ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b088      	sub	sp, #32
 80005f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	f107 030c 	add.w	r3, r7, #12
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
 8000600:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000602:	2300      	movs	r3, #0
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	4b2a      	ldr	r3, [pc, #168]	; (80006b0 <MX_GPIO_Init+0xc4>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a29      	ldr	r2, [pc, #164]	; (80006b0 <MX_GPIO_Init+0xc4>)
 800060c:	f043 0304 	orr.w	r3, r3, #4
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b27      	ldr	r3, [pc, #156]	; (80006b0 <MX_GPIO_Init+0xc4>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f003 0304 	and.w	r3, r3, #4
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	4b23      	ldr	r3, [pc, #140]	; (80006b0 <MX_GPIO_Init+0xc4>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a22      	ldr	r2, [pc, #136]	; (80006b0 <MX_GPIO_Init+0xc4>)
 8000628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b20      	ldr	r3, [pc, #128]	; (80006b0 <MX_GPIO_Init+0xc4>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063a:	2300      	movs	r3, #0
 800063c:	603b      	str	r3, [r7, #0]
 800063e:	4b1c      	ldr	r3, [pc, #112]	; (80006b0 <MX_GPIO_Init+0xc4>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	4a1b      	ldr	r2, [pc, #108]	; (80006b0 <MX_GPIO_Init+0xc4>)
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	6313      	str	r3, [r2, #48]	; 0x30
 800064a:	4b19      	ldr	r3, [pc, #100]	; (80006b0 <MX_GPIO_Init+0xc4>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	603b      	str	r3, [r7, #0]
 8000654:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 8000656:	2200      	movs	r2, #0
 8000658:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800065c:	4815      	ldr	r0, [pc, #84]	; (80006b4 <MX_GPIO_Init+0xc8>)
 800065e:	f000 fcc7 	bl	8000ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 8000662:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000666:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000668:	2301      	movs	r3, #1
 800066a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066c:	2300      	movs	r3, #0
 800066e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000670:	2300      	movs	r3, #0
 8000672:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	4619      	mov	r1, r3
 800067a:	480e      	ldr	r0, [pc, #56]	; (80006b4 <MX_GPIO_Init+0xc8>)
 800067c:	f000 fb1e 	bl	8000cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000680:	2301      	movs	r3, #1
 8000682:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <MX_GPIO_Init+0xcc>)
 8000686:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000688:	2301      	movs	r3, #1
 800068a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	4619      	mov	r1, r3
 8000692:	480a      	ldr	r0, [pc, #40]	; (80006bc <MX_GPIO_Init+0xd0>)
 8000694:	f000 fb12 	bl	8000cbc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000698:	2200      	movs	r2, #0
 800069a:	2105      	movs	r1, #5
 800069c:	2006      	movs	r0, #6
 800069e:	f000 fae3 	bl	8000c68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80006a2:	2006      	movs	r0, #6
 80006a4:	f000 fafc 	bl	8000ca0 <HAL_NVIC_EnableIRQ>

}
 80006a8:	bf00      	nop
 80006aa:	3720      	adds	r7, #32
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40020800 	.word	0x40020800
 80006b8:	10310000 	.word	0x10310000
 80006bc:	40020000 	.word	0x40020000

080006c0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */


void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	80fb      	strh	r3, [r7, #6]
	// TODO: transfer to deferred interrupt handler
	if(GPIO_Pin == USER_BUTTON_Pin)
 80006ca:	88fb      	ldrh	r3, [r7, #6]
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	d10d      	bne.n	80006ec <HAL_GPIO_EXTI_Callback+0x2c>
	{
		if(HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin))
 80006d0:	2101      	movs	r1, #1
 80006d2:	4808      	ldr	r0, [pc, #32]	; (80006f4 <HAL_GPIO_EXTI_Callback+0x34>)
 80006d4:	f000 fc74 	bl	8000fc0 <HAL_GPIO_ReadPin>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d003      	beq.n	80006e6 <HAL_GPIO_EXTI_Callback+0x26>
		{
			status_button1 = 1;
 80006de:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <HAL_GPIO_EXTI_Callback+0x38>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	701a      	strb	r2, [r3, #0]
		else
		{
			status_button1 = 0;
		}
	}
}
 80006e4:	e002      	b.n	80006ec <HAL_GPIO_EXTI_Callback+0x2c>
			status_button1 = 0;
 80006e6:	4b04      	ldr	r3, [pc, #16]	; (80006f8 <HAL_GPIO_EXTI_Callback+0x38>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	701a      	strb	r2, [r3, #0]
}
 80006ec:	bf00      	nop
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40020000 	.word	0x40020000
 80006f8:	20000204 	.word	0x20000204

080006fc <start_solenoid_driver>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_start_solenoid_driver */
void start_solenoid_driver(void *argument)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b09c      	sub	sp, #112	; 0x70
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000704:	f008 f90a 	bl	800891c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */

  uint8_t prev_status_button1 = status_button1;
 8000708:	4b24      	ldr	r3, [pc, #144]	; (800079c <start_solenoid_driver+0xa0>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
  uint8_t duty = 0, output = 0;
 8000710:	2300      	movs	r3, #0
 8000712:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 8000716:	2300      	movs	r3, #0
 8000718:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	char msg[]="Hallo! This is a pretty long textHallo! This is a pretty long textHallo! This is a pretty long text\n";
 800071c:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <start_solenoid_driver+0xa4>)
 800071e:	f107 0308 	add.w	r3, r7, #8
 8000722:	4611      	mov	r1, r2
 8000724:	2265      	movs	r2, #101	; 0x65
 8000726:	4618      	mov	r0, r3
 8000728:	f008 fe02 	bl	8009330 <memcpy>
	{




		if(status_button1)
 800072c:	4b1b      	ldr	r3, [pc, #108]	; (800079c <start_solenoid_driver+0xa0>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	b2db      	uxtb	r3, r3
 8000732:	2b00      	cmp	r3, #0
 8000734:	d01f      	beq.n	8000776 <start_solenoid_driver+0x7a>
		{
			// TODO: calculate duty

			// if initial hit: do nothing
			if(prev_status_button1 != status_button1)
 8000736:	4b19      	ldr	r3, [pc, #100]	; (800079c <start_solenoid_driver+0xa0>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	b2db      	uxtb	r3, r3
 800073c:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 8000740:	429a      	cmp	r2, r3
 8000742:	d128      	bne.n	8000796 <start_solenoid_driver+0x9a>
			{
			  continue;
			}
			// if duty cycle exceeds max. rated duty cycle
			else if(duty > MAX_DUTY_CYCLE && output > MAX_DUTY_CYCLE)
 8000744:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8000748:	2b3f      	cmp	r3, #63	; 0x3f
 800074a:	d909      	bls.n	8000760 <start_solenoid_driver+0x64>
 800074c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000750:	2b3f      	cmp	r3, #63	; 0x3f
 8000752:	d905      	bls.n	8000760 <start_solenoid_driver+0x64>
			{
			  output -= 25;
 8000754:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000758:	3b19      	subs	r3, #25
 800075a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800075e:	e00a      	b.n	8000776 <start_solenoid_driver+0x7a>
			}
			// if duty cycle below max_duty cycle
			else if(duty < MAX_DUTY_CYCLE && output < MAX_DUTY_CYCLE)
 8000760:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8000764:	2b3e      	cmp	r3, #62	; 0x3e
 8000766:	d806      	bhi.n	8000776 <start_solenoid_driver+0x7a>
 8000768:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800076c:	2b3e      	cmp	r3, #62	; 0x3e
 800076e:	d802      	bhi.n	8000776 <start_solenoid_driver+0x7a>
			{
			  output = MAX_DUTY_CYCLE;
 8000770:	233f      	movs	r3, #63	; 0x3f
 8000772:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

		}

		// test to check duration of usb.send
		// LED On
		HAL_GPIO_WritePin(USER_LED_GPIO_Port,USER_LED_Pin,GPIO_PIN_SET);
 8000776:	2201      	movs	r2, #1
 8000778:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800077c:	4809      	ldr	r0, [pc, #36]	; (80007a4 <start_solenoid_driver+0xa8>)
 800077e:	f000 fc37 	bl	8000ff0 <HAL_GPIO_WritePin>

		// Send data
		//CDC_Transmit_FS( (uint8_t*) msg, strlen(msg));	// not dma driven, but pretty fast: 100 char: 7 us
		// LED Off
		HAL_GPIO_WritePin(USER_LED_GPIO_Port,USER_LED_Pin,GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000788:	4806      	ldr	r0, [pc, #24]	; (80007a4 <start_solenoid_driver+0xa8>)
 800078a:	f000 fc31 	bl	8000ff0 <HAL_GPIO_WritePin>

		osDelay(50);			// delay for 50 ms
 800078e:	2032      	movs	r0, #50	; 0x32
 8000790:	f005 fc9a 	bl	80060c8 <osDelay>
 8000794:	e7ca      	b.n	800072c <start_solenoid_driver+0x30>
			  continue;
 8000796:	bf00      	nop
		if(status_button1)
 8000798:	e7c8      	b.n	800072c <start_solenoid_driver+0x30>
 800079a:	bf00      	nop
 800079c:	20000204 	.word	0x20000204
 80007a0:	080094f4 	.word	0x080094f4
 80007a4:	40020800 	.word	0x40020800

080007a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a04      	ldr	r2, [pc, #16]	; (80007c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d101      	bne.n	80007be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007ba:	f000 f95b 	bl	8000a74 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40014000 	.word	0x40014000

080007cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d2:	e7fe      	b.n	80007d2 <Error_Handler+0x6>

080007d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	4b12      	ldr	r3, [pc, #72]	; (8000828 <HAL_MspInit+0x54>)
 80007e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e2:	4a11      	ldr	r2, [pc, #68]	; (8000828 <HAL_MspInit+0x54>)
 80007e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007e8:	6453      	str	r3, [r2, #68]	; 0x44
 80007ea:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <HAL_MspInit+0x54>)
 80007ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	603b      	str	r3, [r7, #0]
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <HAL_MspInit+0x54>)
 80007fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fe:	4a0a      	ldr	r2, [pc, #40]	; (8000828 <HAL_MspInit+0x54>)
 8000800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000804:	6413      	str	r3, [r2, #64]	; 0x40
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <HAL_MspInit+0x54>)
 8000808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800080e:	603b      	str	r3, [r7, #0]
 8000810:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000812:	2200      	movs	r2, #0
 8000814:	210f      	movs	r1, #15
 8000816:	f06f 0001 	mvn.w	r0, #1
 800081a:	f000 fa25 	bl	8000c68 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40023800 	.word	0x40023800

0800082c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08c      	sub	sp, #48	; 0x30
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000834:	2300      	movs	r3, #0
 8000836:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000838:	2300      	movs	r3, #0
 800083a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM9 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority ,0);
 800083c:	2200      	movs	r2, #0
 800083e:	6879      	ldr	r1, [r7, #4]
 8000840:	2018      	movs	r0, #24
 8000842:	f000 fa11 	bl	8000c68 <HAL_NVIC_SetPriority>

  /* Enable the TIM9 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000846:	2018      	movs	r0, #24
 8000848:	f000 fa2a 	bl	8000ca0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 800084c:	2300      	movs	r3, #0
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	4b1e      	ldr	r3, [pc, #120]	; (80008cc <HAL_InitTick+0xa0>)
 8000852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000854:	4a1d      	ldr	r2, [pc, #116]	; (80008cc <HAL_InitTick+0xa0>)
 8000856:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800085a:	6453      	str	r3, [r2, #68]	; 0x44
 800085c:	4b1b      	ldr	r3, [pc, #108]	; (80008cc <HAL_InitTick+0xa0>)
 800085e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000860:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000868:	f107 0210 	add.w	r2, r7, #16
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	4611      	mov	r1, r2
 8000872:	4618      	mov	r0, r3
 8000874:	f002 f9a6 	bl	8002bc4 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000878:	f002 f990 	bl	8002b9c <HAL_RCC_GetPCLK2Freq>
 800087c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800087e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000880:	4a13      	ldr	r2, [pc, #76]	; (80008d0 <HAL_InitTick+0xa4>)
 8000882:	fba2 2303 	umull	r2, r3, r2, r3
 8000886:	0c9b      	lsrs	r3, r3, #18
 8000888:	3b01      	subs	r3, #1
 800088a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 800088c:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <HAL_InitTick+0xa8>)
 800088e:	4a12      	ldr	r2, [pc, #72]	; (80008d8 <HAL_InitTick+0xac>)
 8000890:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8000892:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <HAL_InitTick+0xa8>)
 8000894:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000898:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 800089a:	4a0e      	ldr	r2, [pc, #56]	; (80008d4 <HAL_InitTick+0xa8>)
 800089c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800089e:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 80008a0:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <HAL_InitTick+0xa8>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a6:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <HAL_InitTick+0xa8>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim9) == HAL_OK)
 80008ac:	4809      	ldr	r0, [pc, #36]	; (80008d4 <HAL_InitTick+0xa8>)
 80008ae:	f002 f9d6 	bl	8002c5e <HAL_TIM_Base_Init>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d104      	bne.n	80008c2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim9);
 80008b8:	4806      	ldr	r0, [pc, #24]	; (80008d4 <HAL_InitTick+0xa8>)
 80008ba:	f002 fa05 	bl	8002cc8 <HAL_TIM_Base_Start_IT>
 80008be:	4603      	mov	r3, r0
 80008c0:	e000      	b.n	80008c4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80008c2:	2301      	movs	r3, #1
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3730      	adds	r7, #48	; 0x30
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40023800 	.word	0x40023800
 80008d0:	431bde83 	.word	0x431bde83
 80008d4:	20004b24 	.word	0x20004b24
 80008d8:	40014000 	.word	0x40014000

080008dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80008e0:	f002 f9a2 	bl	8002c28 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <NMI_Handler+0x8>

080008e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ea:	e7fe      	b.n	80008ea <HardFault_Handler+0x4>

080008ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <MemManage_Handler+0x4>

080008f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008f6:	e7fe      	b.n	80008f6 <BusFault_Handler+0x4>

080008f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008fc:	e7fe      	b.n	80008fc <UsageFault_Handler+0x4>

080008fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000910:	2001      	movs	r0, #1
 8000912:	f000 fb87 	bl	8001024 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
	...

0800091c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8000920:	4802      	ldr	r0, [pc, #8]	; (800092c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000922:	f002 f9f5 	bl	8002d10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20004b24 	.word	0x20004b24

08000930 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000934:	4802      	ldr	r0, [pc, #8]	; (8000940 <OTG_FS_IRQHandler+0x10>)
 8000936:	f000 fcdd 	bl	80012f4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20006078 	.word	0x20006078

08000944 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800094c:	4a14      	ldr	r2, [pc, #80]	; (80009a0 <_sbrk+0x5c>)
 800094e:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <_sbrk+0x60>)
 8000950:	1ad3      	subs	r3, r2, r3
 8000952:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000958:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <_sbrk+0x64>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d102      	bne.n	8000966 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000960:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <_sbrk+0x64>)
 8000962:	4a12      	ldr	r2, [pc, #72]	; (80009ac <_sbrk+0x68>)
 8000964:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <_sbrk+0x64>)
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4413      	add	r3, r2
 800096e:	693a      	ldr	r2, [r7, #16]
 8000970:	429a      	cmp	r2, r3
 8000972:	d207      	bcs.n	8000984 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000974:	f008 fca2 	bl	80092bc <__errno>
 8000978:	4602      	mov	r2, r0
 800097a:	230c      	movs	r3, #12
 800097c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800097e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000982:	e009      	b.n	8000998 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000984:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <_sbrk+0x64>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800098a:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <_sbrk+0x64>)
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4413      	add	r3, r2
 8000992:	4a05      	ldr	r2, [pc, #20]	; (80009a8 <_sbrk+0x64>)
 8000994:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000996:	68fb      	ldr	r3, [r7, #12]
}
 8000998:	4618      	mov	r0, r3
 800099a:	3718      	adds	r7, #24
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	20020000 	.word	0x20020000
 80009a4:	00000400 	.word	0x00000400
 80009a8:	20000208 	.word	0x20000208
 80009ac:	20006488 	.word	0x20006488

080009b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009b4:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <SystemInit+0x28>)
 80009b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ba:	4a07      	ldr	r2, [pc, #28]	; (80009d8 <SystemInit+0x28>)
 80009bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009c4:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <SystemInit+0x28>)
 80009c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009ca:	609a      	str	r2, [r3, #8]
#endif
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	e000ed00 	.word	0xe000ed00

080009dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80009dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a14 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80009e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80009e2:	e003      	b.n	80009ec <LoopCopyDataInit>

080009e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80009e4:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80009e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80009e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80009ea:	3104      	adds	r1, #4

080009ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80009ec:	480b      	ldr	r0, [pc, #44]	; (8000a1c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80009ee:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80009f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80009f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80009f4:	d3f6      	bcc.n	80009e4 <CopyDataInit>
  ldr  r2, =_sbss
 80009f6:	4a0b      	ldr	r2, [pc, #44]	; (8000a24 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80009f8:	e002      	b.n	8000a00 <LoopFillZerobss>

080009fa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80009fa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80009fc:	f842 3b04 	str.w	r3, [r2], #4

08000a00 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a00:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a02:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a04:	d3f9      	bcc.n	80009fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a06:	f7ff ffd3 	bl	80009b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a0a:	f008 fc5d 	bl	80092c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a0e:	f7ff fd67 	bl	80004e0 <main>
  bx  lr    
 8000a12:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a14:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000a18:	08009608 	.word	0x08009608
  ldr  r0, =_sdata
 8000a1c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a20:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 8000a24:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 8000a28:	20006484 	.word	0x20006484

08000a2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a2c:	e7fe      	b.n	8000a2c <ADC_IRQHandler>
	...

08000a30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a34:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <HAL_Init+0x40>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a0d      	ldr	r2, [pc, #52]	; (8000a70 <HAL_Init+0x40>)
 8000a3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a40:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <HAL_Init+0x40>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a0a      	ldr	r2, [pc, #40]	; (8000a70 <HAL_Init+0x40>)
 8000a46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a4c:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <HAL_Init+0x40>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a07      	ldr	r2, [pc, #28]	; (8000a70 <HAL_Init+0x40>)
 8000a52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a58:	2003      	movs	r0, #3
 8000a5a:	f000 f8fa 	bl	8000c52 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a5e:	2000      	movs	r0, #0
 8000a60:	f7ff fee4 	bl	800082c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a64:	f7ff feb6 	bl	80007d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a68:	2300      	movs	r3, #0
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40023c00 	.word	0x40023c00

08000a74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <HAL_IncTick+0x20>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <HAL_IncTick+0x24>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4413      	add	r3, r2
 8000a84:	4a04      	ldr	r2, [pc, #16]	; (8000a98 <HAL_IncTick+0x24>)
 8000a86:	6013      	str	r3, [r2, #0]
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	20000008 	.word	0x20000008
 8000a98:	20004b64 	.word	0x20004b64

08000a9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa0:	4b03      	ldr	r3, [pc, #12]	; (8000ab0 <HAL_GetTick+0x14>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	20004b64 	.word	0x20004b64

08000ab4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000abc:	f7ff ffee 	bl	8000a9c <HAL_GetTick>
 8000ac0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000acc:	d005      	beq.n	8000ada <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ace:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <HAL_Delay+0x40>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ada:	bf00      	nop
 8000adc:	f7ff ffde 	bl	8000a9c <HAL_GetTick>
 8000ae0:	4602      	mov	r2, r0
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	1ad3      	subs	r3, r2, r3
 8000ae6:	68fa      	ldr	r2, [r7, #12]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d8f7      	bhi.n	8000adc <HAL_Delay+0x28>
  {
  }
}
 8000aec:	bf00      	nop
 8000aee:	3710      	adds	r7, #16
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000008 	.word	0x20000008

08000af8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	f003 0307 	and.w	r3, r3, #7
 8000b06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b08:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <__NVIC_SetPriorityGrouping+0x44>)
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b0e:	68ba      	ldr	r2, [r7, #8]
 8000b10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b14:	4013      	ands	r3, r2
 8000b16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b2a:	4a04      	ldr	r2, [pc, #16]	; (8000b3c <__NVIC_SetPriorityGrouping+0x44>)
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	60d3      	str	r3, [r2, #12]
}
 8000b30:	bf00      	nop
 8000b32:	3714      	adds	r7, #20
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b44:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <__NVIC_GetPriorityGrouping+0x18>)
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	0a1b      	lsrs	r3, r3, #8
 8000b4a:	f003 0307 	and.w	r3, r3, #7
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	db0b      	blt.n	8000b86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	f003 021f 	and.w	r2, r3, #31
 8000b74:	4907      	ldr	r1, [pc, #28]	; (8000b94 <__NVIC_EnableIRQ+0x38>)
 8000b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7a:	095b      	lsrs	r3, r3, #5
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b86:	bf00      	nop
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	e000e100 	.word	0xe000e100

08000b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	6039      	str	r1, [r7, #0]
 8000ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	db0a      	blt.n	8000bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	b2da      	uxtb	r2, r3
 8000bb0:	490c      	ldr	r1, [pc, #48]	; (8000be4 <__NVIC_SetPriority+0x4c>)
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	0112      	lsls	r2, r2, #4
 8000bb8:	b2d2      	uxtb	r2, r2
 8000bba:	440b      	add	r3, r1
 8000bbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc0:	e00a      	b.n	8000bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	4908      	ldr	r1, [pc, #32]	; (8000be8 <__NVIC_SetPriority+0x50>)
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	f003 030f 	and.w	r3, r3, #15
 8000bce:	3b04      	subs	r3, #4
 8000bd0:	0112      	lsls	r2, r2, #4
 8000bd2:	b2d2      	uxtb	r2, r2
 8000bd4:	440b      	add	r3, r1
 8000bd6:	761a      	strb	r2, [r3, #24]
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000e100 	.word	0xe000e100
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b089      	sub	sp, #36	; 0x24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	f1c3 0307 	rsb	r3, r3, #7
 8000c06:	2b04      	cmp	r3, #4
 8000c08:	bf28      	it	cs
 8000c0a:	2304      	movcs	r3, #4
 8000c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	3304      	adds	r3, #4
 8000c12:	2b06      	cmp	r3, #6
 8000c14:	d902      	bls.n	8000c1c <NVIC_EncodePriority+0x30>
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	3b03      	subs	r3, #3
 8000c1a:	e000      	b.n	8000c1e <NVIC_EncodePriority+0x32>
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	43da      	mvns	r2, r3
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	401a      	ands	r2, r3
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3e:	43d9      	mvns	r1, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c44:	4313      	orrs	r3, r2
         );
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3724      	adds	r7, #36	; 0x24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b082      	sub	sp, #8
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	f7ff ff4c 	bl	8000af8 <__NVIC_SetPriorityGrouping>
}
 8000c60:	bf00      	nop
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	607a      	str	r2, [r7, #4]
 8000c74:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c76:	2300      	movs	r3, #0
 8000c78:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c7a:	f7ff ff61 	bl	8000b40 <__NVIC_GetPriorityGrouping>
 8000c7e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	68b9      	ldr	r1, [r7, #8]
 8000c84:	6978      	ldr	r0, [r7, #20]
 8000c86:	f7ff ffb1 	bl	8000bec <NVIC_EncodePriority>
 8000c8a:	4602      	mov	r2, r0
 8000c8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c90:	4611      	mov	r1, r2
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff ff80 	bl	8000b98 <__NVIC_SetPriority>
}
 8000c98:	bf00      	nop
 8000c9a:	3718      	adds	r7, #24
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff ff54 	bl	8000b5c <__NVIC_EnableIRQ>
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b089      	sub	sp, #36	; 0x24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61fb      	str	r3, [r7, #28]
 8000cd6:	e159      	b.n	8000f8c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cd8:	2201      	movs	r2, #1
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	697a      	ldr	r2, [r7, #20]
 8000ce8:	4013      	ands	r3, r2
 8000cea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	f040 8148 	bne.w	8000f86 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d00b      	beq.n	8000d16 <HAL_GPIO_Init+0x5a>
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	2b02      	cmp	r3, #2
 8000d04:	d007      	beq.n	8000d16 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d0a:	2b11      	cmp	r3, #17
 8000d0c:	d003      	beq.n	8000d16 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	2b12      	cmp	r3, #18
 8000d14:	d130      	bne.n	8000d78 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	2203      	movs	r2, #3
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	43db      	mvns	r3, r3
 8000d28:	69ba      	ldr	r2, [r7, #24]
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	68da      	ldr	r2, [r3, #12]
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	69ba      	ldr	r2, [r7, #24]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	43db      	mvns	r3, r3
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	091b      	lsrs	r3, r3, #4
 8000d62:	f003 0201 	and.w	r2, r3, #1
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	2203      	movs	r2, #3
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	69ba      	ldr	r2, [r7, #24]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	689a      	ldr	r2, [r3, #8]
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	2b02      	cmp	r3, #2
 8000dae:	d003      	beq.n	8000db8 <HAL_GPIO_Init+0xfc>
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	2b12      	cmp	r3, #18
 8000db6:	d123      	bne.n	8000e00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	08da      	lsrs	r2, r3, #3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	3208      	adds	r2, #8
 8000dc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	f003 0307 	and.w	r3, r3, #7
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	220f      	movs	r2, #15
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	691a      	ldr	r2, [r3, #16]
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	08da      	lsrs	r2, r3, #3
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	3208      	adds	r2, #8
 8000dfa:	69b9      	ldr	r1, [r7, #24]
 8000dfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	2203      	movs	r2, #3
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	43db      	mvns	r3, r3
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	4013      	ands	r3, r2
 8000e16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f003 0203 	and.w	r2, r3, #3
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	f000 80a2 	beq.w	8000f86 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	4b56      	ldr	r3, [pc, #344]	; (8000fa0 <HAL_GPIO_Init+0x2e4>)
 8000e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4a:	4a55      	ldr	r2, [pc, #340]	; (8000fa0 <HAL_GPIO_Init+0x2e4>)
 8000e4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e50:	6453      	str	r3, [r2, #68]	; 0x44
 8000e52:	4b53      	ldr	r3, [pc, #332]	; (8000fa0 <HAL_GPIO_Init+0x2e4>)
 8000e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e5e:	4a51      	ldr	r2, [pc, #324]	; (8000fa4 <HAL_GPIO_Init+0x2e8>)
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	089b      	lsrs	r3, r3, #2
 8000e64:	3302      	adds	r3, #2
 8000e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	f003 0303 	and.w	r3, r3, #3
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	220f      	movs	r2, #15
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a48      	ldr	r2, [pc, #288]	; (8000fa8 <HAL_GPIO_Init+0x2ec>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d019      	beq.n	8000ebe <HAL_GPIO_Init+0x202>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a47      	ldr	r2, [pc, #284]	; (8000fac <HAL_GPIO_Init+0x2f0>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d013      	beq.n	8000eba <HAL_GPIO_Init+0x1fe>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a46      	ldr	r2, [pc, #280]	; (8000fb0 <HAL_GPIO_Init+0x2f4>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d00d      	beq.n	8000eb6 <HAL_GPIO_Init+0x1fa>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a45      	ldr	r2, [pc, #276]	; (8000fb4 <HAL_GPIO_Init+0x2f8>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d007      	beq.n	8000eb2 <HAL_GPIO_Init+0x1f6>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a44      	ldr	r2, [pc, #272]	; (8000fb8 <HAL_GPIO_Init+0x2fc>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d101      	bne.n	8000eae <HAL_GPIO_Init+0x1f2>
 8000eaa:	2304      	movs	r3, #4
 8000eac:	e008      	b.n	8000ec0 <HAL_GPIO_Init+0x204>
 8000eae:	2307      	movs	r3, #7
 8000eb0:	e006      	b.n	8000ec0 <HAL_GPIO_Init+0x204>
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	e004      	b.n	8000ec0 <HAL_GPIO_Init+0x204>
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	e002      	b.n	8000ec0 <HAL_GPIO_Init+0x204>
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e000      	b.n	8000ec0 <HAL_GPIO_Init+0x204>
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	69fa      	ldr	r2, [r7, #28]
 8000ec2:	f002 0203 	and.w	r2, r2, #3
 8000ec6:	0092      	lsls	r2, r2, #2
 8000ec8:	4093      	lsls	r3, r2
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ed0:	4934      	ldr	r1, [pc, #208]	; (8000fa4 <HAL_GPIO_Init+0x2e8>)
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	089b      	lsrs	r3, r3, #2
 8000ed6:	3302      	adds	r3, #2
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ede:	4b37      	ldr	r3, [pc, #220]	; (8000fbc <HAL_GPIO_Init+0x300>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4013      	ands	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d003      	beq.n	8000f02 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f02:	4a2e      	ldr	r2, [pc, #184]	; (8000fbc <HAL_GPIO_Init+0x300>)
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f08:	4b2c      	ldr	r3, [pc, #176]	; (8000fbc <HAL_GPIO_Init+0x300>)
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	43db      	mvns	r3, r3
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	4013      	ands	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d003      	beq.n	8000f2c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f2c:	4a23      	ldr	r2, [pc, #140]	; (8000fbc <HAL_GPIO_Init+0x300>)
 8000f2e:	69bb      	ldr	r3, [r7, #24]
 8000f30:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f32:	4b22      	ldr	r3, [pc, #136]	; (8000fbc <HAL_GPIO_Init+0x300>)
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d003      	beq.n	8000f56 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f56:	4a19      	ldr	r2, [pc, #100]	; (8000fbc <HAL_GPIO_Init+0x300>)
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f5c:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <HAL_GPIO_Init+0x300>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	43db      	mvns	r3, r3
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d003      	beq.n	8000f80 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f80:	4a0e      	ldr	r2, [pc, #56]	; (8000fbc <HAL_GPIO_Init+0x300>)
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	61fb      	str	r3, [r7, #28]
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	2b0f      	cmp	r3, #15
 8000f90:	f67f aea2 	bls.w	8000cd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f94:	bf00      	nop
 8000f96:	3724      	adds	r7, #36	; 0x24
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40013800 	.word	0x40013800
 8000fa8:	40020000 	.word	0x40020000
 8000fac:	40020400 	.word	0x40020400
 8000fb0:	40020800 	.word	0x40020800
 8000fb4:	40020c00 	.word	0x40020c00
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	40013c00 	.word	0x40013c00

08000fc0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	691a      	ldr	r2, [r3, #16]
 8000fd0:	887b      	ldrh	r3, [r7, #2]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d002      	beq.n	8000fde <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	73fb      	strb	r3, [r7, #15]
 8000fdc:	e001      	b.n	8000fe2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	807b      	strh	r3, [r7, #2]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001000:	787b      	ldrb	r3, [r7, #1]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d003      	beq.n	800100e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001006:	887a      	ldrh	r2, [r7, #2]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800100c:	e003      	b.n	8001016 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800100e:	887b      	ldrh	r3, [r7, #2]
 8001010:	041a      	lsls	r2, r3, #16
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	619a      	str	r2, [r3, #24]
}
 8001016:	bf00      	nop
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
	...

08001024 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800102e:	4b08      	ldr	r3, [pc, #32]	; (8001050 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001030:	695a      	ldr	r2, [r3, #20]
 8001032:	88fb      	ldrh	r3, [r7, #6]
 8001034:	4013      	ands	r3, r2
 8001036:	2b00      	cmp	r3, #0
 8001038:	d006      	beq.n	8001048 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800103a:	4a05      	ldr	r2, [pc, #20]	; (8001050 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800103c:	88fb      	ldrh	r3, [r7, #6]
 800103e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001040:	88fb      	ldrh	r3, [r7, #6]
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff fb3c 	bl	80006c0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40013c00 	.word	0x40013c00

08001054 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001056:	b08f      	sub	sp, #60	; 0x3c
 8001058:	af0a      	add	r7, sp, #40	; 0x28
 800105a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d101      	bne.n	8001066 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e10f      	b.n	8001286 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001072:	b2db      	uxtb	r3, r3
 8001074:	2b00      	cmp	r3, #0
 8001076:	d106      	bne.n	8001086 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f007 fe29 	bl	8008cd8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2203      	movs	r2, #3
 800108a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001096:	2b00      	cmp	r3, #0
 8001098:	d102      	bne.n	80010a0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2200      	movs	r2, #0
 800109e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f002 f90c 	bl	80032c2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	603b      	str	r3, [r7, #0]
 80010b0:	687e      	ldr	r6, [r7, #4]
 80010b2:	466d      	mov	r5, sp
 80010b4:	f106 0410 	add.w	r4, r6, #16
 80010b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80010c8:	1d33      	adds	r3, r6, #4
 80010ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010cc:	6838      	ldr	r0, [r7, #0]
 80010ce:	f001 ffe3 	bl	8003098 <USB_CoreInit>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d005      	beq.n	80010e4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2202      	movs	r2, #2
 80010dc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	e0d0      	b.n	8001286 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2100      	movs	r1, #0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f002 f8fa 	bl	80032e4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010f0:	2300      	movs	r3, #0
 80010f2:	73fb      	strb	r3, [r7, #15]
 80010f4:	e04a      	b.n	800118c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80010f6:	7bfa      	ldrb	r2, [r7, #15]
 80010f8:	6879      	ldr	r1, [r7, #4]
 80010fa:	4613      	mov	r3, r2
 80010fc:	00db      	lsls	r3, r3, #3
 80010fe:	1a9b      	subs	r3, r3, r2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	440b      	add	r3, r1
 8001104:	333d      	adds	r3, #61	; 0x3d
 8001106:	2201      	movs	r2, #1
 8001108:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800110a:	7bfa      	ldrb	r2, [r7, #15]
 800110c:	6879      	ldr	r1, [r7, #4]
 800110e:	4613      	mov	r3, r2
 8001110:	00db      	lsls	r3, r3, #3
 8001112:	1a9b      	subs	r3, r3, r2
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	440b      	add	r3, r1
 8001118:	333c      	adds	r3, #60	; 0x3c
 800111a:	7bfa      	ldrb	r2, [r7, #15]
 800111c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800111e:	7bfa      	ldrb	r2, [r7, #15]
 8001120:	7bfb      	ldrb	r3, [r7, #15]
 8001122:	b298      	uxth	r0, r3
 8001124:	6879      	ldr	r1, [r7, #4]
 8001126:	4613      	mov	r3, r2
 8001128:	00db      	lsls	r3, r3, #3
 800112a:	1a9b      	subs	r3, r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	440b      	add	r3, r1
 8001130:	3342      	adds	r3, #66	; 0x42
 8001132:	4602      	mov	r2, r0
 8001134:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001136:	7bfa      	ldrb	r2, [r7, #15]
 8001138:	6879      	ldr	r1, [r7, #4]
 800113a:	4613      	mov	r3, r2
 800113c:	00db      	lsls	r3, r3, #3
 800113e:	1a9b      	subs	r3, r3, r2
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	440b      	add	r3, r1
 8001144:	333f      	adds	r3, #63	; 0x3f
 8001146:	2200      	movs	r2, #0
 8001148:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800114a:	7bfa      	ldrb	r2, [r7, #15]
 800114c:	6879      	ldr	r1, [r7, #4]
 800114e:	4613      	mov	r3, r2
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	1a9b      	subs	r3, r3, r2
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	440b      	add	r3, r1
 8001158:	3344      	adds	r3, #68	; 0x44
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800115e:	7bfa      	ldrb	r2, [r7, #15]
 8001160:	6879      	ldr	r1, [r7, #4]
 8001162:	4613      	mov	r3, r2
 8001164:	00db      	lsls	r3, r3, #3
 8001166:	1a9b      	subs	r3, r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	440b      	add	r3, r1
 800116c:	3348      	adds	r3, #72	; 0x48
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001172:	7bfa      	ldrb	r2, [r7, #15]
 8001174:	6879      	ldr	r1, [r7, #4]
 8001176:	4613      	mov	r3, r2
 8001178:	00db      	lsls	r3, r3, #3
 800117a:	1a9b      	subs	r3, r3, r2
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	440b      	add	r3, r1
 8001180:	3350      	adds	r3, #80	; 0x50
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001186:	7bfb      	ldrb	r3, [r7, #15]
 8001188:	3301      	adds	r3, #1
 800118a:	73fb      	strb	r3, [r7, #15]
 800118c:	7bfa      	ldrb	r2, [r7, #15]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	429a      	cmp	r2, r3
 8001194:	d3af      	bcc.n	80010f6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001196:	2300      	movs	r3, #0
 8001198:	73fb      	strb	r3, [r7, #15]
 800119a:	e044      	b.n	8001226 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800119c:	7bfa      	ldrb	r2, [r7, #15]
 800119e:	6879      	ldr	r1, [r7, #4]
 80011a0:	4613      	mov	r3, r2
 80011a2:	00db      	lsls	r3, r3, #3
 80011a4:	1a9b      	subs	r3, r3, r2
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	440b      	add	r3, r1
 80011aa:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80011ae:	2200      	movs	r2, #0
 80011b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80011b2:	7bfa      	ldrb	r2, [r7, #15]
 80011b4:	6879      	ldr	r1, [r7, #4]
 80011b6:	4613      	mov	r3, r2
 80011b8:	00db      	lsls	r3, r3, #3
 80011ba:	1a9b      	subs	r3, r3, r2
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	440b      	add	r3, r1
 80011c0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80011c4:	7bfa      	ldrb	r2, [r7, #15]
 80011c6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80011c8:	7bfa      	ldrb	r2, [r7, #15]
 80011ca:	6879      	ldr	r1, [r7, #4]
 80011cc:	4613      	mov	r3, r2
 80011ce:	00db      	lsls	r3, r3, #3
 80011d0:	1a9b      	subs	r3, r3, r2
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	440b      	add	r3, r1
 80011d6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80011da:	2200      	movs	r2, #0
 80011dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80011de:	7bfa      	ldrb	r2, [r7, #15]
 80011e0:	6879      	ldr	r1, [r7, #4]
 80011e2:	4613      	mov	r3, r2
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	1a9b      	subs	r3, r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	440b      	add	r3, r1
 80011ec:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80011f4:	7bfa      	ldrb	r2, [r7, #15]
 80011f6:	6879      	ldr	r1, [r7, #4]
 80011f8:	4613      	mov	r3, r2
 80011fa:	00db      	lsls	r3, r3, #3
 80011fc:	1a9b      	subs	r3, r3, r2
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	440b      	add	r3, r1
 8001202:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800120a:	7bfa      	ldrb	r2, [r7, #15]
 800120c:	6879      	ldr	r1, [r7, #4]
 800120e:	4613      	mov	r3, r2
 8001210:	00db      	lsls	r3, r3, #3
 8001212:	1a9b      	subs	r3, r3, r2
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	440b      	add	r3, r1
 8001218:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001220:	7bfb      	ldrb	r3, [r7, #15]
 8001222:	3301      	adds	r3, #1
 8001224:	73fb      	strb	r3, [r7, #15]
 8001226:	7bfa      	ldrb	r2, [r7, #15]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	429a      	cmp	r2, r3
 800122e:	d3b5      	bcc.n	800119c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	603b      	str	r3, [r7, #0]
 8001236:	687e      	ldr	r6, [r7, #4]
 8001238:	466d      	mov	r5, sp
 800123a:	f106 0410 	add.w	r4, r6, #16
 800123e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001240:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001242:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001244:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001246:	e894 0003 	ldmia.w	r4, {r0, r1}
 800124a:	e885 0003 	stmia.w	r5, {r0, r1}
 800124e:	1d33      	adds	r3, r6, #4
 8001250:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001252:	6838      	ldr	r0, [r7, #0]
 8001254:	f002 f870 	bl	8003338 <USB_DevInit>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d005      	beq.n	800126a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2202      	movs	r2, #2
 8001262:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e00d      	b.n	8001286 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2200      	movs	r2, #0
 800126e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2201      	movs	r2, #1
 8001276:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4618      	mov	r0, r3
 8001280:	f003 f8b8 	bl	80043f4 <USB_DevDisconnect>

  return HAL_OK;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3714      	adds	r7, #20
 800128a:	46bd      	mov	sp, r7
 800128c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800128e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b084      	sub	sp, #16
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d101      	bne.n	80012aa <HAL_PCD_Start+0x1c>
 80012a6:	2302      	movs	r3, #2
 80012a8:	e020      	b.n	80012ec <HAL_PCD_Start+0x5e>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2201      	movs	r2, #1
 80012ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d109      	bne.n	80012ce <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d005      	beq.n	80012ce <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012c6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f001 ffe4 	bl	80032a0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4618      	mov	r0, r3
 80012de:	f003 f868 	bl	80043b2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80012ea:	2300      	movs	r3, #0
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80012f4:	b590      	push	{r4, r7, lr}
 80012f6:	b08d      	sub	sp, #52	; 0x34
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001302:	6a3b      	ldr	r3, [r7, #32]
 8001304:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4618      	mov	r0, r3
 800130c:	f003 f926 	bl	800455c <USB_GetMode>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	f040 839d 	bne.w	8001a52 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4618      	mov	r0, r3
 800131e:	f003 f88a 	bl	8004436 <USB_ReadInterrupts>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	f000 8393 	beq.w	8001a50 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4618      	mov	r0, r3
 8001330:	f003 f881 	bl	8004436 <USB_ReadInterrupts>
 8001334:	4603      	mov	r3, r0
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	2b02      	cmp	r3, #2
 800133c:	d107      	bne.n	800134e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	695a      	ldr	r2, [r3, #20]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f002 0202 	and.w	r2, r2, #2
 800134c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4618      	mov	r0, r3
 8001354:	f003 f86f 	bl	8004436 <USB_ReadInterrupts>
 8001358:	4603      	mov	r3, r0
 800135a:	f003 0310 	and.w	r3, r3, #16
 800135e:	2b10      	cmp	r3, #16
 8001360:	d161      	bne.n	8001426 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	699a      	ldr	r2, [r3, #24]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f022 0210 	bic.w	r2, r2, #16
 8001370:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001372:	6a3b      	ldr	r3, [r7, #32]
 8001374:	6a1b      	ldr	r3, [r3, #32]
 8001376:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	f003 020f 	and.w	r2, r3, #15
 800137e:	4613      	mov	r3, r2
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	1a9b      	subs	r3, r3, r2
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	4413      	add	r3, r2
 800138e:	3304      	adds	r3, #4
 8001390:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	0c5b      	lsrs	r3, r3, #17
 8001396:	f003 030f 	and.w	r3, r3, #15
 800139a:	2b02      	cmp	r3, #2
 800139c:	d124      	bne.n	80013e8 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80013a4:	4013      	ands	r3, r2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d035      	beq.n	8001416 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	091b      	lsrs	r3, r3, #4
 80013b2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80013b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	461a      	mov	r2, r3
 80013bc:	6a38      	ldr	r0, [r7, #32]
 80013be:	f002 fed5 	bl	800416c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	68da      	ldr	r2, [r3, #12]
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	091b      	lsrs	r3, r3, #4
 80013ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013ce:	441a      	add	r2, r3
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	699a      	ldr	r2, [r3, #24]
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	091b      	lsrs	r3, r3, #4
 80013dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013e0:	441a      	add	r2, r3
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	619a      	str	r2, [r3, #24]
 80013e6:	e016      	b.n	8001416 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	0c5b      	lsrs	r3, r3, #17
 80013ec:	f003 030f 	and.w	r3, r3, #15
 80013f0:	2b06      	cmp	r3, #6
 80013f2:	d110      	bne.n	8001416 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80013fa:	2208      	movs	r2, #8
 80013fc:	4619      	mov	r1, r3
 80013fe:	6a38      	ldr	r0, [r7, #32]
 8001400:	f002 feb4 	bl	800416c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	699a      	ldr	r2, [r3, #24]
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	091b      	lsrs	r3, r3, #4
 800140c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001410:	441a      	add	r2, r3
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	699a      	ldr	r2, [r3, #24]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f042 0210 	orr.w	r2, r2, #16
 8001424:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4618      	mov	r0, r3
 800142c:	f003 f803 	bl	8004436 <USB_ReadInterrupts>
 8001430:	4603      	mov	r3, r0
 8001432:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001436:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800143a:	d16e      	bne.n	800151a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800143c:	2300      	movs	r3, #0
 800143e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4618      	mov	r0, r3
 8001446:	f003 f809 	bl	800445c <USB_ReadDevAllOutEpInterrupt>
 800144a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800144c:	e062      	b.n	8001514 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800144e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001450:	f003 0301 	and.w	r3, r3, #1
 8001454:	2b00      	cmp	r3, #0
 8001456:	d057      	beq.n	8001508 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800145e:	b2d2      	uxtb	r2, r2
 8001460:	4611      	mov	r1, r2
 8001462:	4618      	mov	r0, r3
 8001464:	f003 f82e 	bl	80044c4 <USB_ReadDevOutEPInterrupt>
 8001468:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	f003 0301 	and.w	r3, r3, #1
 8001470:	2b00      	cmp	r3, #0
 8001472:	d00c      	beq.n	800148e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001476:	015a      	lsls	r2, r3, #5
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	4413      	add	r3, r2
 800147c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001480:	461a      	mov	r2, r3
 8001482:	2301      	movs	r3, #1
 8001484:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001486:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f000 fdb1 	bl	8001ff0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	f003 0308 	and.w	r3, r3, #8
 8001494:	2b00      	cmp	r3, #0
 8001496:	d00c      	beq.n	80014b2 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149a:	015a      	lsls	r2, r3, #5
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	4413      	add	r3, r2
 80014a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014a4:	461a      	mov	r2, r3
 80014a6:	2308      	movs	r3, #8
 80014a8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80014aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f000 feab 	bl	8002208 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	f003 0310 	and.w	r3, r3, #16
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d008      	beq.n	80014ce <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80014bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014be:	015a      	lsls	r2, r3, #5
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	4413      	add	r3, r2
 80014c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014c8:	461a      	mov	r2, r3
 80014ca:	2310      	movs	r3, #16
 80014cc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	f003 0320 	and.w	r3, r3, #32
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d008      	beq.n	80014ea <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80014d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014da:	015a      	lsls	r2, r3, #5
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	4413      	add	r3, r2
 80014e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014e4:	461a      	mov	r2, r3
 80014e6:	2320      	movs	r3, #32
 80014e8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d009      	beq.n	8001508 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80014f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f6:	015a      	lsls	r2, r3, #5
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	4413      	add	r3, r2
 80014fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001500:	461a      	mov	r2, r3
 8001502:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001506:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150a:	3301      	adds	r3, #1
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800150e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001510:	085b      	lsrs	r3, r3, #1
 8001512:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001516:	2b00      	cmp	r3, #0
 8001518:	d199      	bne.n	800144e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4618      	mov	r0, r3
 8001520:	f002 ff89 	bl	8004436 <USB_ReadInterrupts>
 8001524:	4603      	mov	r3, r0
 8001526:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800152a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800152e:	f040 80c0 	bne.w	80016b2 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f002 ffaa 	bl	8004490 <USB_ReadDevAllInEpInterrupt>
 800153c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800153e:	2300      	movs	r3, #0
 8001540:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001542:	e0b2      	b.n	80016aa <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	2b00      	cmp	r3, #0
 800154c:	f000 80a7 	beq.w	800169e <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001556:	b2d2      	uxtb	r2, r2
 8001558:	4611      	mov	r1, r2
 800155a:	4618      	mov	r0, r3
 800155c:	f002 ffd0 	bl	8004500 <USB_ReadDevInEPInterrupt>
 8001560:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	f003 0301 	and.w	r3, r3, #1
 8001568:	2b00      	cmp	r3, #0
 800156a:	d057      	beq.n	800161c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800156c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156e:	f003 030f 	and.w	r3, r3, #15
 8001572:	2201      	movs	r2, #1
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001580:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	43db      	mvns	r3, r3
 8001586:	69f9      	ldr	r1, [r7, #28]
 8001588:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800158c:	4013      	ands	r3, r2
 800158e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001592:	015a      	lsls	r2, r3, #5
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	4413      	add	r3, r2
 8001598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800159c:	461a      	mov	r2, r3
 800159e:	2301      	movs	r3, #1
 80015a0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	691b      	ldr	r3, [r3, #16]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d132      	bne.n	8001610 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80015aa:	6879      	ldr	r1, [r7, #4]
 80015ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ae:	4613      	mov	r3, r2
 80015b0:	00db      	lsls	r3, r3, #3
 80015b2:	1a9b      	subs	r3, r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	440b      	add	r3, r1
 80015b8:	3348      	adds	r3, #72	; 0x48
 80015ba:	6819      	ldr	r1, [r3, #0]
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015c0:	4613      	mov	r3, r2
 80015c2:	00db      	lsls	r3, r3, #3
 80015c4:	1a9b      	subs	r3, r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	4403      	add	r3, r0
 80015ca:	3344      	adds	r3, #68	; 0x44
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4419      	add	r1, r3
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015d4:	4613      	mov	r3, r2
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	1a9b      	subs	r3, r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	4403      	add	r3, r0
 80015de:	3348      	adds	r3, #72	; 0x48
 80015e0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80015e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d113      	bne.n	8001610 <HAL_PCD_IRQHandler+0x31c>
 80015e8:	6879      	ldr	r1, [r7, #4]
 80015ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ec:	4613      	mov	r3, r2
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	1a9b      	subs	r3, r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	440b      	add	r3, r1
 80015f6:	3350      	adds	r3, #80	; 0x50
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d108      	bne.n	8001610 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6818      	ldr	r0, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001608:	461a      	mov	r2, r3
 800160a:	2101      	movs	r1, #1
 800160c:	f002 ffd8 	bl	80045c0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001612:	b2db      	uxtb	r3, r3
 8001614:	4619      	mov	r1, r3
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f007 fbdf 	bl	8008dda <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	f003 0308 	and.w	r3, r3, #8
 8001622:	2b00      	cmp	r3, #0
 8001624:	d008      	beq.n	8001638 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001628:	015a      	lsls	r2, r3, #5
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	4413      	add	r3, r2
 800162e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001632:	461a      	mov	r2, r3
 8001634:	2308      	movs	r3, #8
 8001636:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	f003 0310 	and.w	r3, r3, #16
 800163e:	2b00      	cmp	r3, #0
 8001640:	d008      	beq.n	8001654 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001644:	015a      	lsls	r2, r3, #5
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	4413      	add	r3, r2
 800164a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800164e:	461a      	mov	r2, r3
 8001650:	2310      	movs	r3, #16
 8001652:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800165a:	2b00      	cmp	r3, #0
 800165c:	d008      	beq.n	8001670 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	015a      	lsls	r2, r3, #5
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	4413      	add	r3, r2
 8001666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800166a:	461a      	mov	r2, r3
 800166c:	2340      	movs	r3, #64	; 0x40
 800166e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d008      	beq.n	800168c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800167a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167c:	015a      	lsls	r2, r3, #5
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	4413      	add	r3, r2
 8001682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001686:	461a      	mov	r2, r3
 8001688:	2302      	movs	r3, #2
 800168a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001692:	2b00      	cmp	r3, #0
 8001694:	d003      	beq.n	800169e <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001696:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f000 fc1b 	bl	8001ed4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800169e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a0:	3301      	adds	r3, #1
 80016a2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80016a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016a6:	085b      	lsrs	r3, r3, #1
 80016a8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80016aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	f47f af49 	bne.w	8001544 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f002 febd 	bl	8004436 <USB_ReadInterrupts>
 80016bc:	4603      	mov	r3, r0
 80016be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80016c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80016c6:	d122      	bne.n	800170e <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	69fa      	ldr	r2, [r7, #28]
 80016d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016d6:	f023 0301 	bic.w	r3, r3, #1
 80016da:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d108      	bne.n	80016f8 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80016ee:	2100      	movs	r1, #0
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f000 fe27 	bl	8002344 <HAL_PCDEx_LPM_Callback>
 80016f6:	e002      	b.n	80016fe <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f007 fbdb 	bl	8008eb4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	695a      	ldr	r2, [r3, #20]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800170c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4618      	mov	r0, r3
 8001714:	f002 fe8f 	bl	8004436 <USB_ReadInterrupts>
 8001718:	4603      	mov	r3, r0
 800171a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800171e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001722:	d112      	bne.n	800174a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f003 0301 	and.w	r3, r3, #1
 8001730:	2b01      	cmp	r3, #1
 8001732:	d102      	bne.n	800173a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f007 fb97 	bl	8008e68 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	695a      	ldr	r2, [r3, #20]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001748:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4618      	mov	r0, r3
 8001750:	f002 fe71 	bl	8004436 <USB_ReadInterrupts>
 8001754:	4603      	mov	r3, r0
 8001756:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800175a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800175e:	f040 80c7 	bne.w	80018f0 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	69fa      	ldr	r2, [r7, #28]
 800176c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001770:	f023 0301 	bic.w	r3, r3, #1
 8001774:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2110      	movs	r1, #16
 800177c:	4618      	mov	r0, r3
 800177e:	f001 ff3f 	bl	8003600 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001782:	2300      	movs	r3, #0
 8001784:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001786:	e056      	b.n	8001836 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800178a:	015a      	lsls	r2, r3, #5
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	4413      	add	r3, r2
 8001790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001794:	461a      	mov	r2, r3
 8001796:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800179a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800179c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800179e:	015a      	lsls	r2, r3, #5
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	4413      	add	r3, r2
 80017a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017ac:	0151      	lsls	r1, r2, #5
 80017ae:	69fa      	ldr	r2, [r7, #28]
 80017b0:	440a      	add	r2, r1
 80017b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80017b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80017ba:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80017bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017be:	015a      	lsls	r2, r3, #5
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	4413      	add	r3, r2
 80017c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017cc:	0151      	lsls	r1, r2, #5
 80017ce:	69fa      	ldr	r2, [r7, #28]
 80017d0:	440a      	add	r2, r1
 80017d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80017d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80017da:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80017dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017de:	015a      	lsls	r2, r3, #5
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	4413      	add	r3, r2
 80017e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017e8:	461a      	mov	r2, r3
 80017ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80017ee:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80017f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017f2:	015a      	lsls	r2, r3, #5
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	4413      	add	r3, r2
 80017f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001800:	0151      	lsls	r1, r2, #5
 8001802:	69fa      	ldr	r2, [r7, #28]
 8001804:	440a      	add	r2, r1
 8001806:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800180a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800180e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001812:	015a      	lsls	r2, r3, #5
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	4413      	add	r3, r2
 8001818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001820:	0151      	lsls	r1, r2, #5
 8001822:	69fa      	ldr	r2, [r7, #28]
 8001824:	440a      	add	r2, r1
 8001826:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800182a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800182e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001832:	3301      	adds	r3, #1
 8001834:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800183c:	429a      	cmp	r2, r3
 800183e:	d3a3      	bcc.n	8001788 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001846:	69db      	ldr	r3, [r3, #28]
 8001848:	69fa      	ldr	r2, [r7, #28]
 800184a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800184e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001852:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001858:	2b00      	cmp	r3, #0
 800185a:	d016      	beq.n	800188a <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001862:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001866:	69fa      	ldr	r2, [r7, #28]
 8001868:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800186c:	f043 030b 	orr.w	r3, r3, #11
 8001870:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800187a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187c:	69fa      	ldr	r2, [r7, #28]
 800187e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001882:	f043 030b 	orr.w	r3, r3, #11
 8001886:	6453      	str	r3, [r2, #68]	; 0x44
 8001888:	e015      	b.n	80018b6 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001890:	695b      	ldr	r3, [r3, #20]
 8001892:	69fa      	ldr	r2, [r7, #28]
 8001894:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001898:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800189c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80018a0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	69fa      	ldr	r2, [r7, #28]
 80018ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018b0:	f043 030b 	orr.w	r3, r3, #11
 80018b4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	69fa      	ldr	r2, [r7, #28]
 80018c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018c4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80018c8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6818      	ldr	r0, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	691b      	ldr	r3, [r3, #16]
 80018d2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018da:	461a      	mov	r2, r3
 80018dc:	f002 fe70 	bl	80045c0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	695a      	ldr	r2, [r3, #20]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80018ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f002 fd9e 	bl	8004436 <USB_ReadInterrupts>
 80018fa:	4603      	mov	r3, r0
 80018fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001900:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001904:	d124      	bne.n	8001950 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f002 fe34 	bl	8004578 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4618      	mov	r0, r3
 8001916:	f001 fed4 	bl	80036c2 <USB_GetDevSpeed>
 800191a:	4603      	mov	r3, r0
 800191c:	461a      	mov	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681c      	ldr	r4, [r3, #0]
 8001926:	f001 f92d 	bl	8002b84 <HAL_RCC_GetHCLKFreq>
 800192a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001930:	b2db      	uxtb	r3, r3
 8001932:	461a      	mov	r2, r3
 8001934:	4620      	mov	r0, r4
 8001936:	f001 fc11 	bl	800315c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f007 fa75 	bl	8008e2a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	695a      	ldr	r2, [r3, #20]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800194e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f002 fd6e 	bl	8004436 <USB_ReadInterrupts>
 800195a:	4603      	mov	r3, r0
 800195c:	f003 0308 	and.w	r3, r3, #8
 8001960:	2b08      	cmp	r3, #8
 8001962:	d10a      	bne.n	800197a <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f007 fa52 	bl	8008e0e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	695a      	ldr	r2, [r3, #20]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f002 0208 	and.w	r2, r2, #8
 8001978:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f002 fd59 	bl	8004436 <USB_ReadInterrupts>
 8001984:	4603      	mov	r3, r0
 8001986:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800198a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800198e:	d10f      	bne.n	80019b0 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001990:	2300      	movs	r3, #0
 8001992:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001996:	b2db      	uxtb	r3, r3
 8001998:	4619      	mov	r1, r3
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f007 faaa 	bl	8008ef4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	695a      	ldr	r2, [r3, #20]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80019ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f002 fd3e 	bl	8004436 <USB_ReadInterrupts>
 80019ba:	4603      	mov	r3, r0
 80019bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80019c4:	d10f      	bne.n	80019e6 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80019c6:	2300      	movs	r3, #0
 80019c8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80019ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	4619      	mov	r1, r3
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f007 fa7d 	bl	8008ed0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	695a      	ldr	r2, [r3, #20]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80019e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f002 fd23 	bl	8004436 <USB_ReadInterrupts>
 80019f0:	4603      	mov	r3, r0
 80019f2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80019f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019fa:	d10a      	bne.n	8001a12 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f007 fa8b 	bl	8008f18 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	695a      	ldr	r2, [r3, #20]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001a10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f002 fd0d 	bl	8004436 <USB_ReadInterrupts>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	f003 0304 	and.w	r3, r3, #4
 8001a22:	2b04      	cmp	r3, #4
 8001a24:	d115      	bne.n	8001a52 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	f003 0304 	and.w	r3, r3, #4
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d002      	beq.n	8001a3e <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f007 fa7b 	bl	8008f34 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	6859      	ldr	r1, [r3, #4]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	e000      	b.n	8001a52 <HAL_PCD_IRQHandler+0x75e>
      return;
 8001a50:	bf00      	nop
    }
  }
}
 8001a52:	3734      	adds	r7, #52	; 0x34
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd90      	pop	{r4, r7, pc}

08001a58 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	460b      	mov	r3, r1
 8001a62:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d101      	bne.n	8001a72 <HAL_PCD_SetAddress+0x1a>
 8001a6e:	2302      	movs	r3, #2
 8001a70:	e013      	b.n	8001a9a <HAL_PCD_SetAddress+0x42>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2201      	movs	r2, #1
 8001a76:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	78fa      	ldrb	r2, [r7, #3]
 8001a7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	78fa      	ldrb	r2, [r7, #3]
 8001a88:	4611      	mov	r1, r2
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f002 fc6b 	bl	8004366 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b084      	sub	sp, #16
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
 8001aaa:	4608      	mov	r0, r1
 8001aac:	4611      	mov	r1, r2
 8001aae:	461a      	mov	r2, r3
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	70fb      	strb	r3, [r7, #3]
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	803b      	strh	r3, [r7, #0]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001abc:	2300      	movs	r3, #0
 8001abe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ac0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	da0f      	bge.n	8001ae8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ac8:	78fb      	ldrb	r3, [r7, #3]
 8001aca:	f003 020f 	and.w	r2, r3, #15
 8001ace:	4613      	mov	r3, r2
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	1a9b      	subs	r3, r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	3338      	adds	r3, #56	; 0x38
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	4413      	add	r3, r2
 8001adc:	3304      	adds	r3, #4
 8001ade:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	705a      	strb	r2, [r3, #1]
 8001ae6:	e00f      	b.n	8001b08 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ae8:	78fb      	ldrb	r3, [r7, #3]
 8001aea:	f003 020f 	and.w	r2, r3, #15
 8001aee:	4613      	mov	r3, r2
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	1a9b      	subs	r3, r3, r2
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	4413      	add	r3, r2
 8001afe:	3304      	adds	r3, #4
 8001b00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2200      	movs	r2, #0
 8001b06:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001b08:	78fb      	ldrb	r3, [r7, #3]
 8001b0a:	f003 030f 	and.w	r3, r3, #15
 8001b0e:	b2da      	uxtb	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001b14:	883a      	ldrh	r2, [r7, #0]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	78ba      	ldrb	r2, [r7, #2]
 8001b1e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	785b      	ldrb	r3, [r3, #1]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d004      	beq.n	8001b32 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001b32:	78bb      	ldrb	r3, [r7, #2]
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d102      	bne.n	8001b3e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d101      	bne.n	8001b4c <HAL_PCD_EP_Open+0xaa>
 8001b48:	2302      	movs	r3, #2
 8001b4a:	e00e      	b.n	8001b6a <HAL_PCD_EP_Open+0xc8>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	68f9      	ldr	r1, [r7, #12]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f001 fdd6 	bl	800370c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001b68:	7afb      	ldrb	r3, [r7, #11]
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b084      	sub	sp, #16
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	da0f      	bge.n	8001ba6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b86:	78fb      	ldrb	r3, [r7, #3]
 8001b88:	f003 020f 	and.w	r2, r3, #15
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	1a9b      	subs	r3, r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	3338      	adds	r3, #56	; 0x38
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	4413      	add	r3, r2
 8001b9a:	3304      	adds	r3, #4
 8001b9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	705a      	strb	r2, [r3, #1]
 8001ba4:	e00f      	b.n	8001bc6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ba6:	78fb      	ldrb	r3, [r7, #3]
 8001ba8:	f003 020f 	and.w	r2, r3, #15
 8001bac:	4613      	mov	r3, r2
 8001bae:	00db      	lsls	r3, r3, #3
 8001bb0:	1a9b      	subs	r3, r3, r2
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	4413      	add	r3, r2
 8001bbc:	3304      	adds	r3, #4
 8001bbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001bc6:	78fb      	ldrb	r3, [r7, #3]
 8001bc8:	f003 030f 	and.w	r3, r3, #15
 8001bcc:	b2da      	uxtb	r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d101      	bne.n	8001be0 <HAL_PCD_EP_Close+0x6e>
 8001bdc:	2302      	movs	r3, #2
 8001bde:	e00e      	b.n	8001bfe <HAL_PCD_EP_Close+0x8c>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	68f9      	ldr	r1, [r7, #12]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f001 fe14 	bl	800381c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b086      	sub	sp, #24
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	60f8      	str	r0, [r7, #12]
 8001c0e:	607a      	str	r2, [r7, #4]
 8001c10:	603b      	str	r3, [r7, #0]
 8001c12:	460b      	mov	r3, r1
 8001c14:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c16:	7afb      	ldrb	r3, [r7, #11]
 8001c18:	f003 020f 	and.w	r2, r3, #15
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	1a9b      	subs	r3, r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c28:	68fa      	ldr	r2, [r7, #12]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	3304      	adds	r3, #4
 8001c2e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	683a      	ldr	r2, [r7, #0]
 8001c3a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	2200      	movs	r2, #0
 8001c46:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c48:	7afb      	ldrb	r3, [r7, #11]
 8001c4a:	f003 030f 	and.w	r3, r3, #15
 8001c4e:	b2da      	uxtb	r2, r3
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	691b      	ldr	r3, [r3, #16]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d102      	bne.n	8001c62 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c62:	7afb      	ldrb	r3, [r7, #11]
 8001c64:	f003 030f 	and.w	r3, r3, #15
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d109      	bne.n	8001c80 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6818      	ldr	r0, [r3, #0]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	461a      	mov	r2, r3
 8001c78:	6979      	ldr	r1, [r7, #20]
 8001c7a:	f002 f8ef 	bl	8003e5c <USB_EP0StartXfer>
 8001c7e:	e008      	b.n	8001c92 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6818      	ldr	r0, [r3, #0]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	6979      	ldr	r1, [r7, #20]
 8001c8e:	f001 fea1 	bl	80039d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3718      	adds	r7, #24
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001ca8:	78fb      	ldrb	r3, [r7, #3]
 8001caa:	f003 020f 	and.w	r2, r3, #15
 8001cae:	6879      	ldr	r1, [r7, #4]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	1a9b      	subs	r3, r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	440b      	add	r3, r1
 8001cba:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001cbe:	681b      	ldr	r3, [r3, #0]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	607a      	str	r2, [r7, #4]
 8001cd6:	603b      	str	r3, [r7, #0]
 8001cd8:	460b      	mov	r3, r1
 8001cda:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cdc:	7afb      	ldrb	r3, [r7, #11]
 8001cde:	f003 020f 	and.w	r2, r3, #15
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	1a9b      	subs	r3, r3, r2
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	3338      	adds	r3, #56	; 0x38
 8001cec:	68fa      	ldr	r2, [r7, #12]
 8001cee:	4413      	add	r3, r2
 8001cf0:	3304      	adds	r3, #4
 8001cf2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	2200      	movs	r2, #0
 8001d04:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d0c:	7afb      	ldrb	r3, [r7, #11]
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	691b      	ldr	r3, [r3, #16]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d102      	bne.n	8001d26 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d26:	7afb      	ldrb	r3, [r7, #11]
 8001d28:	f003 030f 	and.w	r3, r3, #15
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d109      	bne.n	8001d44 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6818      	ldr	r0, [r3, #0]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	691b      	ldr	r3, [r3, #16]
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	6979      	ldr	r1, [r7, #20]
 8001d3e:	f002 f88d 	bl	8003e5c <USB_EP0StartXfer>
 8001d42:	e008      	b.n	8001d56 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6818      	ldr	r0, [r3, #0]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	691b      	ldr	r3, [r3, #16]
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	461a      	mov	r2, r3
 8001d50:	6979      	ldr	r1, [r7, #20]
 8001d52:	f001 fe3f 	bl	80039d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3718      	adds	r7, #24
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	460b      	mov	r3, r1
 8001d6a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001d6c:	78fb      	ldrb	r3, [r7, #3]
 8001d6e:	f003 020f 	and.w	r2, r3, #15
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d901      	bls.n	8001d7e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e050      	b.n	8001e20 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	da0f      	bge.n	8001da6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d86:	78fb      	ldrb	r3, [r7, #3]
 8001d88:	f003 020f 	and.w	r2, r3, #15
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	1a9b      	subs	r3, r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	3338      	adds	r3, #56	; 0x38
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	4413      	add	r3, r2
 8001d9a:	3304      	adds	r3, #4
 8001d9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2201      	movs	r2, #1
 8001da2:	705a      	strb	r2, [r3, #1]
 8001da4:	e00d      	b.n	8001dc2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001da6:	78fa      	ldrb	r2, [r7, #3]
 8001da8:	4613      	mov	r3, r2
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	1a9b      	subs	r3, r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	4413      	add	r3, r2
 8001db8:	3304      	adds	r3, #4
 8001dba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dc8:	78fb      	ldrb	r3, [r7, #3]
 8001dca:	f003 030f 	and.w	r3, r3, #15
 8001dce:	b2da      	uxtb	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d101      	bne.n	8001de2 <HAL_PCD_EP_SetStall+0x82>
 8001dde:	2302      	movs	r3, #2
 8001de0:	e01e      	b.n	8001e20 <HAL_PCD_EP_SetStall+0xc0>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68f9      	ldr	r1, [r7, #12]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f002 f9e4 	bl	80041be <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001df6:	78fb      	ldrb	r3, [r7, #3]
 8001df8:	f003 030f 	and.w	r3, r3, #15
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d10a      	bne.n	8001e16 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6818      	ldr	r0, [r3, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	b2d9      	uxtb	r1, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001e10:	461a      	mov	r2, r3
 8001e12:	f002 fbd5 	bl	80045c0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3710      	adds	r7, #16
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	460b      	mov	r3, r1
 8001e32:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001e34:	78fb      	ldrb	r3, [r7, #3]
 8001e36:	f003 020f 	and.w	r2, r3, #15
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d901      	bls.n	8001e46 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e042      	b.n	8001ecc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	da0f      	bge.n	8001e6e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e4e:	78fb      	ldrb	r3, [r7, #3]
 8001e50:	f003 020f 	and.w	r2, r3, #15
 8001e54:	4613      	mov	r3, r2
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	1a9b      	subs	r3, r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	3338      	adds	r3, #56	; 0x38
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	4413      	add	r3, r2
 8001e62:	3304      	adds	r3, #4
 8001e64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	705a      	strb	r2, [r3, #1]
 8001e6c:	e00f      	b.n	8001e8e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e6e:	78fb      	ldrb	r3, [r7, #3]
 8001e70:	f003 020f 	and.w	r2, r3, #15
 8001e74:	4613      	mov	r3, r2
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	1a9b      	subs	r3, r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	4413      	add	r3, r2
 8001e84:	3304      	adds	r3, #4
 8001e86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2200      	movs	r2, #0
 8001e92:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e94:	78fb      	ldrb	r3, [r7, #3]
 8001e96:	f003 030f 	and.w	r3, r3, #15
 8001e9a:	b2da      	uxtb	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d101      	bne.n	8001eae <HAL_PCD_EP_ClrStall+0x86>
 8001eaa:	2302      	movs	r3, #2
 8001eac:	e00e      	b.n	8001ecc <HAL_PCD_EP_ClrStall+0xa4>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68f9      	ldr	r1, [r7, #12]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f002 f9ec 	bl	800429a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b08a      	sub	sp, #40	; 0x28
 8001ed8:	af02      	add	r7, sp, #8
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	4613      	mov	r3, r2
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	1a9b      	subs	r3, r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	3338      	adds	r3, #56	; 0x38
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	3304      	adds	r3, #4
 8001efa:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	699a      	ldr	r2, [r3, #24]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	695b      	ldr	r3, [r3, #20]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d901      	bls.n	8001f0c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e06c      	b.n	8001fe6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	695a      	ldr	r2, [r3, #20]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	69fa      	ldr	r2, [r7, #28]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d902      	bls.n	8001f28 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	3303      	adds	r3, #3
 8001f2c:	089b      	lsrs	r3, r3, #2
 8001f2e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f30:	e02b      	b.n	8001f8a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	695a      	ldr	r2, [r3, #20]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	69fa      	ldr	r2, [r7, #28]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d902      	bls.n	8001f4e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	3303      	adds	r3, #3
 8001f52:	089b      	lsrs	r3, r3, #2
 8001f54:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	68d9      	ldr	r1, [r3, #12]
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	b2da      	uxtb	r2, r3
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	9300      	str	r3, [sp, #0]
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	6978      	ldr	r0, [r7, #20]
 8001f6e:	f002 f8c8 	bl	8004102 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	68da      	ldr	r2, [r3, #12]
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	441a      	add	r2, r3
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	699a      	ldr	r2, [r3, #24]
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	441a      	add	r2, r3
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	015a      	lsls	r2, r3, #5
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	4413      	add	r3, r2
 8001f92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d809      	bhi.n	8001fb4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	699a      	ldr	r2, [r3, #24]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d203      	bcs.n	8001fb4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	695b      	ldr	r3, [r3, #20]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d1be      	bne.n	8001f32 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	695a      	ldr	r2, [r3, #20]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d811      	bhi.n	8001fe4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	f003 030f 	and.w	r3, r3, #15
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	6939      	ldr	r1, [r7, #16]
 8001fdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3720      	adds	r7, #32
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
	...

08001ff0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	333c      	adds	r3, #60	; 0x3c
 8002008:	3304      	adds	r3, #4
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	015a      	lsls	r2, r3, #5
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	4413      	add	r3, r2
 8002016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	2b01      	cmp	r3, #1
 8002024:	f040 80a0 	bne.w	8002168 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	f003 0308 	and.w	r3, r3, #8
 800202e:	2b00      	cmp	r3, #0
 8002030:	d015      	beq.n	800205e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	4a72      	ldr	r2, [pc, #456]	; (8002200 <PCD_EP_OutXfrComplete_int+0x210>)
 8002036:	4293      	cmp	r3, r2
 8002038:	f240 80dd 	bls.w	80021f6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002042:	2b00      	cmp	r3, #0
 8002044:	f000 80d7 	beq.w	80021f6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	015a      	lsls	r2, r3, #5
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	4413      	add	r3, r2
 8002050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002054:	461a      	mov	r2, r3
 8002056:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800205a:	6093      	str	r3, [r2, #8]
 800205c:	e0cb      	b.n	80021f6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	f003 0320 	and.w	r3, r3, #32
 8002064:	2b00      	cmp	r3, #0
 8002066:	d009      	beq.n	800207c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	015a      	lsls	r2, r3, #5
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	4413      	add	r3, r2
 8002070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002074:	461a      	mov	r2, r3
 8002076:	2320      	movs	r3, #32
 8002078:	6093      	str	r3, [r2, #8]
 800207a:	e0bc      	b.n	80021f6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002082:	2b00      	cmp	r3, #0
 8002084:	f040 80b7 	bne.w	80021f6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	4a5d      	ldr	r2, [pc, #372]	; (8002200 <PCD_EP_OutXfrComplete_int+0x210>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d90f      	bls.n	80020b0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00a      	beq.n	80020b0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	015a      	lsls	r2, r3, #5
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	4413      	add	r3, r2
 80020a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020a6:	461a      	mov	r2, r3
 80020a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020ac:	6093      	str	r3, [r2, #8]
 80020ae:	e0a2      	b.n	80021f6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80020b0:	6879      	ldr	r1, [r7, #4]
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	4613      	mov	r3, r2
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	1a9b      	subs	r3, r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	440b      	add	r3, r1
 80020be:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80020c2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	0159      	lsls	r1, r3, #5
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	440b      	add	r3, r1
 80020cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80020d6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	4613      	mov	r3, r2
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	1a9b      	subs	r3, r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4403      	add	r3, r0
 80020e6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80020ea:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	4613      	mov	r3, r2
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	440b      	add	r3, r1
 80020fa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80020fe:	6819      	ldr	r1, [r3, #0]
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	683a      	ldr	r2, [r7, #0]
 8002104:	4613      	mov	r3, r2
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	1a9b      	subs	r3, r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4403      	add	r3, r0
 800210e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4419      	add	r1, r3
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	4613      	mov	r3, r2
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	1a9b      	subs	r3, r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4403      	add	r3, r0
 8002124:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002128:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d114      	bne.n	800215a <PCD_EP_OutXfrComplete_int+0x16a>
 8002130:	6879      	ldr	r1, [r7, #4]
 8002132:	683a      	ldr	r2, [r7, #0]
 8002134:	4613      	mov	r3, r2
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	1a9b      	subs	r3, r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	440b      	add	r3, r1
 800213e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d108      	bne.n	800215a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6818      	ldr	r0, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002152:	461a      	mov	r2, r3
 8002154:	2101      	movs	r1, #1
 8002156:	f002 fa33 	bl	80045c0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	b2db      	uxtb	r3, r3
 800215e:	4619      	mov	r1, r3
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f006 fe1f 	bl	8008da4 <HAL_PCD_DataOutStageCallback>
 8002166:	e046      	b.n	80021f6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	4a26      	ldr	r2, [pc, #152]	; (8002204 <PCD_EP_OutXfrComplete_int+0x214>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d124      	bne.n	80021ba <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00a      	beq.n	8002190 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	015a      	lsls	r2, r3, #5
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	4413      	add	r3, r2
 8002182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002186:	461a      	mov	r2, r3
 8002188:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800218c:	6093      	str	r3, [r2, #8]
 800218e:	e032      	b.n	80021f6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	f003 0320 	and.w	r3, r3, #32
 8002196:	2b00      	cmp	r3, #0
 8002198:	d008      	beq.n	80021ac <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	015a      	lsls	r2, r3, #5
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	4413      	add	r3, r2
 80021a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021a6:	461a      	mov	r2, r3
 80021a8:	2320      	movs	r3, #32
 80021aa:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	4619      	mov	r1, r3
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f006 fdf6 	bl	8008da4 <HAL_PCD_DataOutStageCallback>
 80021b8:	e01d      	b.n	80021f6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d114      	bne.n	80021ea <PCD_EP_OutXfrComplete_int+0x1fa>
 80021c0:	6879      	ldr	r1, [r7, #4]
 80021c2:	683a      	ldr	r2, [r7, #0]
 80021c4:	4613      	mov	r3, r2
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	1a9b      	subs	r3, r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	440b      	add	r3, r1
 80021ce:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d108      	bne.n	80021ea <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6818      	ldr	r0, [r3, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80021e2:	461a      	mov	r2, r3
 80021e4:	2100      	movs	r1, #0
 80021e6:	f002 f9eb 	bl	80045c0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	4619      	mov	r1, r3
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f006 fdd7 	bl	8008da4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3718      	adds	r7, #24
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	4f54300a 	.word	0x4f54300a
 8002204:	4f54310a 	.word	0x4f54310a

08002208 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	333c      	adds	r3, #60	; 0x3c
 8002220:	3304      	adds	r3, #4
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	015a      	lsls	r2, r3, #5
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	4413      	add	r3, r2
 800222e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	4a15      	ldr	r2, [pc, #84]	; (8002290 <PCD_EP_OutSetupPacket_int+0x88>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d90e      	bls.n	800225c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002244:	2b00      	cmp	r3, #0
 8002246:	d009      	beq.n	800225c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	015a      	lsls	r2, r3, #5
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	4413      	add	r3, r2
 8002250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002254:	461a      	mov	r2, r3
 8002256:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800225a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f006 fd8f 	bl	8008d80 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	4a0a      	ldr	r2, [pc, #40]	; (8002290 <PCD_EP_OutSetupPacket_int+0x88>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d90c      	bls.n	8002284 <PCD_EP_OutSetupPacket_int+0x7c>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d108      	bne.n	8002284 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6818      	ldr	r0, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800227c:	461a      	mov	r2, r3
 800227e:	2101      	movs	r1, #1
 8002280:	f002 f99e 	bl	80045c0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3718      	adds	r7, #24
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	4f54300a 	.word	0x4f54300a

08002294 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	460b      	mov	r3, r1
 800229e:	70fb      	strb	r3, [r7, #3]
 80022a0:	4613      	mov	r3, r2
 80022a2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022aa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80022ac:	78fb      	ldrb	r3, [r7, #3]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d107      	bne.n	80022c2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80022b2:	883b      	ldrh	r3, [r7, #0]
 80022b4:	0419      	lsls	r1, r3, #16
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68ba      	ldr	r2, [r7, #8]
 80022bc:	430a      	orrs	r2, r1
 80022be:	629a      	str	r2, [r3, #40]	; 0x28
 80022c0:	e028      	b.n	8002314 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c8:	0c1b      	lsrs	r3, r3, #16
 80022ca:	68ba      	ldr	r2, [r7, #8]
 80022cc:	4413      	add	r3, r2
 80022ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80022d0:	2300      	movs	r3, #0
 80022d2:	73fb      	strb	r3, [r7, #15]
 80022d4:	e00d      	b.n	80022f2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	7bfb      	ldrb	r3, [r7, #15]
 80022dc:	3340      	adds	r3, #64	; 0x40
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	0c1b      	lsrs	r3, r3, #16
 80022e6:	68ba      	ldr	r2, [r7, #8]
 80022e8:	4413      	add	r3, r2
 80022ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80022ec:	7bfb      	ldrb	r3, [r7, #15]
 80022ee:	3301      	adds	r3, #1
 80022f0:	73fb      	strb	r3, [r7, #15]
 80022f2:	7bfa      	ldrb	r2, [r7, #15]
 80022f4:	78fb      	ldrb	r3, [r7, #3]
 80022f6:	3b01      	subs	r3, #1
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d3ec      	bcc.n	80022d6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80022fc:	883b      	ldrh	r3, [r7, #0]
 80022fe:	0418      	lsls	r0, r3, #16
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6819      	ldr	r1, [r3, #0]
 8002304:	78fb      	ldrb	r3, [r7, #3]
 8002306:	3b01      	subs	r3, #1
 8002308:	68ba      	ldr	r2, [r7, #8]
 800230a:	4302      	orrs	r2, r0
 800230c:	3340      	adds	r3, #64	; 0x40
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	440b      	add	r3, r1
 8002312:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3714      	adds	r7, #20
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr

08002322 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002322:	b480      	push	{r7}
 8002324:	b083      	sub	sp, #12
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
 800232a:	460b      	mov	r3, r1
 800232c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	887a      	ldrh	r2, [r7, #2]
 8002334:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	460b      	mov	r3, r1
 800234e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e25b      	b.n	8002826 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b00      	cmp	r3, #0
 8002378:	d075      	beq.n	8002466 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800237a:	4ba3      	ldr	r3, [pc, #652]	; (8002608 <HAL_RCC_OscConfig+0x2ac>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f003 030c 	and.w	r3, r3, #12
 8002382:	2b04      	cmp	r3, #4
 8002384:	d00c      	beq.n	80023a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002386:	4ba0      	ldr	r3, [pc, #640]	; (8002608 <HAL_RCC_OscConfig+0x2ac>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800238e:	2b08      	cmp	r3, #8
 8002390:	d112      	bne.n	80023b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002392:	4b9d      	ldr	r3, [pc, #628]	; (8002608 <HAL_RCC_OscConfig+0x2ac>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800239a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800239e:	d10b      	bne.n	80023b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a0:	4b99      	ldr	r3, [pc, #612]	; (8002608 <HAL_RCC_OscConfig+0x2ac>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d05b      	beq.n	8002464 <HAL_RCC_OscConfig+0x108>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d157      	bne.n	8002464 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e236      	b.n	8002826 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023c0:	d106      	bne.n	80023d0 <HAL_RCC_OscConfig+0x74>
 80023c2:	4b91      	ldr	r3, [pc, #580]	; (8002608 <HAL_RCC_OscConfig+0x2ac>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a90      	ldr	r2, [pc, #576]	; (8002608 <HAL_RCC_OscConfig+0x2ac>)
 80023c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	e01d      	b.n	800240c <HAL_RCC_OscConfig+0xb0>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023d8:	d10c      	bne.n	80023f4 <HAL_RCC_OscConfig+0x98>
 80023da:	4b8b      	ldr	r3, [pc, #556]	; (8002608 <HAL_RCC_OscConfig+0x2ac>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a8a      	ldr	r2, [pc, #552]	; (8002608 <HAL_RCC_OscConfig+0x2ac>)
 80023e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023e4:	6013      	str	r3, [r2, #0]
 80023e6:	4b88      	ldr	r3, [pc, #544]	; (8002608 <HAL_RCC_OscConfig+0x2ac>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a87      	ldr	r2, [pc, #540]	; (8002608 <HAL_RCC_OscConfig+0x2ac>)
 80023ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f0:	6013      	str	r3, [r2, #0]
 80023f2:	e00b      	b.n	800240c <HAL_RCC_OscConfig+0xb0>
 80023f4:	4b84      	ldr	r3, [pc, #528]	; (8002608 <HAL_RCC_OscConfig+0x2ac>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a83      	ldr	r2, [pc, #524]	; (8002608 <HAL_RCC_OscConfig+0x2ac>)
 80023fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023fe:	6013      	str	r3, [r2, #0]
 8002400:	4b81      	ldr	r3, [pc, #516]	; (8002608 <HAL_RCC_OscConfig+0x2ac>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a80      	ldr	r2, [pc, #512]	; (8002608 <HAL_RCC_OscConfig+0x2ac>)
 8002406:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800240a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d013      	beq.n	800243c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002414:	f7fe fb42 	bl	8000a9c <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800241c:	f7fe fb3e 	bl	8000a9c <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b64      	cmp	r3, #100	; 0x64
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e1fb      	b.n	8002826 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800242e:	4b76      	ldr	r3, [pc, #472]	; (8002608 <HAL_RCC_OscConfig+0x2ac>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d0f0      	beq.n	800241c <HAL_RCC_OscConfig+0xc0>
 800243a:	e014      	b.n	8002466 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800243c:	f7fe fb2e 	bl	8000a9c <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002444:	f7fe fb2a 	bl	8000a9c <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b64      	cmp	r3, #100	; 0x64
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e1e7      	b.n	8002826 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002456:	4b6c      	ldr	r3, [pc, #432]	; (8002608 <HAL_RCC_OscConfig+0x2ac>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1f0      	bne.n	8002444 <HAL_RCC_OscConfig+0xe8>
 8002462:	e000      	b.n	8002466 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002464:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d063      	beq.n	800253a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002472:	4b65      	ldr	r3, [pc, #404]	; (8002608 <HAL_RCC_OscConfig+0x2ac>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f003 030c 	and.w	r3, r3, #12
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00b      	beq.n	8002496 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800247e:	4b62      	ldr	r3, [pc, #392]	; (8002608 <HAL_RCC_OscConfig+0x2ac>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002486:	2b08      	cmp	r3, #8
 8002488:	d11c      	bne.n	80024c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800248a:	4b5f      	ldr	r3, [pc, #380]	; (8002608 <HAL_RCC_OscConfig+0x2ac>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d116      	bne.n	80024c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002496:	4b5c      	ldr	r3, [pc, #368]	; (8002608 <HAL_RCC_OscConfig+0x2ac>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d005      	beq.n	80024ae <HAL_RCC_OscConfig+0x152>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d001      	beq.n	80024ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e1bb      	b.n	8002826 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ae:	4b56      	ldr	r3, [pc, #344]	; (8002608 <HAL_RCC_OscConfig+0x2ac>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	4952      	ldr	r1, [pc, #328]	; (8002608 <HAL_RCC_OscConfig+0x2ac>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024c2:	e03a      	b.n	800253a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d020      	beq.n	800250e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024cc:	4b4f      	ldr	r3, [pc, #316]	; (800260c <HAL_RCC_OscConfig+0x2b0>)
 80024ce:	2201      	movs	r2, #1
 80024d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d2:	f7fe fae3 	bl	8000a9c <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024da:	f7fe fadf 	bl	8000a9c <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e19c      	b.n	8002826 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ec:	4b46      	ldr	r3, [pc, #280]	; (8002608 <HAL_RCC_OscConfig+0x2ac>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d0f0      	beq.n	80024da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f8:	4b43      	ldr	r3, [pc, #268]	; (8002608 <HAL_RCC_OscConfig+0x2ac>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	4940      	ldr	r1, [pc, #256]	; (8002608 <HAL_RCC_OscConfig+0x2ac>)
 8002508:	4313      	orrs	r3, r2
 800250a:	600b      	str	r3, [r1, #0]
 800250c:	e015      	b.n	800253a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800250e:	4b3f      	ldr	r3, [pc, #252]	; (800260c <HAL_RCC_OscConfig+0x2b0>)
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002514:	f7fe fac2 	bl	8000a9c <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800251c:	f7fe fabe 	bl	8000a9c <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e17b      	b.n	8002826 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800252e:	4b36      	ldr	r3, [pc, #216]	; (8002608 <HAL_RCC_OscConfig+0x2ac>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1f0      	bne.n	800251c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0308 	and.w	r3, r3, #8
 8002542:	2b00      	cmp	r3, #0
 8002544:	d030      	beq.n	80025a8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	695b      	ldr	r3, [r3, #20]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d016      	beq.n	800257c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800254e:	4b30      	ldr	r3, [pc, #192]	; (8002610 <HAL_RCC_OscConfig+0x2b4>)
 8002550:	2201      	movs	r2, #1
 8002552:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002554:	f7fe faa2 	bl	8000a9c <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800255c:	f7fe fa9e 	bl	8000a9c <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b02      	cmp	r3, #2
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e15b      	b.n	8002826 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800256e:	4b26      	ldr	r3, [pc, #152]	; (8002608 <HAL_RCC_OscConfig+0x2ac>)
 8002570:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d0f0      	beq.n	800255c <HAL_RCC_OscConfig+0x200>
 800257a:	e015      	b.n	80025a8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800257c:	4b24      	ldr	r3, [pc, #144]	; (8002610 <HAL_RCC_OscConfig+0x2b4>)
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002582:	f7fe fa8b 	bl	8000a9c <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002588:	e008      	b.n	800259c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800258a:	f7fe fa87 	bl	8000a9c <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e144      	b.n	8002826 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800259c:	4b1a      	ldr	r3, [pc, #104]	; (8002608 <HAL_RCC_OscConfig+0x2ac>)
 800259e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1f0      	bne.n	800258a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0304 	and.w	r3, r3, #4
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	f000 80a0 	beq.w	80026f6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025b6:	2300      	movs	r3, #0
 80025b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025ba:	4b13      	ldr	r3, [pc, #76]	; (8002608 <HAL_RCC_OscConfig+0x2ac>)
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d10f      	bne.n	80025e6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025c6:	2300      	movs	r3, #0
 80025c8:	60bb      	str	r3, [r7, #8]
 80025ca:	4b0f      	ldr	r3, [pc, #60]	; (8002608 <HAL_RCC_OscConfig+0x2ac>)
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	4a0e      	ldr	r2, [pc, #56]	; (8002608 <HAL_RCC_OscConfig+0x2ac>)
 80025d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d4:	6413      	str	r3, [r2, #64]	; 0x40
 80025d6:	4b0c      	ldr	r3, [pc, #48]	; (8002608 <HAL_RCC_OscConfig+0x2ac>)
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025de:	60bb      	str	r3, [r7, #8]
 80025e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025e2:	2301      	movs	r3, #1
 80025e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e6:	4b0b      	ldr	r3, [pc, #44]	; (8002614 <HAL_RCC_OscConfig+0x2b8>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d121      	bne.n	8002636 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025f2:	4b08      	ldr	r3, [pc, #32]	; (8002614 <HAL_RCC_OscConfig+0x2b8>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a07      	ldr	r2, [pc, #28]	; (8002614 <HAL_RCC_OscConfig+0x2b8>)
 80025f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025fe:	f7fe fa4d 	bl	8000a9c <HAL_GetTick>
 8002602:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002604:	e011      	b.n	800262a <HAL_RCC_OscConfig+0x2ce>
 8002606:	bf00      	nop
 8002608:	40023800 	.word	0x40023800
 800260c:	42470000 	.word	0x42470000
 8002610:	42470e80 	.word	0x42470e80
 8002614:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002618:	f7fe fa40 	bl	8000a9c <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e0fd      	b.n	8002826 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800262a:	4b81      	ldr	r3, [pc, #516]	; (8002830 <HAL_RCC_OscConfig+0x4d4>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002632:	2b00      	cmp	r3, #0
 8002634:	d0f0      	beq.n	8002618 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d106      	bne.n	800264c <HAL_RCC_OscConfig+0x2f0>
 800263e:	4b7d      	ldr	r3, [pc, #500]	; (8002834 <HAL_RCC_OscConfig+0x4d8>)
 8002640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002642:	4a7c      	ldr	r2, [pc, #496]	; (8002834 <HAL_RCC_OscConfig+0x4d8>)
 8002644:	f043 0301 	orr.w	r3, r3, #1
 8002648:	6713      	str	r3, [r2, #112]	; 0x70
 800264a:	e01c      	b.n	8002686 <HAL_RCC_OscConfig+0x32a>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	2b05      	cmp	r3, #5
 8002652:	d10c      	bne.n	800266e <HAL_RCC_OscConfig+0x312>
 8002654:	4b77      	ldr	r3, [pc, #476]	; (8002834 <HAL_RCC_OscConfig+0x4d8>)
 8002656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002658:	4a76      	ldr	r2, [pc, #472]	; (8002834 <HAL_RCC_OscConfig+0x4d8>)
 800265a:	f043 0304 	orr.w	r3, r3, #4
 800265e:	6713      	str	r3, [r2, #112]	; 0x70
 8002660:	4b74      	ldr	r3, [pc, #464]	; (8002834 <HAL_RCC_OscConfig+0x4d8>)
 8002662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002664:	4a73      	ldr	r2, [pc, #460]	; (8002834 <HAL_RCC_OscConfig+0x4d8>)
 8002666:	f043 0301 	orr.w	r3, r3, #1
 800266a:	6713      	str	r3, [r2, #112]	; 0x70
 800266c:	e00b      	b.n	8002686 <HAL_RCC_OscConfig+0x32a>
 800266e:	4b71      	ldr	r3, [pc, #452]	; (8002834 <HAL_RCC_OscConfig+0x4d8>)
 8002670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002672:	4a70      	ldr	r2, [pc, #448]	; (8002834 <HAL_RCC_OscConfig+0x4d8>)
 8002674:	f023 0301 	bic.w	r3, r3, #1
 8002678:	6713      	str	r3, [r2, #112]	; 0x70
 800267a:	4b6e      	ldr	r3, [pc, #440]	; (8002834 <HAL_RCC_OscConfig+0x4d8>)
 800267c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800267e:	4a6d      	ldr	r2, [pc, #436]	; (8002834 <HAL_RCC_OscConfig+0x4d8>)
 8002680:	f023 0304 	bic.w	r3, r3, #4
 8002684:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d015      	beq.n	80026ba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800268e:	f7fe fa05 	bl	8000a9c <HAL_GetTick>
 8002692:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002694:	e00a      	b.n	80026ac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002696:	f7fe fa01 	bl	8000a9c <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d901      	bls.n	80026ac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e0bc      	b.n	8002826 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ac:	4b61      	ldr	r3, [pc, #388]	; (8002834 <HAL_RCC_OscConfig+0x4d8>)
 80026ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d0ee      	beq.n	8002696 <HAL_RCC_OscConfig+0x33a>
 80026b8:	e014      	b.n	80026e4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ba:	f7fe f9ef 	bl	8000a9c <HAL_GetTick>
 80026be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026c0:	e00a      	b.n	80026d8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026c2:	f7fe f9eb 	bl	8000a9c <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e0a6      	b.n	8002826 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026d8:	4b56      	ldr	r3, [pc, #344]	; (8002834 <HAL_RCC_OscConfig+0x4d8>)
 80026da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1ee      	bne.n	80026c2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026e4:	7dfb      	ldrb	r3, [r7, #23]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d105      	bne.n	80026f6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026ea:	4b52      	ldr	r3, [pc, #328]	; (8002834 <HAL_RCC_OscConfig+0x4d8>)
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	4a51      	ldr	r2, [pc, #324]	; (8002834 <HAL_RCC_OscConfig+0x4d8>)
 80026f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f000 8092 	beq.w	8002824 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002700:	4b4c      	ldr	r3, [pc, #304]	; (8002834 <HAL_RCC_OscConfig+0x4d8>)
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f003 030c 	and.w	r3, r3, #12
 8002708:	2b08      	cmp	r3, #8
 800270a:	d05c      	beq.n	80027c6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	2b02      	cmp	r3, #2
 8002712:	d141      	bne.n	8002798 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002714:	4b48      	ldr	r3, [pc, #288]	; (8002838 <HAL_RCC_OscConfig+0x4dc>)
 8002716:	2200      	movs	r2, #0
 8002718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800271a:	f7fe f9bf 	bl	8000a9c <HAL_GetTick>
 800271e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002720:	e008      	b.n	8002734 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002722:	f7fe f9bb 	bl	8000a9c <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d901      	bls.n	8002734 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e078      	b.n	8002826 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002734:	4b3f      	ldr	r3, [pc, #252]	; (8002834 <HAL_RCC_OscConfig+0x4d8>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d1f0      	bne.n	8002722 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	69da      	ldr	r2, [r3, #28]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	431a      	orrs	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274e:	019b      	lsls	r3, r3, #6
 8002750:	431a      	orrs	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002756:	085b      	lsrs	r3, r3, #1
 8002758:	3b01      	subs	r3, #1
 800275a:	041b      	lsls	r3, r3, #16
 800275c:	431a      	orrs	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002762:	061b      	lsls	r3, r3, #24
 8002764:	4933      	ldr	r1, [pc, #204]	; (8002834 <HAL_RCC_OscConfig+0x4d8>)
 8002766:	4313      	orrs	r3, r2
 8002768:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800276a:	4b33      	ldr	r3, [pc, #204]	; (8002838 <HAL_RCC_OscConfig+0x4dc>)
 800276c:	2201      	movs	r2, #1
 800276e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002770:	f7fe f994 	bl	8000a9c <HAL_GetTick>
 8002774:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002778:	f7fe f990 	bl	8000a9c <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e04d      	b.n	8002826 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800278a:	4b2a      	ldr	r3, [pc, #168]	; (8002834 <HAL_RCC_OscConfig+0x4d8>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d0f0      	beq.n	8002778 <HAL_RCC_OscConfig+0x41c>
 8002796:	e045      	b.n	8002824 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002798:	4b27      	ldr	r3, [pc, #156]	; (8002838 <HAL_RCC_OscConfig+0x4dc>)
 800279a:	2200      	movs	r2, #0
 800279c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800279e:	f7fe f97d 	bl	8000a9c <HAL_GetTick>
 80027a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027a4:	e008      	b.n	80027b8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027a6:	f7fe f979 	bl	8000a9c <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e036      	b.n	8002826 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027b8:	4b1e      	ldr	r3, [pc, #120]	; (8002834 <HAL_RCC_OscConfig+0x4d8>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1f0      	bne.n	80027a6 <HAL_RCC_OscConfig+0x44a>
 80027c4:	e02e      	b.n	8002824 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d101      	bne.n	80027d2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e029      	b.n	8002826 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027d2:	4b18      	ldr	r3, [pc, #96]	; (8002834 <HAL_RCC_OscConfig+0x4d8>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d11c      	bne.n	8002820 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d115      	bne.n	8002820 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027fa:	4013      	ands	r3, r2
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002800:	4293      	cmp	r3, r2
 8002802:	d10d      	bne.n	8002820 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800280e:	429a      	cmp	r2, r3
 8002810:	d106      	bne.n	8002820 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800281c:	429a      	cmp	r2, r3
 800281e:	d001      	beq.n	8002824 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e000      	b.n	8002826 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3718      	adds	r7, #24
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	40007000 	.word	0x40007000
 8002834:	40023800 	.word	0x40023800
 8002838:	42470060 	.word	0x42470060

0800283c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d101      	bne.n	8002850 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e0cc      	b.n	80029ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002850:	4b68      	ldr	r3, [pc, #416]	; (80029f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 030f 	and.w	r3, r3, #15
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	429a      	cmp	r2, r3
 800285c:	d90c      	bls.n	8002878 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800285e:	4b65      	ldr	r3, [pc, #404]	; (80029f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	b2d2      	uxtb	r2, r2
 8002864:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002866:	4b63      	ldr	r3, [pc, #396]	; (80029f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 030f 	and.w	r3, r3, #15
 800286e:	683a      	ldr	r2, [r7, #0]
 8002870:	429a      	cmp	r2, r3
 8002872:	d001      	beq.n	8002878 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e0b8      	b.n	80029ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d020      	beq.n	80028c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0304 	and.w	r3, r3, #4
 800288c:	2b00      	cmp	r3, #0
 800288e:	d005      	beq.n	800289c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002890:	4b59      	ldr	r3, [pc, #356]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	4a58      	ldr	r2, [pc, #352]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002896:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800289a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0308 	and.w	r3, r3, #8
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d005      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028a8:	4b53      	ldr	r3, [pc, #332]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	4a52      	ldr	r2, [pc, #328]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 80028ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028b4:	4b50      	ldr	r3, [pc, #320]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	494d      	ldr	r1, [pc, #308]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d044      	beq.n	800295c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d107      	bne.n	80028ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028da:	4b47      	ldr	r3, [pc, #284]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d119      	bne.n	800291a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e07f      	b.n	80029ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d003      	beq.n	80028fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028f6:	2b03      	cmp	r3, #3
 80028f8:	d107      	bne.n	800290a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028fa:	4b3f      	ldr	r3, [pc, #252]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d109      	bne.n	800291a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e06f      	b.n	80029ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800290a:	4b3b      	ldr	r3, [pc, #236]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e067      	b.n	80029ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800291a:	4b37      	ldr	r3, [pc, #220]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f023 0203 	bic.w	r2, r3, #3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	4934      	ldr	r1, [pc, #208]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002928:	4313      	orrs	r3, r2
 800292a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800292c:	f7fe f8b6 	bl	8000a9c <HAL_GetTick>
 8002930:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002932:	e00a      	b.n	800294a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002934:	f7fe f8b2 	bl	8000a9c <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002942:	4293      	cmp	r3, r2
 8002944:	d901      	bls.n	800294a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e04f      	b.n	80029ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800294a:	4b2b      	ldr	r3, [pc, #172]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f003 020c 	and.w	r2, r3, #12
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	429a      	cmp	r2, r3
 800295a:	d1eb      	bne.n	8002934 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800295c:	4b25      	ldr	r3, [pc, #148]	; (80029f4 <HAL_RCC_ClockConfig+0x1b8>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 030f 	and.w	r3, r3, #15
 8002964:	683a      	ldr	r2, [r7, #0]
 8002966:	429a      	cmp	r2, r3
 8002968:	d20c      	bcs.n	8002984 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800296a:	4b22      	ldr	r3, [pc, #136]	; (80029f4 <HAL_RCC_ClockConfig+0x1b8>)
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	b2d2      	uxtb	r2, r2
 8002970:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002972:	4b20      	ldr	r3, [pc, #128]	; (80029f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 030f 	and.w	r3, r3, #15
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	429a      	cmp	r2, r3
 800297e:	d001      	beq.n	8002984 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e032      	b.n	80029ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0304 	and.w	r3, r3, #4
 800298c:	2b00      	cmp	r3, #0
 800298e:	d008      	beq.n	80029a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002990:	4b19      	ldr	r3, [pc, #100]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	4916      	ldr	r1, [pc, #88]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0308 	and.w	r3, r3, #8
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d009      	beq.n	80029c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029ae:	4b12      	ldr	r3, [pc, #72]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	490e      	ldr	r1, [pc, #56]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029c2:	f000 f82d 	bl	8002a20 <HAL_RCC_GetSysClockFreq>
 80029c6:	4601      	mov	r1, r0
 80029c8:	4b0b      	ldr	r3, [pc, #44]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	091b      	lsrs	r3, r3, #4
 80029ce:	f003 030f 	and.w	r3, r3, #15
 80029d2:	4a0a      	ldr	r2, [pc, #40]	; (80029fc <HAL_RCC_ClockConfig+0x1c0>)
 80029d4:	5cd3      	ldrb	r3, [r2, r3]
 80029d6:	fa21 f303 	lsr.w	r3, r1, r3
 80029da:	4a09      	ldr	r2, [pc, #36]	; (8002a00 <HAL_RCC_ClockConfig+0x1c4>)
 80029dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029de:	4b09      	ldr	r3, [pc, #36]	; (8002a04 <HAL_RCC_ClockConfig+0x1c8>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7fd ff22 	bl	800082c <HAL_InitTick>

  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	40023c00 	.word	0x40023c00
 80029f8:	40023800 	.word	0x40023800
 80029fc:	080095e0 	.word	0x080095e0
 8002a00:	20000000 	.word	0x20000000
 8002a04:	20000004 	.word	0x20000004

08002a08 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8002a0c:	4b03      	ldr	r3, [pc, #12]	; (8002a1c <HAL_RCC_EnableCSS+0x14>)
 8002a0e:	2201      	movs	r2, #1
 8002a10:	601a      	str	r2, [r3, #0]
}
 8002a12:	bf00      	nop
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr
 8002a1c:	4247004c 	.word	0x4247004c

08002a20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	607b      	str	r3, [r7, #4]
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60fb      	str	r3, [r7, #12]
 8002a2e:	2300      	movs	r3, #0
 8002a30:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002a32:	2300      	movs	r3, #0
 8002a34:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a36:	4b50      	ldr	r3, [pc, #320]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x158>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f003 030c 	and.w	r3, r3, #12
 8002a3e:	2b04      	cmp	r3, #4
 8002a40:	d007      	beq.n	8002a52 <HAL_RCC_GetSysClockFreq+0x32>
 8002a42:	2b08      	cmp	r3, #8
 8002a44:	d008      	beq.n	8002a58 <HAL_RCC_GetSysClockFreq+0x38>
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f040 808d 	bne.w	8002b66 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a4c:	4b4b      	ldr	r3, [pc, #300]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x15c>)
 8002a4e:	60bb      	str	r3, [r7, #8]
       break;
 8002a50:	e08c      	b.n	8002b6c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a52:	4b4b      	ldr	r3, [pc, #300]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a54:	60bb      	str	r3, [r7, #8]
      break;
 8002a56:	e089      	b.n	8002b6c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a58:	4b47      	ldr	r3, [pc, #284]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x158>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a60:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a62:	4b45      	ldr	r3, [pc, #276]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x158>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d023      	beq.n	8002ab6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a6e:	4b42      	ldr	r3, [pc, #264]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x158>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	099b      	lsrs	r3, r3, #6
 8002a74:	f04f 0400 	mov.w	r4, #0
 8002a78:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a7c:	f04f 0200 	mov.w	r2, #0
 8002a80:	ea03 0501 	and.w	r5, r3, r1
 8002a84:	ea04 0602 	and.w	r6, r4, r2
 8002a88:	4a3d      	ldr	r2, [pc, #244]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a8a:	fb02 f106 	mul.w	r1, r2, r6
 8002a8e:	2200      	movs	r2, #0
 8002a90:	fb02 f205 	mul.w	r2, r2, r5
 8002a94:	440a      	add	r2, r1
 8002a96:	493a      	ldr	r1, [pc, #232]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a98:	fba5 0101 	umull	r0, r1, r5, r1
 8002a9c:	1853      	adds	r3, r2, r1
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f04f 0400 	mov.w	r4, #0
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	4623      	mov	r3, r4
 8002aaa:	f7fd fb99 	bl	80001e0 <__aeabi_uldivmod>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	460c      	mov	r4, r1
 8002ab2:	60fb      	str	r3, [r7, #12]
 8002ab4:	e049      	b.n	8002b4a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ab6:	4b30      	ldr	r3, [pc, #192]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x158>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	099b      	lsrs	r3, r3, #6
 8002abc:	f04f 0400 	mov.w	r4, #0
 8002ac0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002ac4:	f04f 0200 	mov.w	r2, #0
 8002ac8:	ea03 0501 	and.w	r5, r3, r1
 8002acc:	ea04 0602 	and.w	r6, r4, r2
 8002ad0:	4629      	mov	r1, r5
 8002ad2:	4632      	mov	r2, r6
 8002ad4:	f04f 0300 	mov.w	r3, #0
 8002ad8:	f04f 0400 	mov.w	r4, #0
 8002adc:	0154      	lsls	r4, r2, #5
 8002ade:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002ae2:	014b      	lsls	r3, r1, #5
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	4622      	mov	r2, r4
 8002ae8:	1b49      	subs	r1, r1, r5
 8002aea:	eb62 0206 	sbc.w	r2, r2, r6
 8002aee:	f04f 0300 	mov.w	r3, #0
 8002af2:	f04f 0400 	mov.w	r4, #0
 8002af6:	0194      	lsls	r4, r2, #6
 8002af8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002afc:	018b      	lsls	r3, r1, #6
 8002afe:	1a5b      	subs	r3, r3, r1
 8002b00:	eb64 0402 	sbc.w	r4, r4, r2
 8002b04:	f04f 0100 	mov.w	r1, #0
 8002b08:	f04f 0200 	mov.w	r2, #0
 8002b0c:	00e2      	lsls	r2, r4, #3
 8002b0e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002b12:	00d9      	lsls	r1, r3, #3
 8002b14:	460b      	mov	r3, r1
 8002b16:	4614      	mov	r4, r2
 8002b18:	195b      	adds	r3, r3, r5
 8002b1a:	eb44 0406 	adc.w	r4, r4, r6
 8002b1e:	f04f 0100 	mov.w	r1, #0
 8002b22:	f04f 0200 	mov.w	r2, #0
 8002b26:	02a2      	lsls	r2, r4, #10
 8002b28:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002b2c:	0299      	lsls	r1, r3, #10
 8002b2e:	460b      	mov	r3, r1
 8002b30:	4614      	mov	r4, r2
 8002b32:	4618      	mov	r0, r3
 8002b34:	4621      	mov	r1, r4
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f04f 0400 	mov.w	r4, #0
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	4623      	mov	r3, r4
 8002b40:	f7fd fb4e 	bl	80001e0 <__aeabi_uldivmod>
 8002b44:	4603      	mov	r3, r0
 8002b46:	460c      	mov	r4, r1
 8002b48:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b4a:	4b0b      	ldr	r3, [pc, #44]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x158>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	0c1b      	lsrs	r3, r3, #16
 8002b50:	f003 0303 	and.w	r3, r3, #3
 8002b54:	3301      	adds	r3, #1
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b62:	60bb      	str	r3, [r7, #8]
      break;
 8002b64:	e002      	b.n	8002b6c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b66:	4b05      	ldr	r3, [pc, #20]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x15c>)
 8002b68:	60bb      	str	r3, [r7, #8]
      break;
 8002b6a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b6c:	68bb      	ldr	r3, [r7, #8]
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3714      	adds	r7, #20
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b76:	bf00      	nop
 8002b78:	40023800 	.word	0x40023800
 8002b7c:	00f42400 	.word	0x00f42400
 8002b80:	017d7840 	.word	0x017d7840

08002b84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b88:	4b03      	ldr	r3, [pc, #12]	; (8002b98 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	20000000 	.word	0x20000000

08002b9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ba0:	f7ff fff0 	bl	8002b84 <HAL_RCC_GetHCLKFreq>
 8002ba4:	4601      	mov	r1, r0
 8002ba6:	4b05      	ldr	r3, [pc, #20]	; (8002bbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	0b5b      	lsrs	r3, r3, #13
 8002bac:	f003 0307 	and.w	r3, r3, #7
 8002bb0:	4a03      	ldr	r2, [pc, #12]	; (8002bc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bb2:	5cd3      	ldrb	r3, [r2, r3]
 8002bb4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	40023800 	.word	0x40023800
 8002bc0:	080095f0 	.word	0x080095f0

08002bc4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	220f      	movs	r2, #15
 8002bd2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002bd4:	4b12      	ldr	r3, [pc, #72]	; (8002c20 <HAL_RCC_GetClockConfig+0x5c>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f003 0203 	and.w	r2, r3, #3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002be0:	4b0f      	ldr	r3, [pc, #60]	; (8002c20 <HAL_RCC_GetClockConfig+0x5c>)
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002bec:	4b0c      	ldr	r3, [pc, #48]	; (8002c20 <HAL_RCC_GetClockConfig+0x5c>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002bf8:	4b09      	ldr	r3, [pc, #36]	; (8002c20 <HAL_RCC_GetClockConfig+0x5c>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	08db      	lsrs	r3, r3, #3
 8002bfe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002c06:	4b07      	ldr	r3, [pc, #28]	; (8002c24 <HAL_RCC_GetClockConfig+0x60>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 020f 	and.w	r2, r3, #15
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	601a      	str	r2, [r3, #0]
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	40023800 	.word	0x40023800
 8002c24:	40023c00 	.word	0x40023c00

08002c28 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002c2c:	4b06      	ldr	r3, [pc, #24]	; (8002c48 <HAL_RCC_NMI_IRQHandler+0x20>)
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c34:	2b80      	cmp	r3, #128	; 0x80
 8002c36:	d104      	bne.n	8002c42 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8002c38:	f000 f80a 	bl	8002c50 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002c3c:	4b03      	ldr	r3, [pc, #12]	; (8002c4c <HAL_RCC_NMI_IRQHandler+0x24>)
 8002c3e:	2280      	movs	r2, #128	; 0x80
 8002c40:	701a      	strb	r2, [r3, #0]
  }
}
 8002c42:	bf00      	nop
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	4002380e 	.word	0x4002380e

08002c50 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8002c54:	bf00      	nop
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b082      	sub	sp, #8
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d101      	bne.n	8002c70 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e01d      	b.n	8002cac <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d106      	bne.n	8002c8a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f000 f815 	bl	8002cb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2202      	movs	r2, #2
 8002c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	3304      	adds	r3, #4
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	4610      	mov	r0, r2
 8002c9e:	f000 f967 	bl	8002f70 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3708      	adds	r7, #8
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68da      	ldr	r2, [r3, #12]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f042 0201 	orr.w	r2, r2, #1
 8002cde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 0307 	and.w	r3, r3, #7
 8002cea:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2b06      	cmp	r3, #6
 8002cf0:	d007      	beq.n	8002d02 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f042 0201 	orr.w	r2, r2, #1
 8002d00:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3714      	adds	r7, #20
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d122      	bne.n	8002d6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d11b      	bne.n	8002d6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f06f 0202 	mvn.w	r2, #2
 8002d3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	f003 0303 	and.w	r3, r3, #3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 f8ee 	bl	8002f34 <HAL_TIM_IC_CaptureCallback>
 8002d58:	e005      	b.n	8002d66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 f8e0 	bl	8002f20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 f8f1 	bl	8002f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	f003 0304 	and.w	r3, r3, #4
 8002d76:	2b04      	cmp	r3, #4
 8002d78:	d122      	bne.n	8002dc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	f003 0304 	and.w	r3, r3, #4
 8002d84:	2b04      	cmp	r3, #4
 8002d86:	d11b      	bne.n	8002dc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f06f 0204 	mvn.w	r2, #4
 8002d90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2202      	movs	r2, #2
 8002d96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d003      	beq.n	8002dae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 f8c4 	bl	8002f34 <HAL_TIM_IC_CaptureCallback>
 8002dac:	e005      	b.n	8002dba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 f8b6 	bl	8002f20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 f8c7 	bl	8002f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	f003 0308 	and.w	r3, r3, #8
 8002dca:	2b08      	cmp	r3, #8
 8002dcc:	d122      	bne.n	8002e14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	f003 0308 	and.w	r3, r3, #8
 8002dd8:	2b08      	cmp	r3, #8
 8002dda:	d11b      	bne.n	8002e14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f06f 0208 	mvn.w	r2, #8
 8002de4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2204      	movs	r2, #4
 8002dea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	69db      	ldr	r3, [r3, #28]
 8002df2:	f003 0303 	and.w	r3, r3, #3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d003      	beq.n	8002e02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 f89a 	bl	8002f34 <HAL_TIM_IC_CaptureCallback>
 8002e00:	e005      	b.n	8002e0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 f88c 	bl	8002f20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f000 f89d 	bl	8002f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	f003 0310 	and.w	r3, r3, #16
 8002e1e:	2b10      	cmp	r3, #16
 8002e20:	d122      	bne.n	8002e68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	f003 0310 	and.w	r3, r3, #16
 8002e2c:	2b10      	cmp	r3, #16
 8002e2e:	d11b      	bne.n	8002e68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f06f 0210 	mvn.w	r2, #16
 8002e38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2208      	movs	r2, #8
 8002e3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d003      	beq.n	8002e56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 f870 	bl	8002f34 <HAL_TIM_IC_CaptureCallback>
 8002e54:	e005      	b.n	8002e62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 f862 	bl	8002f20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f000 f873 	bl	8002f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d10e      	bne.n	8002e94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d107      	bne.n	8002e94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f06f 0201 	mvn.w	r2, #1
 8002e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f7fd fc8a 	bl	80007a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e9e:	2b80      	cmp	r3, #128	; 0x80
 8002ea0:	d10e      	bne.n	8002ec0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eac:	2b80      	cmp	r3, #128	; 0x80
 8002eae:	d107      	bne.n	8002ec0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002eb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 f8e2 	bl	8003084 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eca:	2b40      	cmp	r3, #64	; 0x40
 8002ecc:	d10e      	bne.n	8002eec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed8:	2b40      	cmp	r3, #64	; 0x40
 8002eda:	d107      	bne.n	8002eec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 f838 	bl	8002f5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	f003 0320 	and.w	r3, r3, #32
 8002ef6:	2b20      	cmp	r3, #32
 8002ef8:	d10e      	bne.n	8002f18 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	f003 0320 	and.w	r3, r3, #32
 8002f04:	2b20      	cmp	r3, #32
 8002f06:	d107      	bne.n	8002f18 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f06f 0220 	mvn.w	r2, #32
 8002f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 f8ac 	bl	8003070 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f18:	bf00      	nop
 8002f1a:	3708      	adds	r7, #8
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f28:	bf00      	nop
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a34      	ldr	r2, [pc, #208]	; (8003054 <TIM_Base_SetConfig+0xe4>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d00f      	beq.n	8002fa8 <TIM_Base_SetConfig+0x38>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f8e:	d00b      	beq.n	8002fa8 <TIM_Base_SetConfig+0x38>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a31      	ldr	r2, [pc, #196]	; (8003058 <TIM_Base_SetConfig+0xe8>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d007      	beq.n	8002fa8 <TIM_Base_SetConfig+0x38>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a30      	ldr	r2, [pc, #192]	; (800305c <TIM_Base_SetConfig+0xec>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d003      	beq.n	8002fa8 <TIM_Base_SetConfig+0x38>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a2f      	ldr	r2, [pc, #188]	; (8003060 <TIM_Base_SetConfig+0xf0>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d108      	bne.n	8002fba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a25      	ldr	r2, [pc, #148]	; (8003054 <TIM_Base_SetConfig+0xe4>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d01b      	beq.n	8002ffa <TIM_Base_SetConfig+0x8a>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fc8:	d017      	beq.n	8002ffa <TIM_Base_SetConfig+0x8a>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a22      	ldr	r2, [pc, #136]	; (8003058 <TIM_Base_SetConfig+0xe8>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d013      	beq.n	8002ffa <TIM_Base_SetConfig+0x8a>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a21      	ldr	r2, [pc, #132]	; (800305c <TIM_Base_SetConfig+0xec>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d00f      	beq.n	8002ffa <TIM_Base_SetConfig+0x8a>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a20      	ldr	r2, [pc, #128]	; (8003060 <TIM_Base_SetConfig+0xf0>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d00b      	beq.n	8002ffa <TIM_Base_SetConfig+0x8a>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a1f      	ldr	r2, [pc, #124]	; (8003064 <TIM_Base_SetConfig+0xf4>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d007      	beq.n	8002ffa <TIM_Base_SetConfig+0x8a>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a1e      	ldr	r2, [pc, #120]	; (8003068 <TIM_Base_SetConfig+0xf8>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d003      	beq.n	8002ffa <TIM_Base_SetConfig+0x8a>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a1d      	ldr	r2, [pc, #116]	; (800306c <TIM_Base_SetConfig+0xfc>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d108      	bne.n	800300c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003000:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	4313      	orrs	r3, r2
 800300a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	4313      	orrs	r3, r2
 8003018:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	689a      	ldr	r2, [r3, #8]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a08      	ldr	r2, [pc, #32]	; (8003054 <TIM_Base_SetConfig+0xe4>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d103      	bne.n	8003040 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	691a      	ldr	r2, [r3, #16]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	615a      	str	r2, [r3, #20]
}
 8003046:	bf00      	nop
 8003048:	3714      	adds	r7, #20
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	40010000 	.word	0x40010000
 8003058:	40000400 	.word	0x40000400
 800305c:	40000800 	.word	0x40000800
 8003060:	40000c00 	.word	0x40000c00
 8003064:	40014000 	.word	0x40014000
 8003068:	40014400 	.word	0x40014400
 800306c:	40014800 	.word	0x40014800

08003070 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003078:	bf00      	nop
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800308c:	bf00      	nop
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003098:	b084      	sub	sp, #16
 800309a:	b580      	push	{r7, lr}
 800309c:	b084      	sub	sp, #16
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
 80030a2:	f107 001c 	add.w	r0, r7, #28
 80030a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80030aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d122      	bne.n	80030f6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80030c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80030d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d105      	bne.n	80030ea <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f001 fac6 	bl	800467c <USB_CoreReset>
 80030f0:	4603      	mov	r3, r0
 80030f2:	73fb      	strb	r3, [r7, #15]
 80030f4:	e01a      	b.n	800312c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f001 faba 	bl	800467c <USB_CoreReset>
 8003108:	4603      	mov	r3, r0
 800310a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800310c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800310e:	2b00      	cmp	r3, #0
 8003110:	d106      	bne.n	8003120 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003116:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	639a      	str	r2, [r3, #56]	; 0x38
 800311e:	e005      	b.n	800312c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003124:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800312c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800312e:	2b01      	cmp	r3, #1
 8003130:	d10b      	bne.n	800314a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f043 0206 	orr.w	r2, r3, #6
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f043 0220 	orr.w	r2, r3, #32
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800314a:	7bfb      	ldrb	r3, [r7, #15]
}
 800314c:	4618      	mov	r0, r3
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003156:	b004      	add	sp, #16
 8003158:	4770      	bx	lr
	...

0800315c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800315c:	b480      	push	{r7}
 800315e:	b087      	sub	sp, #28
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	4613      	mov	r3, r2
 8003168:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800316a:	79fb      	ldrb	r3, [r7, #7]
 800316c:	2b02      	cmp	r3, #2
 800316e:	d165      	bne.n	800323c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	4a41      	ldr	r2, [pc, #260]	; (8003278 <USB_SetTurnaroundTime+0x11c>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d906      	bls.n	8003186 <USB_SetTurnaroundTime+0x2a>
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	4a40      	ldr	r2, [pc, #256]	; (800327c <USB_SetTurnaroundTime+0x120>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d802      	bhi.n	8003186 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003180:	230f      	movs	r3, #15
 8003182:	617b      	str	r3, [r7, #20]
 8003184:	e062      	b.n	800324c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	4a3c      	ldr	r2, [pc, #240]	; (800327c <USB_SetTurnaroundTime+0x120>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d906      	bls.n	800319c <USB_SetTurnaroundTime+0x40>
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	4a3b      	ldr	r2, [pc, #236]	; (8003280 <USB_SetTurnaroundTime+0x124>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d802      	bhi.n	800319c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003196:	230e      	movs	r3, #14
 8003198:	617b      	str	r3, [r7, #20]
 800319a:	e057      	b.n	800324c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	4a38      	ldr	r2, [pc, #224]	; (8003280 <USB_SetTurnaroundTime+0x124>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d906      	bls.n	80031b2 <USB_SetTurnaroundTime+0x56>
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	4a37      	ldr	r2, [pc, #220]	; (8003284 <USB_SetTurnaroundTime+0x128>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d802      	bhi.n	80031b2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80031ac:	230d      	movs	r3, #13
 80031ae:	617b      	str	r3, [r7, #20]
 80031b0:	e04c      	b.n	800324c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	4a33      	ldr	r2, [pc, #204]	; (8003284 <USB_SetTurnaroundTime+0x128>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d906      	bls.n	80031c8 <USB_SetTurnaroundTime+0x6c>
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	4a32      	ldr	r2, [pc, #200]	; (8003288 <USB_SetTurnaroundTime+0x12c>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d802      	bhi.n	80031c8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80031c2:	230c      	movs	r3, #12
 80031c4:	617b      	str	r3, [r7, #20]
 80031c6:	e041      	b.n	800324c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	4a2f      	ldr	r2, [pc, #188]	; (8003288 <USB_SetTurnaroundTime+0x12c>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d906      	bls.n	80031de <USB_SetTurnaroundTime+0x82>
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	4a2e      	ldr	r2, [pc, #184]	; (800328c <USB_SetTurnaroundTime+0x130>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d802      	bhi.n	80031de <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80031d8:	230b      	movs	r3, #11
 80031da:	617b      	str	r3, [r7, #20]
 80031dc:	e036      	b.n	800324c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	4a2a      	ldr	r2, [pc, #168]	; (800328c <USB_SetTurnaroundTime+0x130>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d906      	bls.n	80031f4 <USB_SetTurnaroundTime+0x98>
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	4a29      	ldr	r2, [pc, #164]	; (8003290 <USB_SetTurnaroundTime+0x134>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d802      	bhi.n	80031f4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80031ee:	230a      	movs	r3, #10
 80031f0:	617b      	str	r3, [r7, #20]
 80031f2:	e02b      	b.n	800324c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	4a26      	ldr	r2, [pc, #152]	; (8003290 <USB_SetTurnaroundTime+0x134>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d906      	bls.n	800320a <USB_SetTurnaroundTime+0xae>
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	4a25      	ldr	r2, [pc, #148]	; (8003294 <USB_SetTurnaroundTime+0x138>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d802      	bhi.n	800320a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003204:	2309      	movs	r3, #9
 8003206:	617b      	str	r3, [r7, #20]
 8003208:	e020      	b.n	800324c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	4a21      	ldr	r2, [pc, #132]	; (8003294 <USB_SetTurnaroundTime+0x138>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d906      	bls.n	8003220 <USB_SetTurnaroundTime+0xc4>
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	4a20      	ldr	r2, [pc, #128]	; (8003298 <USB_SetTurnaroundTime+0x13c>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d802      	bhi.n	8003220 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800321a:	2308      	movs	r3, #8
 800321c:	617b      	str	r3, [r7, #20]
 800321e:	e015      	b.n	800324c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	4a1d      	ldr	r2, [pc, #116]	; (8003298 <USB_SetTurnaroundTime+0x13c>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d906      	bls.n	8003236 <USB_SetTurnaroundTime+0xda>
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	4a1c      	ldr	r2, [pc, #112]	; (800329c <USB_SetTurnaroundTime+0x140>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d802      	bhi.n	8003236 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003230:	2307      	movs	r3, #7
 8003232:	617b      	str	r3, [r7, #20]
 8003234:	e00a      	b.n	800324c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003236:	2306      	movs	r3, #6
 8003238:	617b      	str	r3, [r7, #20]
 800323a:	e007      	b.n	800324c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800323c:	79fb      	ldrb	r3, [r7, #7]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d102      	bne.n	8003248 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003242:	2309      	movs	r3, #9
 8003244:	617b      	str	r3, [r7, #20]
 8003246:	e001      	b.n	800324c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003248:	2309      	movs	r3, #9
 800324a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	68da      	ldr	r2, [r3, #12]
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	029b      	lsls	r3, r3, #10
 8003260:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003264:	431a      	orrs	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	371c      	adds	r7, #28
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr
 8003278:	00d8acbf 	.word	0x00d8acbf
 800327c:	00e4e1bf 	.word	0x00e4e1bf
 8003280:	00f423ff 	.word	0x00f423ff
 8003284:	0106737f 	.word	0x0106737f
 8003288:	011a499f 	.word	0x011a499f
 800328c:	01312cff 	.word	0x01312cff
 8003290:	014ca43f 	.word	0x014ca43f
 8003294:	016e35ff 	.word	0x016e35ff
 8003298:	01a6ab1f 	.word	0x01a6ab1f
 800329c:	01e847ff 	.word	0x01e847ff

080032a0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f043 0201 	orr.w	r2, r3, #1
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr

080032c2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80032c2:	b480      	push	{r7}
 80032c4:	b083      	sub	sp, #12
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f023 0201 	bic.w	r2, r3, #1
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	460b      	mov	r3, r1
 80032ee:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80032fc:	78fb      	ldrb	r3, [r7, #3]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d106      	bne.n	8003310 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	60da      	str	r2, [r3, #12]
 800330e:	e00b      	b.n	8003328 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003310:	78fb      	ldrb	r3, [r7, #3]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d106      	bne.n	8003324 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	60da      	str	r2, [r3, #12]
 8003322:	e001      	b.n	8003328 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e003      	b.n	8003330 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003328:	2032      	movs	r0, #50	; 0x32
 800332a:	f7fd fbc3 	bl	8000ab4 <HAL_Delay>

  return HAL_OK;
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	3708      	adds	r7, #8
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003338:	b084      	sub	sp, #16
 800333a:	b580      	push	{r7, lr}
 800333c:	b086      	sub	sp, #24
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
 8003342:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003346:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800334a:	2300      	movs	r3, #0
 800334c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003352:	2300      	movs	r3, #0
 8003354:	613b      	str	r3, [r7, #16]
 8003356:	e009      	b.n	800336c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	3340      	adds	r3, #64	; 0x40
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4413      	add	r3, r2
 8003362:	2200      	movs	r2, #0
 8003364:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	3301      	adds	r3, #1
 800336a:	613b      	str	r3, [r7, #16]
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	2b0e      	cmp	r3, #14
 8003370:	d9f2      	bls.n	8003358 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003372:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003374:	2b00      	cmp	r3, #0
 8003376:	d11c      	bne.n	80033b2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003386:	f043 0302 	orr.w	r3, r3, #2
 800338a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003390:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	639a      	str	r2, [r3, #56]	; 0x38
 80033b0:	e00b      	b.n	80033ca <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80033d0:	461a      	mov	r2, r3
 80033d2:	2300      	movs	r3, #0
 80033d4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033dc:	4619      	mov	r1, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033e4:	461a      	mov	r2, r3
 80033e6:	680b      	ldr	r3, [r1, #0]
 80033e8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80033ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d10c      	bne.n	800340a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80033f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d104      	bne.n	8003400 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80033f6:	2100      	movs	r1, #0
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f000 f949 	bl	8003690 <USB_SetDevSpeed>
 80033fe:	e008      	b.n	8003412 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003400:	2101      	movs	r1, #1
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 f944 	bl	8003690 <USB_SetDevSpeed>
 8003408:	e003      	b.n	8003412 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800340a:	2103      	movs	r1, #3
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 f93f 	bl	8003690 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003412:	2110      	movs	r1, #16
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 f8f3 	bl	8003600 <USB_FlushTxFifo>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d001      	beq.n	8003424 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 f911 	bl	800364c <USB_FlushRxFifo>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d001      	beq.n	8003434 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800343a:	461a      	mov	r2, r3
 800343c:	2300      	movs	r3, #0
 800343e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003446:	461a      	mov	r2, r3
 8003448:	2300      	movs	r3, #0
 800344a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003452:	461a      	mov	r2, r3
 8003454:	2300      	movs	r3, #0
 8003456:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003458:	2300      	movs	r3, #0
 800345a:	613b      	str	r3, [r7, #16]
 800345c:	e043      	b.n	80034e6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	015a      	lsls	r2, r3, #5
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	4413      	add	r3, r2
 8003466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003470:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003474:	d118      	bne.n	80034a8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d10a      	bne.n	8003492 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	015a      	lsls	r2, r3, #5
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	4413      	add	r3, r2
 8003484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003488:	461a      	mov	r2, r3
 800348a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800348e:	6013      	str	r3, [r2, #0]
 8003490:	e013      	b.n	80034ba <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	015a      	lsls	r2, r3, #5
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	4413      	add	r3, r2
 800349a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800349e:	461a      	mov	r2, r3
 80034a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80034a4:	6013      	str	r3, [r2, #0]
 80034a6:	e008      	b.n	80034ba <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	015a      	lsls	r2, r3, #5
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	4413      	add	r3, r2
 80034b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034b4:	461a      	mov	r2, r3
 80034b6:	2300      	movs	r3, #0
 80034b8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	015a      	lsls	r2, r3, #5
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	4413      	add	r3, r2
 80034c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034c6:	461a      	mov	r2, r3
 80034c8:	2300      	movs	r3, #0
 80034ca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	015a      	lsls	r2, r3, #5
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	4413      	add	r3, r2
 80034d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034d8:	461a      	mov	r2, r3
 80034da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80034de:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	3301      	adds	r3, #1
 80034e4:	613b      	str	r3, [r7, #16]
 80034e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d3b7      	bcc.n	800345e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80034ee:	2300      	movs	r3, #0
 80034f0:	613b      	str	r3, [r7, #16]
 80034f2:	e043      	b.n	800357c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	015a      	lsls	r2, r3, #5
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	4413      	add	r3, r2
 80034fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003506:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800350a:	d118      	bne.n	800353e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10a      	bne.n	8003528 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	015a      	lsls	r2, r3, #5
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	4413      	add	r3, r2
 800351a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800351e:	461a      	mov	r2, r3
 8003520:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003524:	6013      	str	r3, [r2, #0]
 8003526:	e013      	b.n	8003550 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	015a      	lsls	r2, r3, #5
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	4413      	add	r3, r2
 8003530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003534:	461a      	mov	r2, r3
 8003536:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800353a:	6013      	str	r3, [r2, #0]
 800353c:	e008      	b.n	8003550 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	015a      	lsls	r2, r3, #5
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	4413      	add	r3, r2
 8003546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800354a:	461a      	mov	r2, r3
 800354c:	2300      	movs	r3, #0
 800354e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	015a      	lsls	r2, r3, #5
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	4413      	add	r3, r2
 8003558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800355c:	461a      	mov	r2, r3
 800355e:	2300      	movs	r3, #0
 8003560:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	015a      	lsls	r2, r3, #5
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	4413      	add	r3, r2
 800356a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800356e:	461a      	mov	r2, r3
 8003570:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003574:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	3301      	adds	r3, #1
 800357a:	613b      	str	r3, [r7, #16]
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	429a      	cmp	r2, r3
 8003582:	d3b7      	bcc.n	80034f4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003592:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003596:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80035a4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80035a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d105      	bne.n	80035b8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	f043 0210 	orr.w	r2, r3, #16
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	699a      	ldr	r2, [r3, #24]
 80035bc:	4b0f      	ldr	r3, [pc, #60]	; (80035fc <USB_DevInit+0x2c4>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80035c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d005      	beq.n	80035d6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	f043 0208 	orr.w	r2, r3, #8
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80035d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d107      	bne.n	80035ec <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80035e4:	f043 0304 	orr.w	r3, r3, #4
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80035ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3718      	adds	r7, #24
 80035f2:	46bd      	mov	sp, r7
 80035f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80035f8:	b004      	add	sp, #16
 80035fa:	4770      	bx	lr
 80035fc:	803c3800 	.word	0x803c3800

08003600 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800360a:	2300      	movs	r3, #0
 800360c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	019b      	lsls	r3, r3, #6
 8003612:	f043 0220 	orr.w	r2, r3, #32
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	3301      	adds	r3, #1
 800361e:	60fb      	str	r3, [r7, #12]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	4a09      	ldr	r2, [pc, #36]	; (8003648 <USB_FlushTxFifo+0x48>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d901      	bls.n	800362c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e006      	b.n	800363a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	f003 0320 	and.w	r3, r3, #32
 8003634:	2b20      	cmp	r3, #32
 8003636:	d0f0      	beq.n	800361a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3714      	adds	r7, #20
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	00030d40 	.word	0x00030d40

0800364c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800364c:	b480      	push	{r7}
 800364e:	b085      	sub	sp, #20
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003654:	2300      	movs	r3, #0
 8003656:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2210      	movs	r2, #16
 800365c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	3301      	adds	r3, #1
 8003662:	60fb      	str	r3, [r7, #12]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	4a09      	ldr	r2, [pc, #36]	; (800368c <USB_FlushRxFifo+0x40>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d901      	bls.n	8003670 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e006      	b.n	800367e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	f003 0310 	and.w	r3, r3, #16
 8003678:	2b10      	cmp	r3, #16
 800367a:	d0f0      	beq.n	800365e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3714      	adds	r7, #20
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	00030d40 	.word	0x00030d40

08003690 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003690:	b480      	push	{r7}
 8003692:	b085      	sub	sp, #20
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	460b      	mov	r3, r1
 800369a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	78fb      	ldrb	r3, [r7, #3]
 80036aa:	68f9      	ldr	r1, [r7, #12]
 80036ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80036b0:	4313      	orrs	r3, r2
 80036b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3714      	adds	r7, #20
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr

080036c2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80036c2:	b480      	push	{r7}
 80036c4:	b087      	sub	sp, #28
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f003 0306 	and.w	r3, r3, #6
 80036da:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d102      	bne.n	80036e8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80036e2:	2300      	movs	r3, #0
 80036e4:	75fb      	strb	r3, [r7, #23]
 80036e6:	e00a      	b.n	80036fe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d002      	beq.n	80036f4 <USB_GetDevSpeed+0x32>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2b06      	cmp	r3, #6
 80036f2:	d102      	bne.n	80036fa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80036f4:	2302      	movs	r3, #2
 80036f6:	75fb      	strb	r3, [r7, #23]
 80036f8:	e001      	b.n	80036fe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80036fa:	230f      	movs	r3, #15
 80036fc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80036fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003700:	4618      	mov	r0, r3
 8003702:	371c      	adds	r7, #28
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	785b      	ldrb	r3, [r3, #1]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d13a      	bne.n	800379e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800372e:	69da      	ldr	r2, [r3, #28]
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	f003 030f 	and.w	r3, r3, #15
 8003738:	2101      	movs	r1, #1
 800373a:	fa01 f303 	lsl.w	r3, r1, r3
 800373e:	b29b      	uxth	r3, r3
 8003740:	68f9      	ldr	r1, [r7, #12]
 8003742:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003746:	4313      	orrs	r3, r2
 8003748:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	015a      	lsls	r2, r3, #5
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	4413      	add	r3, r2
 8003752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d155      	bne.n	800380c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	015a      	lsls	r2, r3, #5
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	4413      	add	r3, r2
 8003768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	78db      	ldrb	r3, [r3, #3]
 800377a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800377c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	059b      	lsls	r3, r3, #22
 8003782:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003784:	4313      	orrs	r3, r2
 8003786:	68ba      	ldr	r2, [r7, #8]
 8003788:	0151      	lsls	r1, r2, #5
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	440a      	add	r2, r1
 800378e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003792:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003796:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800379a:	6013      	str	r3, [r2, #0]
 800379c:	e036      	b.n	800380c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037a4:	69da      	ldr	r2, [r3, #28]
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	f003 030f 	and.w	r3, r3, #15
 80037ae:	2101      	movs	r1, #1
 80037b0:	fa01 f303 	lsl.w	r3, r1, r3
 80037b4:	041b      	lsls	r3, r3, #16
 80037b6:	68f9      	ldr	r1, [r7, #12]
 80037b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80037bc:	4313      	orrs	r3, r2
 80037be:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	015a      	lsls	r2, r3, #5
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	4413      	add	r3, r2
 80037c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d11a      	bne.n	800380c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	015a      	lsls	r2, r3, #5
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	4413      	add	r3, r2
 80037de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	78db      	ldrb	r3, [r3, #3]
 80037f0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80037f2:	430b      	orrs	r3, r1
 80037f4:	4313      	orrs	r3, r2
 80037f6:	68ba      	ldr	r2, [r7, #8]
 80037f8:	0151      	lsls	r1, r2, #5
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	440a      	add	r2, r1
 80037fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003802:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003806:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800380a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3714      	adds	r7, #20
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
	...

0800381c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800381c:	b480      	push	{r7}
 800381e:	b085      	sub	sp, #20
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	785b      	ldrb	r3, [r3, #1]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d161      	bne.n	80038fc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	015a      	lsls	r2, r3, #5
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	4413      	add	r3, r2
 8003840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800384a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800384e:	d11f      	bne.n	8003890 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	015a      	lsls	r2, r3, #5
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	4413      	add	r3, r2
 8003858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68ba      	ldr	r2, [r7, #8]
 8003860:	0151      	lsls	r1, r2, #5
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	440a      	add	r2, r1
 8003866:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800386a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800386e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	015a      	lsls	r2, r3, #5
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	4413      	add	r3, r2
 8003878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68ba      	ldr	r2, [r7, #8]
 8003880:	0151      	lsls	r1, r2, #5
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	440a      	add	r2, r1
 8003886:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800388a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800388e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003896:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	f003 030f 	and.w	r3, r3, #15
 80038a0:	2101      	movs	r1, #1
 80038a2:	fa01 f303 	lsl.w	r3, r1, r3
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	43db      	mvns	r3, r3
 80038aa:	68f9      	ldr	r1, [r7, #12]
 80038ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038b0:	4013      	ands	r3, r2
 80038b2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ba:	69da      	ldr	r2, [r3, #28]
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	f003 030f 	and.w	r3, r3, #15
 80038c4:	2101      	movs	r1, #1
 80038c6:	fa01 f303 	lsl.w	r3, r1, r3
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	43db      	mvns	r3, r3
 80038ce:	68f9      	ldr	r1, [r7, #12]
 80038d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038d4:	4013      	ands	r3, r2
 80038d6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	015a      	lsls	r2, r3, #5
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	4413      	add	r3, r2
 80038e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	0159      	lsls	r1, r3, #5
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	440b      	add	r3, r1
 80038ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038f2:	4619      	mov	r1, r3
 80038f4:	4b35      	ldr	r3, [pc, #212]	; (80039cc <USB_DeactivateEndpoint+0x1b0>)
 80038f6:	4013      	ands	r3, r2
 80038f8:	600b      	str	r3, [r1, #0]
 80038fa:	e060      	b.n	80039be <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	015a      	lsls	r2, r3, #5
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	4413      	add	r3, r2
 8003904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800390e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003912:	d11f      	bne.n	8003954 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	015a      	lsls	r2, r3, #5
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	4413      	add	r3, r2
 800391c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68ba      	ldr	r2, [r7, #8]
 8003924:	0151      	lsls	r1, r2, #5
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	440a      	add	r2, r1
 800392a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800392e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003932:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	015a      	lsls	r2, r3, #5
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	4413      	add	r3, r2
 800393c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	0151      	lsls	r1, r2, #5
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	440a      	add	r2, r1
 800394a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800394e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003952:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800395a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	f003 030f 	and.w	r3, r3, #15
 8003964:	2101      	movs	r1, #1
 8003966:	fa01 f303 	lsl.w	r3, r1, r3
 800396a:	041b      	lsls	r3, r3, #16
 800396c:	43db      	mvns	r3, r3
 800396e:	68f9      	ldr	r1, [r7, #12]
 8003970:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003974:	4013      	ands	r3, r2
 8003976:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800397e:	69da      	ldr	r2, [r3, #28]
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	f003 030f 	and.w	r3, r3, #15
 8003988:	2101      	movs	r1, #1
 800398a:	fa01 f303 	lsl.w	r3, r1, r3
 800398e:	041b      	lsls	r3, r3, #16
 8003990:	43db      	mvns	r3, r3
 8003992:	68f9      	ldr	r1, [r7, #12]
 8003994:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003998:	4013      	ands	r3, r2
 800399a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	015a      	lsls	r2, r3, #5
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	4413      	add	r3, r2
 80039a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	0159      	lsls	r1, r3, #5
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	440b      	add	r3, r1
 80039b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039b6:	4619      	mov	r1, r3
 80039b8:	4b05      	ldr	r3, [pc, #20]	; (80039d0 <USB_DeactivateEndpoint+0x1b4>)
 80039ba:	4013      	ands	r3, r2
 80039bc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3714      	adds	r7, #20
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr
 80039cc:	ec337800 	.word	0xec337800
 80039d0:	eff37800 	.word	0xeff37800

080039d4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b08a      	sub	sp, #40	; 0x28
 80039d8:	af02      	add	r7, sp, #8
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	4613      	mov	r3, r2
 80039e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	785b      	ldrb	r3, [r3, #1]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	f040 815c 	bne.w	8003cae <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d132      	bne.n	8003a64 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	015a      	lsls	r2, r3, #5
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	4413      	add	r3, r2
 8003a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	0151      	lsls	r1, r2, #5
 8003a10:	69fa      	ldr	r2, [r7, #28]
 8003a12:	440a      	add	r2, r1
 8003a14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a18:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003a1c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003a20:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	015a      	lsls	r2, r3, #5
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	4413      	add	r3, r2
 8003a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	0151      	lsls	r1, r2, #5
 8003a34:	69fa      	ldr	r2, [r7, #28]
 8003a36:	440a      	add	r2, r1
 8003a38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a40:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	015a      	lsls	r2, r3, #5
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	4413      	add	r3, r2
 8003a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	0151      	lsls	r1, r2, #5
 8003a54:	69fa      	ldr	r2, [r7, #28]
 8003a56:	440a      	add	r2, r1
 8003a58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a5c:	0cdb      	lsrs	r3, r3, #19
 8003a5e:	04db      	lsls	r3, r3, #19
 8003a60:	6113      	str	r3, [r2, #16]
 8003a62:	e074      	b.n	8003b4e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	015a      	lsls	r2, r3, #5
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	69ba      	ldr	r2, [r7, #24]
 8003a74:	0151      	lsls	r1, r2, #5
 8003a76:	69fa      	ldr	r2, [r7, #28]
 8003a78:	440a      	add	r2, r1
 8003a7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a7e:	0cdb      	lsrs	r3, r3, #19
 8003a80:	04db      	lsls	r3, r3, #19
 8003a82:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	015a      	lsls	r2, r3, #5
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	0151      	lsls	r1, r2, #5
 8003a96:	69fa      	ldr	r2, [r7, #28]
 8003a98:	440a      	add	r2, r1
 8003a9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a9e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003aa2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003aa6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	015a      	lsls	r2, r3, #5
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	4413      	add	r3, r2
 8003ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ab4:	691a      	ldr	r2, [r3, #16]
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	6959      	ldr	r1, [r3, #20]
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	440b      	add	r3, r1
 8003ac0:	1e59      	subs	r1, r3, #1
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003aca:	04d9      	lsls	r1, r3, #19
 8003acc:	4b9d      	ldr	r3, [pc, #628]	; (8003d44 <USB_EPStartXfer+0x370>)
 8003ace:	400b      	ands	r3, r1
 8003ad0:	69b9      	ldr	r1, [r7, #24]
 8003ad2:	0148      	lsls	r0, r1, #5
 8003ad4:	69f9      	ldr	r1, [r7, #28]
 8003ad6:	4401      	add	r1, r0
 8003ad8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003adc:	4313      	orrs	r3, r2
 8003ade:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	015a      	lsls	r2, r3, #5
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aec:	691a      	ldr	r2, [r3, #16]
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003af6:	69b9      	ldr	r1, [r7, #24]
 8003af8:	0148      	lsls	r0, r1, #5
 8003afa:	69f9      	ldr	r1, [r7, #28]
 8003afc:	4401      	add	r1, r0
 8003afe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003b02:	4313      	orrs	r3, r2
 8003b04:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	78db      	ldrb	r3, [r3, #3]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d11f      	bne.n	8003b4e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	015a      	lsls	r2, r3, #5
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	4413      	add	r3, r2
 8003b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	69ba      	ldr	r2, [r7, #24]
 8003b1e:	0151      	lsls	r1, r2, #5
 8003b20:	69fa      	ldr	r2, [r7, #28]
 8003b22:	440a      	add	r2, r1
 8003b24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b28:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003b2c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	015a      	lsls	r2, r3, #5
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	4413      	add	r3, r2
 8003b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	0151      	lsls	r1, r2, #5
 8003b40:	69fa      	ldr	r2, [r7, #28]
 8003b42:	440a      	add	r2, r1
 8003b44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b48:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003b4c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003b4e:	79fb      	ldrb	r3, [r7, #7]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d14b      	bne.n	8003bec <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d009      	beq.n	8003b70 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	015a      	lsls	r2, r3, #5
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	4413      	add	r3, r2
 8003b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b68:	461a      	mov	r2, r3
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	78db      	ldrb	r3, [r3, #3]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d128      	bne.n	8003bca <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d110      	bne.n	8003baa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	015a      	lsls	r2, r3, #5
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	4413      	add	r3, r2
 8003b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	69ba      	ldr	r2, [r7, #24]
 8003b98:	0151      	lsls	r1, r2, #5
 8003b9a:	69fa      	ldr	r2, [r7, #28]
 8003b9c:	440a      	add	r2, r1
 8003b9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ba2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ba6:	6013      	str	r3, [r2, #0]
 8003ba8:	e00f      	b.n	8003bca <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	015a      	lsls	r2, r3, #5
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	69ba      	ldr	r2, [r7, #24]
 8003bba:	0151      	lsls	r1, r2, #5
 8003bbc:	69fa      	ldr	r2, [r7, #28]
 8003bbe:	440a      	add	r2, r1
 8003bc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bc8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	015a      	lsls	r2, r3, #5
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	0151      	lsls	r1, r2, #5
 8003bdc:	69fa      	ldr	r2, [r7, #28]
 8003bde:	440a      	add	r2, r1
 8003be0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003be4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003be8:	6013      	str	r3, [r2, #0]
 8003bea:	e12f      	b.n	8003e4c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	015a      	lsls	r2, r3, #5
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	69ba      	ldr	r2, [r7, #24]
 8003bfc:	0151      	lsls	r1, r2, #5
 8003bfe:	69fa      	ldr	r2, [r7, #28]
 8003c00:	440a      	add	r2, r1
 8003c02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c06:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003c0a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	78db      	ldrb	r3, [r3, #3]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d015      	beq.n	8003c40 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	695b      	ldr	r3, [r3, #20]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f000 8117 	beq.w	8003e4c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	f003 030f 	and.w	r3, r3, #15
 8003c2e:	2101      	movs	r1, #1
 8003c30:	fa01 f303 	lsl.w	r3, r1, r3
 8003c34:	69f9      	ldr	r1, [r7, #28]
 8003c36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	634b      	str	r3, [r1, #52]	; 0x34
 8003c3e:	e105      	b.n	8003e4c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d110      	bne.n	8003c72 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	015a      	lsls	r2, r3, #5
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	4413      	add	r3, r2
 8003c58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	69ba      	ldr	r2, [r7, #24]
 8003c60:	0151      	lsls	r1, r2, #5
 8003c62:	69fa      	ldr	r2, [r7, #28]
 8003c64:	440a      	add	r2, r1
 8003c66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c6a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c6e:	6013      	str	r3, [r2, #0]
 8003c70:	e00f      	b.n	8003c92 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	015a      	lsls	r2, r3, #5
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	4413      	add	r3, r2
 8003c7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	69ba      	ldr	r2, [r7, #24]
 8003c82:	0151      	lsls	r1, r2, #5
 8003c84:	69fa      	ldr	r2, [r7, #28]
 8003c86:	440a      	add	r2, r1
 8003c88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c90:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	68d9      	ldr	r1, [r3, #12]
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	781a      	ldrb	r2, [r3, #0]
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	b298      	uxth	r0, r3
 8003ca0:	79fb      	ldrb	r3, [r7, #7]
 8003ca2:	9300      	str	r3, [sp, #0]
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	f000 fa2b 	bl	8004102 <USB_WritePacket>
 8003cac:	e0ce      	b.n	8003e4c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	015a      	lsls	r2, r3, #5
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	0151      	lsls	r1, r2, #5
 8003cc0:	69fa      	ldr	r2, [r7, #28]
 8003cc2:	440a      	add	r2, r1
 8003cc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cc8:	0cdb      	lsrs	r3, r3, #19
 8003cca:	04db      	lsls	r3, r3, #19
 8003ccc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	015a      	lsls	r2, r3, #5
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	0151      	lsls	r1, r2, #5
 8003ce0:	69fa      	ldr	r2, [r7, #28]
 8003ce2:	440a      	add	r2, r1
 8003ce4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ce8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003cec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003cf0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d126      	bne.n	8003d48 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	015a      	lsls	r2, r3, #5
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	4413      	add	r3, r2
 8003d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d06:	691a      	ldr	r2, [r3, #16]
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d10:	69b9      	ldr	r1, [r7, #24]
 8003d12:	0148      	lsls	r0, r1, #5
 8003d14:	69f9      	ldr	r1, [r7, #28]
 8003d16:	4401      	add	r1, r0
 8003d18:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	015a      	lsls	r2, r3, #5
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	4413      	add	r3, r2
 8003d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	0151      	lsls	r1, r2, #5
 8003d32:	69fa      	ldr	r2, [r7, #28]
 8003d34:	440a      	add	r2, r1
 8003d36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d3e:	6113      	str	r3, [r2, #16]
 8003d40:	e036      	b.n	8003db0 <USB_EPStartXfer+0x3dc>
 8003d42:	bf00      	nop
 8003d44:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	695a      	ldr	r2, [r3, #20]
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	4413      	add	r3, r2
 8003d52:	1e5a      	subs	r2, r3, #1
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d5c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	015a      	lsls	r2, r3, #5
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	4413      	add	r3, r2
 8003d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d6a:	691a      	ldr	r2, [r3, #16]
 8003d6c:	8afb      	ldrh	r3, [r7, #22]
 8003d6e:	04d9      	lsls	r1, r3, #19
 8003d70:	4b39      	ldr	r3, [pc, #228]	; (8003e58 <USB_EPStartXfer+0x484>)
 8003d72:	400b      	ands	r3, r1
 8003d74:	69b9      	ldr	r1, [r7, #24]
 8003d76:	0148      	lsls	r0, r1, #5
 8003d78:	69f9      	ldr	r1, [r7, #28]
 8003d7a:	4401      	add	r1, r0
 8003d7c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003d80:	4313      	orrs	r3, r2
 8003d82:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	015a      	lsls	r2, r3, #5
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d90:	691a      	ldr	r2, [r3, #16]
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	8af9      	ldrh	r1, [r7, #22]
 8003d98:	fb01 f303 	mul.w	r3, r1, r3
 8003d9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003da0:	69b9      	ldr	r1, [r7, #24]
 8003da2:	0148      	lsls	r0, r1, #5
 8003da4:	69f9      	ldr	r1, [r7, #28]
 8003da6:	4401      	add	r1, r0
 8003da8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003dac:	4313      	orrs	r3, r2
 8003dae:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003db0:	79fb      	ldrb	r3, [r7, #7]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d10d      	bne.n	8003dd2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d009      	beq.n	8003dd2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	68d9      	ldr	r1, [r3, #12]
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	015a      	lsls	r2, r3, #5
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	4413      	add	r3, r2
 8003dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dce:	460a      	mov	r2, r1
 8003dd0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	78db      	ldrb	r3, [r3, #3]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d128      	bne.n	8003e2c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d110      	bne.n	8003e0c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	015a      	lsls	r2, r3, #5
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	4413      	add	r3, r2
 8003df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	69ba      	ldr	r2, [r7, #24]
 8003dfa:	0151      	lsls	r1, r2, #5
 8003dfc:	69fa      	ldr	r2, [r7, #28]
 8003dfe:	440a      	add	r2, r1
 8003e00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e08:	6013      	str	r3, [r2, #0]
 8003e0a:	e00f      	b.n	8003e2c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	015a      	lsls	r2, r3, #5
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	4413      	add	r3, r2
 8003e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	69ba      	ldr	r2, [r7, #24]
 8003e1c:	0151      	lsls	r1, r2, #5
 8003e1e:	69fa      	ldr	r2, [r7, #28]
 8003e20:	440a      	add	r2, r1
 8003e22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e2a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	015a      	lsls	r2, r3, #5
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	4413      	add	r3, r2
 8003e34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	69ba      	ldr	r2, [r7, #24]
 8003e3c:	0151      	lsls	r1, r2, #5
 8003e3e:	69fa      	ldr	r2, [r7, #28]
 8003e40:	440a      	add	r2, r1
 8003e42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e46:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003e4a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3720      	adds	r7, #32
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	1ff80000 	.word	0x1ff80000

08003e5c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b087      	sub	sp, #28
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	4613      	mov	r3, r2
 8003e68:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	785b      	ldrb	r3, [r3, #1]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	f040 80cd 	bne.w	8004018 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d132      	bne.n	8003eec <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	015a      	lsls	r2, r3, #5
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	0151      	lsls	r1, r2, #5
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	440a      	add	r2, r1
 8003e9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ea0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003ea4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003ea8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	015a      	lsls	r2, r3, #5
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	0151      	lsls	r1, r2, #5
 8003ebc:	697a      	ldr	r2, [r7, #20]
 8003ebe:	440a      	add	r2, r1
 8003ec0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ec4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003ec8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	015a      	lsls	r2, r3, #5
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	0151      	lsls	r1, r2, #5
 8003edc:	697a      	ldr	r2, [r7, #20]
 8003ede:	440a      	add	r2, r1
 8003ee0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ee4:	0cdb      	lsrs	r3, r3, #19
 8003ee6:	04db      	lsls	r3, r3, #19
 8003ee8:	6113      	str	r3, [r2, #16]
 8003eea:	e04e      	b.n	8003f8a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	015a      	lsls	r2, r3, #5
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	0151      	lsls	r1, r2, #5
 8003efe:	697a      	ldr	r2, [r7, #20]
 8003f00:	440a      	add	r2, r1
 8003f02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f06:	0cdb      	lsrs	r3, r3, #19
 8003f08:	04db      	lsls	r3, r3, #19
 8003f0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	015a      	lsls	r2, r3, #5
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	4413      	add	r3, r2
 8003f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	0151      	lsls	r1, r2, #5
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	440a      	add	r2, r1
 8003f22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f26:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003f2a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003f2e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	695a      	ldr	r2, [r3, #20]
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d903      	bls.n	8003f44 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	689a      	ldr	r2, [r3, #8]
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	015a      	lsls	r2, r3, #5
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	0151      	lsls	r1, r2, #5
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	440a      	add	r2, r1
 8003f5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f62:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	015a      	lsls	r2, r3, #5
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f70:	691a      	ldr	r2, [r3, #16]
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f7a:	6939      	ldr	r1, [r7, #16]
 8003f7c:	0148      	lsls	r0, r1, #5
 8003f7e:	6979      	ldr	r1, [r7, #20]
 8003f80:	4401      	add	r1, r0
 8003f82:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003f86:	4313      	orrs	r3, r2
 8003f88:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003f8a:	79fb      	ldrb	r3, [r7, #7]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d11e      	bne.n	8003fce <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d009      	beq.n	8003fac <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	015a      	lsls	r2, r3, #5
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	015a      	lsls	r2, r3, #5
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	0151      	lsls	r1, r2, #5
 8003fbe:	697a      	ldr	r2, [r7, #20]
 8003fc0:	440a      	add	r2, r1
 8003fc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fc6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003fca:	6013      	str	r3, [r2, #0]
 8003fcc:	e092      	b.n	80040f4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	015a      	lsls	r2, r3, #5
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	0151      	lsls	r1, r2, #5
 8003fe0:	697a      	ldr	r2, [r7, #20]
 8003fe2:	440a      	add	r2, r1
 8003fe4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fe8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003fec:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d07e      	beq.n	80040f4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ffc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	f003 030f 	and.w	r3, r3, #15
 8004006:	2101      	movs	r1, #1
 8004008:	fa01 f303 	lsl.w	r3, r1, r3
 800400c:	6979      	ldr	r1, [r7, #20]
 800400e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004012:	4313      	orrs	r3, r2
 8004014:	634b      	str	r3, [r1, #52]	; 0x34
 8004016:	e06d      	b.n	80040f4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	015a      	lsls	r2, r3, #5
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	4413      	add	r3, r2
 8004020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	693a      	ldr	r2, [r7, #16]
 8004028:	0151      	lsls	r1, r2, #5
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	440a      	add	r2, r1
 800402e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004032:	0cdb      	lsrs	r3, r3, #19
 8004034:	04db      	lsls	r3, r3, #19
 8004036:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	015a      	lsls	r2, r3, #5
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	4413      	add	r3, r2
 8004040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	693a      	ldr	r2, [r7, #16]
 8004048:	0151      	lsls	r1, r2, #5
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	440a      	add	r2, r1
 800404e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004052:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004056:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800405a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	695b      	ldr	r3, [r3, #20]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d003      	beq.n	800406c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	689a      	ldr	r2, [r3, #8]
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	015a      	lsls	r2, r3, #5
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	4413      	add	r3, r2
 8004074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	693a      	ldr	r2, [r7, #16]
 800407c:	0151      	lsls	r1, r2, #5
 800407e:	697a      	ldr	r2, [r7, #20]
 8004080:	440a      	add	r2, r1
 8004082:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004086:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800408a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	015a      	lsls	r2, r3, #5
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	4413      	add	r3, r2
 8004094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004098:	691a      	ldr	r2, [r3, #16]
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040a2:	6939      	ldr	r1, [r7, #16]
 80040a4:	0148      	lsls	r0, r1, #5
 80040a6:	6979      	ldr	r1, [r7, #20]
 80040a8:	4401      	add	r1, r0
 80040aa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80040ae:	4313      	orrs	r3, r2
 80040b0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80040b2:	79fb      	ldrb	r3, [r7, #7]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d10d      	bne.n	80040d4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d009      	beq.n	80040d4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	68d9      	ldr	r1, [r3, #12]
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	015a      	lsls	r2, r3, #5
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	4413      	add	r3, r2
 80040cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040d0:	460a      	mov	r2, r1
 80040d2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	015a      	lsls	r2, r3, #5
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	4413      	add	r3, r2
 80040dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	0151      	lsls	r1, r2, #5
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	440a      	add	r2, r1
 80040ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80040f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	371c      	adds	r7, #28
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr

08004102 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004102:	b480      	push	{r7}
 8004104:	b089      	sub	sp, #36	; 0x24
 8004106:	af00      	add	r7, sp, #0
 8004108:	60f8      	str	r0, [r7, #12]
 800410a:	60b9      	str	r1, [r7, #8]
 800410c:	4611      	mov	r1, r2
 800410e:	461a      	mov	r2, r3
 8004110:	460b      	mov	r3, r1
 8004112:	71fb      	strb	r3, [r7, #7]
 8004114:	4613      	mov	r3, r2
 8004116:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004120:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004124:	2b00      	cmp	r3, #0
 8004126:	d11a      	bne.n	800415e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004128:	88bb      	ldrh	r3, [r7, #4]
 800412a:	3303      	adds	r3, #3
 800412c:	089b      	lsrs	r3, r3, #2
 800412e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004130:	2300      	movs	r3, #0
 8004132:	61bb      	str	r3, [r7, #24]
 8004134:	e00f      	b.n	8004156 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004136:	79fb      	ldrb	r3, [r7, #7]
 8004138:	031a      	lsls	r2, r3, #12
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	4413      	add	r3, r2
 800413e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004142:	461a      	mov	r2, r3
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6013      	str	r3, [r2, #0]
      pSrc++;
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	3304      	adds	r3, #4
 800414e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	3301      	adds	r3, #1
 8004154:	61bb      	str	r3, [r7, #24]
 8004156:	69ba      	ldr	r2, [r7, #24]
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	429a      	cmp	r2, r3
 800415c:	d3eb      	bcc.n	8004136 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800415e:	2300      	movs	r3, #0
}
 8004160:	4618      	mov	r0, r3
 8004162:	3724      	adds	r7, #36	; 0x24
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800416c:	b480      	push	{r7}
 800416e:	b089      	sub	sp, #36	; 0x24
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	4613      	mov	r3, r2
 8004178:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004182:	88fb      	ldrh	r3, [r7, #6]
 8004184:	3303      	adds	r3, #3
 8004186:	089b      	lsrs	r3, r3, #2
 8004188:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800418a:	2300      	movs	r3, #0
 800418c:	61bb      	str	r3, [r7, #24]
 800418e:	e00b      	b.n	80041a8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	601a      	str	r2, [r3, #0]
    pDest++;
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	3304      	adds	r3, #4
 80041a0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	3301      	adds	r3, #1
 80041a6:	61bb      	str	r3, [r7, #24]
 80041a8:	69ba      	ldr	r2, [r7, #24]
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d3ef      	bcc.n	8004190 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80041b0:	69fb      	ldr	r3, [r7, #28]
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3724      	adds	r7, #36	; 0x24
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr

080041be <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80041be:	b480      	push	{r7}
 80041c0:	b085      	sub	sp, #20
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
 80041c6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	785b      	ldrb	r3, [r3, #1]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d12c      	bne.n	8004234 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	015a      	lsls	r2, r3, #5
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	4413      	add	r3, r2
 80041e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	db12      	blt.n	8004212 <USB_EPSetStall+0x54>
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00f      	beq.n	8004212 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	015a      	lsls	r2, r3, #5
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	4413      	add	r3, r2
 80041fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68ba      	ldr	r2, [r7, #8]
 8004202:	0151      	lsls	r1, r2, #5
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	440a      	add	r2, r1
 8004208:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800420c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004210:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	015a      	lsls	r2, r3, #5
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	4413      	add	r3, r2
 800421a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68ba      	ldr	r2, [r7, #8]
 8004222:	0151      	lsls	r1, r2, #5
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	440a      	add	r2, r1
 8004228:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800422c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004230:	6013      	str	r3, [r2, #0]
 8004232:	e02b      	b.n	800428c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	015a      	lsls	r2, r3, #5
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	4413      	add	r3, r2
 800423c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2b00      	cmp	r3, #0
 8004244:	db12      	blt.n	800426c <USB_EPSetStall+0xae>
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00f      	beq.n	800426c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	015a      	lsls	r2, r3, #5
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	4413      	add	r3, r2
 8004254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68ba      	ldr	r2, [r7, #8]
 800425c:	0151      	lsls	r1, r2, #5
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	440a      	add	r2, r1
 8004262:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004266:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800426a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	015a      	lsls	r2, r3, #5
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	4413      	add	r3, r2
 8004274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68ba      	ldr	r2, [r7, #8]
 800427c:	0151      	lsls	r1, r2, #5
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	440a      	add	r2, r1
 8004282:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004286:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800428a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3714      	adds	r7, #20
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr

0800429a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800429a:	b480      	push	{r7}
 800429c:	b085      	sub	sp, #20
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
 80042a2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	785b      	ldrb	r3, [r3, #1]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d128      	bne.n	8004308 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	015a      	lsls	r2, r3, #5
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	4413      	add	r3, r2
 80042be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68ba      	ldr	r2, [r7, #8]
 80042c6:	0151      	lsls	r1, r2, #5
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	440a      	add	r2, r1
 80042cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042d0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80042d4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	78db      	ldrb	r3, [r3, #3]
 80042da:	2b03      	cmp	r3, #3
 80042dc:	d003      	beq.n	80042e6 <USB_EPClearStall+0x4c>
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	78db      	ldrb	r3, [r3, #3]
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d138      	bne.n	8004358 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	015a      	lsls	r2, r3, #5
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	4413      	add	r3, r2
 80042ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68ba      	ldr	r2, [r7, #8]
 80042f6:	0151      	lsls	r1, r2, #5
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	440a      	add	r2, r1
 80042fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004304:	6013      	str	r3, [r2, #0]
 8004306:	e027      	b.n	8004358 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	015a      	lsls	r2, r3, #5
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	4413      	add	r3, r2
 8004310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68ba      	ldr	r2, [r7, #8]
 8004318:	0151      	lsls	r1, r2, #5
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	440a      	add	r2, r1
 800431e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004322:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004326:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	78db      	ldrb	r3, [r3, #3]
 800432c:	2b03      	cmp	r3, #3
 800432e:	d003      	beq.n	8004338 <USB_EPClearStall+0x9e>
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	78db      	ldrb	r3, [r3, #3]
 8004334:	2b02      	cmp	r3, #2
 8004336:	d10f      	bne.n	8004358 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	015a      	lsls	r2, r3, #5
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	4413      	add	r3, r2
 8004340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68ba      	ldr	r2, [r7, #8]
 8004348:	0151      	lsls	r1, r2, #5
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	440a      	add	r2, r1
 800434e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004352:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004356:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3714      	adds	r7, #20
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr

08004366 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004366:	b480      	push	{r7}
 8004368:	b085      	sub	sp, #20
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
 800436e:	460b      	mov	r3, r1
 8004370:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004384:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004388:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	78fb      	ldrb	r3, [r7, #3]
 8004394:	011b      	lsls	r3, r3, #4
 8004396:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800439a:	68f9      	ldr	r1, [r7, #12]
 800439c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043a0:	4313      	orrs	r3, r2
 80043a2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3714      	adds	r7, #20
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr

080043b2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80043b2:	b480      	push	{r7}
 80043b4:	b085      	sub	sp, #20
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80043cc:	f023 0303 	bic.w	r3, r3, #3
 80043d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043e0:	f023 0302 	bic.w	r3, r3, #2
 80043e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3714      	adds	r7, #20
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b085      	sub	sp, #20
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800440e:	f023 0303 	bic.w	r3, r3, #3
 8004412:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004422:	f043 0302 	orr.w	r3, r3, #2
 8004426:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3714      	adds	r7, #20
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr

08004436 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004436:	b480      	push	{r7}
 8004438:	b085      	sub	sp, #20
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	699b      	ldr	r3, [r3, #24]
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	4013      	ands	r3, r2
 800444c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800444e:	68fb      	ldr	r3, [r7, #12]
}
 8004450:	4618      	mov	r0, r3
 8004452:	3714      	adds	r7, #20
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800445c:	b480      	push	{r7}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004478:	69db      	ldr	r3, [r3, #28]
 800447a:	68ba      	ldr	r2, [r7, #8]
 800447c:	4013      	ands	r3, r2
 800447e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	0c1b      	lsrs	r3, r3, #16
}
 8004484:	4618      	mov	r0, r3
 8004486:	3714      	adds	r7, #20
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ac:	69db      	ldr	r3, [r3, #28]
 80044ae:	68ba      	ldr	r2, [r7, #8]
 80044b0:	4013      	ands	r3, r2
 80044b2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	b29b      	uxth	r3, r3
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3714      	adds	r7, #20
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	460b      	mov	r3, r1
 80044ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80044d4:	78fb      	ldrb	r3, [r7, #3]
 80044d6:	015a      	lsls	r2, r3, #5
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	4413      	add	r3, r2
 80044dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ea:	695b      	ldr	r3, [r3, #20]
 80044ec:	68ba      	ldr	r2, [r7, #8]
 80044ee:	4013      	ands	r3, r2
 80044f0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80044f2:	68bb      	ldr	r3, [r7, #8]
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3714      	adds	r7, #20
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004500:	b480      	push	{r7}
 8004502:	b087      	sub	sp, #28
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	460b      	mov	r3, r1
 800450a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004522:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004524:	78fb      	ldrb	r3, [r7, #3]
 8004526:	f003 030f 	and.w	r3, r3, #15
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	fa22 f303 	lsr.w	r3, r2, r3
 8004530:	01db      	lsls	r3, r3, #7
 8004532:	b2db      	uxtb	r3, r3
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	4313      	orrs	r3, r2
 8004538:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800453a:	78fb      	ldrb	r3, [r7, #3]
 800453c:	015a      	lsls	r2, r3, #5
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	4413      	add	r3, r2
 8004542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	4013      	ands	r3, r2
 800454c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800454e:	68bb      	ldr	r3, [r7, #8]
}
 8004550:	4618      	mov	r0, r3
 8004552:	371c      	adds	r7, #28
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	695b      	ldr	r3, [r3, #20]
 8004568:	f003 0301 	and.w	r3, r3, #1
}
 800456c:	4618      	mov	r0, r3
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68fa      	ldr	r2, [r7, #12]
 800458e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004592:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004596:	f023 0307 	bic.w	r3, r3, #7
 800459a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045ae:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3714      	adds	r7, #20
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
	...

080045c0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b087      	sub	sp, #28
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	460b      	mov	r3, r1
 80045ca:	607a      	str	r2, [r7, #4]
 80045cc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	333c      	adds	r3, #60	; 0x3c
 80045d6:	3304      	adds	r3, #4
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	4a26      	ldr	r2, [pc, #152]	; (8004678 <USB_EP0_OutStart+0xb8>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d90a      	bls.n	80045fa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045f4:	d101      	bne.n	80045fa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80045f6:	2300      	movs	r3, #0
 80045f8:	e037      	b.n	800466a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004600:	461a      	mov	r2, r3
 8004602:	2300      	movs	r3, #0
 8004604:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004614:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004618:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004628:	f043 0318 	orr.w	r3, r3, #24
 800462c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800463c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004640:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004642:	7afb      	ldrb	r3, [r7, #11]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d10f      	bne.n	8004668 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800464e:	461a      	mov	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004662:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004666:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	371c      	adds	r7, #28
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	4f54300a 	.word	0x4f54300a

0800467c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800467c:	b480      	push	{r7}
 800467e:	b085      	sub	sp, #20
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004684:	2300      	movs	r3, #0
 8004686:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	3301      	adds	r3, #1
 800468c:	60fb      	str	r3, [r7, #12]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	4a13      	ldr	r2, [pc, #76]	; (80046e0 <USB_CoreReset+0x64>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d901      	bls.n	800469a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e01b      	b.n	80046d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	daf2      	bge.n	8004688 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80046a2:	2300      	movs	r3, #0
 80046a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	f043 0201 	orr.w	r2, r3, #1
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	3301      	adds	r3, #1
 80046b6:	60fb      	str	r3, [r7, #12]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	4a09      	ldr	r2, [pc, #36]	; (80046e0 <USB_CoreReset+0x64>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d901      	bls.n	80046c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e006      	b.n	80046d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	f003 0301 	and.w	r3, r3, #1
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d0f0      	beq.n	80046b2 <USB_CoreReset+0x36>

  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3714      	adds	r7, #20
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop
 80046e0:	00030d40 	.word	0x00030d40

080046e4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	460b      	mov	r3, r1
 80046ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80046f0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80046f4:	f004 fe0c 	bl	8009310 <malloc>
 80046f8:	4603      	mov	r3, r0
 80046fa:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d105      	bne.n	800470e <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800470a:	2302      	movs	r3, #2
 800470c:	e066      	b.n	80047dc <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	7c1b      	ldrb	r3, [r3, #16]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d119      	bne.n	8004752 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800471e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004722:	2202      	movs	r2, #2
 8004724:	2181      	movs	r1, #129	; 0x81
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f004 fc79 	bl	800901e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004732:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004736:	2202      	movs	r2, #2
 8004738:	2101      	movs	r1, #1
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f004 fc6f 	bl	800901e <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2210      	movs	r2, #16
 800474c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004750:	e016      	b.n	8004780 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004752:	2340      	movs	r3, #64	; 0x40
 8004754:	2202      	movs	r2, #2
 8004756:	2181      	movs	r1, #129	; 0x81
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f004 fc60 	bl	800901e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2201      	movs	r2, #1
 8004762:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004764:	2340      	movs	r3, #64	; 0x40
 8004766:	2202      	movs	r2, #2
 8004768:	2101      	movs	r1, #1
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f004 fc57 	bl	800901e <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2210      	movs	r2, #16
 800477c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004780:	2308      	movs	r3, #8
 8004782:	2203      	movs	r2, #3
 8004784:	2182      	movs	r1, #130	; 0x82
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f004 fc49 	bl	800901e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	7c1b      	ldrb	r3, [r3, #16]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d109      	bne.n	80047ca <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80047bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047c0:	2101      	movs	r1, #1
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f004 fd1a 	bl	80091fc <USBD_LL_PrepareReceive>
 80047c8:	e007      	b.n	80047da <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80047d0:	2340      	movs	r3, #64	; 0x40
 80047d2:	2101      	movs	r1, #1
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f004 fd11 	bl	80091fc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80047da:	2300      	movs	r3, #0
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3710      	adds	r7, #16
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	460b      	mov	r3, r1
 80047ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 80047f0:	2300      	movs	r3, #0
 80047f2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80047f4:	2181      	movs	r1, #129	; 0x81
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f004 fc37 	bl	800906a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004802:	2101      	movs	r1, #1
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f004 fc30 	bl	800906a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004812:	2182      	movs	r1, #130	; 0x82
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f004 fc28 	bl	800906a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004830:	2b00      	cmp	r3, #0
 8004832:	d00e      	beq.n	8004852 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004844:	4618      	mov	r0, r3
 8004846:	f004 fd6b 	bl	8009320 <free>
    pdev->pClassData = NULL;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8004852:	7bfb      	ldrb	r3, [r7, #15]
}
 8004854:	4618      	mov	r0, r3
 8004856:	3710      	adds	r7, #16
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b086      	sub	sp, #24
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800486c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800486e:	2300      	movs	r3, #0
 8004870:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8004872:	2300      	movs	r3, #0
 8004874:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8004876:	2300      	movs	r3, #0
 8004878:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004882:	2b00      	cmp	r3, #0
 8004884:	d03a      	beq.n	80048fc <USBD_CDC_Setup+0xa0>
 8004886:	2b20      	cmp	r3, #32
 8004888:	f040 8097 	bne.w	80049ba <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	88db      	ldrh	r3, [r3, #6]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d029      	beq.n	80048e8 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	b25b      	sxtb	r3, r3
 800489a:	2b00      	cmp	r3, #0
 800489c:	da11      	bge.n	80048c2 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	683a      	ldr	r2, [r7, #0]
 80048a8:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 80048aa:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80048ac:	683a      	ldr	r2, [r7, #0]
 80048ae:	88d2      	ldrh	r2, [r2, #6]
 80048b0:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80048b2:	6939      	ldr	r1, [r7, #16]
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	88db      	ldrh	r3, [r3, #6]
 80048b8:	461a      	mov	r2, r3
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f001 fa6d 	bl	8005d9a <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 80048c0:	e082      	b.n	80049c8 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	785a      	ldrb	r2, [r3, #1]
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	88db      	ldrh	r3, [r3, #6]
 80048d0:	b2da      	uxtb	r2, r3
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80048d8:	6939      	ldr	r1, [r7, #16]
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	88db      	ldrh	r3, [r3, #6]
 80048de:	461a      	mov	r2, r3
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f001 fa86 	bl	8005df2 <USBD_CtlPrepareRx>
    break;
 80048e6:	e06f      	b.n	80049c8 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	683a      	ldr	r2, [r7, #0]
 80048f2:	7850      	ldrb	r0, [r2, #1]
 80048f4:	2200      	movs	r2, #0
 80048f6:	6839      	ldr	r1, [r7, #0]
 80048f8:	4798      	blx	r3
    break;
 80048fa:	e065      	b.n	80049c8 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	785b      	ldrb	r3, [r3, #1]
 8004900:	2b0b      	cmp	r3, #11
 8004902:	d84f      	bhi.n	80049a4 <USBD_CDC_Setup+0x148>
 8004904:	a201      	add	r2, pc, #4	; (adr r2, 800490c <USBD_CDC_Setup+0xb0>)
 8004906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800490a:	bf00      	nop
 800490c:	0800493d 	.word	0x0800493d
 8004910:	080049b3 	.word	0x080049b3
 8004914:	080049a5 	.word	0x080049a5
 8004918:	080049a5 	.word	0x080049a5
 800491c:	080049a5 	.word	0x080049a5
 8004920:	080049a5 	.word	0x080049a5
 8004924:	080049a5 	.word	0x080049a5
 8004928:	080049a5 	.word	0x080049a5
 800492c:	080049a5 	.word	0x080049a5
 8004930:	080049a5 	.word	0x080049a5
 8004934:	08004965 	.word	0x08004965
 8004938:	0800498d 	.word	0x0800498d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004942:	2b03      	cmp	r3, #3
 8004944:	d107      	bne.n	8004956 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004946:	f107 030c 	add.w	r3, r7, #12
 800494a:	2202      	movs	r2, #2
 800494c:	4619      	mov	r1, r3
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f001 fa23 	bl	8005d9a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004954:	e030      	b.n	80049b8 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8004956:	6839      	ldr	r1, [r7, #0]
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f001 f9ad 	bl	8005cb8 <USBD_CtlError>
        ret = USBD_FAIL;
 800495e:	2303      	movs	r3, #3
 8004960:	75fb      	strb	r3, [r7, #23]
      break;
 8004962:	e029      	b.n	80049b8 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800496a:	2b03      	cmp	r3, #3
 800496c:	d107      	bne.n	800497e <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800496e:	f107 030f 	add.w	r3, r7, #15
 8004972:	2201      	movs	r2, #1
 8004974:	4619      	mov	r1, r3
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f001 fa0f 	bl	8005d9a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800497c:	e01c      	b.n	80049b8 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800497e:	6839      	ldr	r1, [r7, #0]
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f001 f999 	bl	8005cb8 <USBD_CtlError>
        ret = USBD_FAIL;
 8004986:	2303      	movs	r3, #3
 8004988:	75fb      	strb	r3, [r7, #23]
      break;
 800498a:	e015      	b.n	80049b8 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004992:	2b03      	cmp	r3, #3
 8004994:	d00f      	beq.n	80049b6 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8004996:	6839      	ldr	r1, [r7, #0]
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f001 f98d 	bl	8005cb8 <USBD_CtlError>
        ret = USBD_FAIL;
 800499e:	2303      	movs	r3, #3
 80049a0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80049a2:	e008      	b.n	80049b6 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80049a4:	6839      	ldr	r1, [r7, #0]
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f001 f986 	bl	8005cb8 <USBD_CtlError>
      ret = USBD_FAIL;
 80049ac:	2303      	movs	r3, #3
 80049ae:	75fb      	strb	r3, [r7, #23]
      break;
 80049b0:	e002      	b.n	80049b8 <USBD_CDC_Setup+0x15c>
      break;
 80049b2:	bf00      	nop
 80049b4:	e008      	b.n	80049c8 <USBD_CDC_Setup+0x16c>
      break;
 80049b6:	bf00      	nop
    }
    break;
 80049b8:	e006      	b.n	80049c8 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 80049ba:	6839      	ldr	r1, [r7, #0]
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f001 f97b 	bl	8005cb8 <USBD_CtlError>
    ret = USBD_FAIL;
 80049c2:	2303      	movs	r3, #3
 80049c4:	75fb      	strb	r3, [r7, #23]
    break;
 80049c6:	bf00      	nop
  }

  return (uint8_t)ret;
 80049c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3718      	adds	r7, #24
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop

080049d4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	460b      	mov	r3, r1
 80049de:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80049e6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d101      	bne.n	80049f6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e049      	b.n	8004a8a <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80049fc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80049fe:	78fa      	ldrb	r2, [r7, #3]
 8004a00:	6879      	ldr	r1, [r7, #4]
 8004a02:	4613      	mov	r3, r2
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	4413      	add	r3, r2
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	440b      	add	r3, r1
 8004a0c:	3318      	adds	r3, #24
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d029      	beq.n	8004a68 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004a14:	78fa      	ldrb	r2, [r7, #3]
 8004a16:	6879      	ldr	r1, [r7, #4]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	4413      	add	r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	440b      	add	r3, r1
 8004a22:	3318      	adds	r3, #24
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	78f9      	ldrb	r1, [r7, #3]
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	00db      	lsls	r3, r3, #3
 8004a2e:	1a5b      	subs	r3, r3, r1
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	4403      	add	r3, r0
 8004a34:	3344      	adds	r3, #68	; 0x44
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	fbb2 f1f3 	udiv	r1, r2, r3
 8004a3c:	fb03 f301 	mul.w	r3, r3, r1
 8004a40:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d110      	bne.n	8004a68 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8004a46:	78fa      	ldrb	r2, [r7, #3]
 8004a48:	6879      	ldr	r1, [r7, #4]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	4413      	add	r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	440b      	add	r3, r1
 8004a54:	3318      	adds	r3, #24
 8004a56:	2200      	movs	r2, #0
 8004a58:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004a5a:	78f9      	ldrb	r1, [r7, #3]
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	2200      	movs	r2, #0
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f004 fbaa 	bl	80091ba <USBD_LL_Transmit>
 8004a66:	e00f      	b.n	8004a88 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	68ba      	ldr	r2, [r7, #8]
 8004a7a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004a7e:	68ba      	ldr	r2, [r7, #8]
 8004a80:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004a84:	78fa      	ldrb	r2, [r7, #3]
 8004a86:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3710      	adds	r7, #16
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b084      	sub	sp, #16
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
 8004a9a:	460b      	mov	r3, r1
 8004a9c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004aa4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d101      	bne.n	8004ab4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e015      	b.n	8004ae0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004ab4:	78fb      	ldrb	r3, [r7, #3]
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f004 fbc0 	bl	800923e <USBD_LL_GetRxDataSize>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004ad4:	68fa      	ldr	r2, [r7, #12]
 8004ad6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004ada:	4611      	mov	r1, r2
 8004adc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3710      	adds	r7, #16
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004af6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d015      	beq.n	8004b2e <USBD_CDC_EP0_RxReady+0x46>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004b08:	2bff      	cmp	r3, #255	; 0xff
 8004b0a:	d010      	beq.n	8004b2e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8004b1a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004b1c:	68fa      	ldr	r2, [r7, #12]
 8004b1e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004b22:	b292      	uxth	r2, r2
 8004b24:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	22ff      	movs	r2, #255	; 0xff
 8004b2a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3710      	adds	r7, #16
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2243      	movs	r2, #67	; 0x43
 8004b44:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8004b46:	4b03      	ldr	r3, [pc, #12]	; (8004b54 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr
 8004b54:	20000094 	.word	0x20000094

08004b58 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2243      	movs	r2, #67	; 0x43
 8004b64:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8004b66:	4b03      	ldr	r3, [pc, #12]	; (8004b74 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr
 8004b74:	20000050 	.word	0x20000050

08004b78 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2243      	movs	r2, #67	; 0x43
 8004b84:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8004b86:	4b03      	ldr	r3, [pc, #12]	; (8004b94 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr
 8004b94:	200000d8 	.word	0x200000d8

08004b98 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	220a      	movs	r2, #10
 8004ba4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004ba6:	4b03      	ldr	r3, [pc, #12]	; (8004bb4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr
 8004bb4:	2000000c 	.word	0x2000000c

08004bb8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d101      	bne.n	8004bcc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	e004      	b.n	8004bd6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	683a      	ldr	r2, [r7, #0]
 8004bd0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	370c      	adds	r7, #12
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr

08004be2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004be2:	b480      	push	{r7}
 8004be4:	b087      	sub	sp, #28
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	60f8      	str	r0, [r7, #12]
 8004bea:	60b9      	str	r1, [r7, #8]
 8004bec:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004bf4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	68ba      	ldr	r2, [r7, #8]
 8004bfa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004c06:	2300      	movs	r3, #0
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	371c      	adds	r7, #28
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b085      	sub	sp, #20
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004c24:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	683a      	ldr	r2, [r7, #0]
 8004c2a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3714      	adds	r7, #20
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004c4a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d101      	bne.n	8004c5a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e016      	b.n	8004c88 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	7c1b      	ldrb	r3, [r3, #16]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d109      	bne.n	8004c76 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004c68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c6c:	2101      	movs	r1, #1
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f004 fac4 	bl	80091fc <USBD_LL_PrepareReceive>
 8004c74:	e007      	b.n	8004c86 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004c7c:	2340      	movs	r3, #64	; 0x40
 8004c7e:	2101      	movs	r1, #1
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f004 fabb 	bl	80091fc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d101      	bne.n	8004ca8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e025      	b.n	8004cf4 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d003      	beq.n	8004cba <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d003      	beq.n	8004ccc <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d003      	beq.n	8004cda <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	68ba      	ldr	r2, [r7, #8]
 8004cd6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	79fa      	ldrb	r2, [r7, #7]
 8004ce6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	f004 f931 	bl	8008f50 <USBD_LL_Init>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004cf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3718      	adds	r7, #24
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004d06:	2300      	movs	r3, #0
 8004d08:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d101      	bne.n	8004d14 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e010      	b.n	8004d36 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	683a      	ldr	r2, [r7, #0]
 8004d18:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d24:	f107 020e 	add.w	r2, r7, #14
 8004d28:	4610      	mov	r0, r2
 8004d2a:	4798      	blx	r3
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3710      	adds	r7, #16
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b082      	sub	sp, #8
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f004 f94e 	bl	8008fe8 <USBD_LL_Start>
 8004d4c:	4603      	mov	r3, r0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3708      	adds	r7, #8
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}

08004d56 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004d56:	b480      	push	{r7}
 8004d58:	b083      	sub	sp, #12
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	460b      	mov	r3, r1
 8004d76:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d009      	beq.n	8004d9a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	78fa      	ldrb	r2, [r7, #3]
 8004d90:	4611      	mov	r1, r2
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	4798      	blx	r3
 8004d96:	4603      	mov	r3, r0
 8004d98:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3710      	adds	r7, #16
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	460b      	mov	r3, r1
 8004dae:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d007      	beq.n	8004dca <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	78fa      	ldrb	r2, [r7, #3]
 8004dc4:	4611      	mov	r1, r2
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	4798      	blx	r3
  }

  return USBD_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3708      	adds	r7, #8
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004de4:	6839      	ldr	r1, [r7, #0]
 8004de6:	4618      	mov	r0, r3
 8004de8:	f000 ff2c 	bl	8005c44 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004e08:	f003 031f 	and.w	r3, r3, #31
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d00e      	beq.n	8004e2e <USBD_LL_SetupStage+0x5a>
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d302      	bcc.n	8004e1a <USBD_LL_SetupStage+0x46>
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d014      	beq.n	8004e42 <USBD_LL_SetupStage+0x6e>
 8004e18:	e01d      	b.n	8004e56 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004e20:	4619      	mov	r1, r3
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 fa18 	bl	8005258 <USBD_StdDevReq>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e2c:	e020      	b.n	8004e70 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004e34:	4619      	mov	r1, r3
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 fa7c 	bl	8005334 <USBD_StdItfReq>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e40:	e016      	b.n	8004e70 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004e48:	4619      	mov	r1, r3
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 fab8 	bl	80053c0 <USBD_StdEPReq>
 8004e50:	4603      	mov	r3, r0
 8004e52:	73fb      	strb	r3, [r7, #15]
      break;
 8004e54:	e00c      	b.n	8004e70 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004e5c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	4619      	mov	r1, r3
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f004 f91f 	bl	80090a8 <USBD_LL_StallEP>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	73fb      	strb	r3, [r7, #15]
      break;
 8004e6e:	bf00      	nop
  }

  return ret;
 8004e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3710      	adds	r7, #16
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	b086      	sub	sp, #24
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	60f8      	str	r0, [r7, #12]
 8004e82:	460b      	mov	r3, r1
 8004e84:	607a      	str	r2, [r7, #4]
 8004e86:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004e88:	7afb      	ldrb	r3, [r7, #11]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d137      	bne.n	8004efe <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004e94:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004e9c:	2b03      	cmp	r3, #3
 8004e9e:	d14a      	bne.n	8004f36 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	689a      	ldr	r2, [r3, #8]
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d913      	bls.n	8004ed4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	689a      	ldr	r2, [r3, #8]
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	1ad2      	subs	r2, r2, r3
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	68da      	ldr	r2, [r3, #12]
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	bf28      	it	cs
 8004ec6:	4613      	movcs	r3, r2
 8004ec8:	461a      	mov	r2, r3
 8004eca:	6879      	ldr	r1, [r7, #4]
 8004ecc:	68f8      	ldr	r0, [r7, #12]
 8004ece:	f000 ffad 	bl	8005e2c <USBD_CtlContinueRx>
 8004ed2:	e030      	b.n	8004f36 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00a      	beq.n	8004ef6 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004ee6:	2b03      	cmp	r3, #3
 8004ee8:	d105      	bne.n	8004ef6 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	68f8      	ldr	r0, [r7, #12]
 8004ef4:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8004ef6:	68f8      	ldr	r0, [r7, #12]
 8004ef8:	f000 ffa9 	bl	8005e4e <USBD_CtlSendStatus>
 8004efc:	e01b      	b.n	8004f36 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f04:	699b      	ldr	r3, [r3, #24]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d013      	beq.n	8004f32 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8004f10:	2b03      	cmp	r3, #3
 8004f12:	d10e      	bne.n	8004f32 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	7afa      	ldrb	r2, [r7, #11]
 8004f1e:	4611      	mov	r1, r2
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	4798      	blx	r3
 8004f24:	4603      	mov	r3, r0
 8004f26:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8004f28:	7dfb      	ldrb	r3, [r7, #23]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d003      	beq.n	8004f36 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8004f2e:	7dfb      	ldrb	r3, [r7, #23]
 8004f30:	e002      	b.n	8004f38 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e000      	b.n	8004f38 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3718      	adds	r7, #24
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b086      	sub	sp, #24
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	460b      	mov	r3, r1
 8004f4a:	607a      	str	r2, [r7, #4]
 8004f4c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004f4e:	7afb      	ldrb	r3, [r7, #11]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d16a      	bne.n	800502a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	3314      	adds	r3, #20
 8004f58:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d155      	bne.n	8005010 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	689a      	ldr	r2, [r3, #8]
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d914      	bls.n	8004f9a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	689a      	ldr	r2, [r3, #8]
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	1ad2      	subs	r2, r2, r3
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	461a      	mov	r2, r3
 8004f84:	6879      	ldr	r1, [r7, #4]
 8004f86:	68f8      	ldr	r0, [r7, #12]
 8004f88:	f000 ff22 	bl	8005dd0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	2200      	movs	r2, #0
 8004f90:	2100      	movs	r1, #0
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f004 f932 	bl	80091fc <USBD_LL_PrepareReceive>
 8004f98:	e03a      	b.n	8005010 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	68da      	ldr	r2, [r3, #12]
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d11c      	bne.n	8004fe0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	685a      	ldr	r2, [r3, #4]
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d316      	bcc.n	8004fe0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	685a      	ldr	r2, [r3, #4]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d20f      	bcs.n	8004fe0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	2100      	movs	r1, #0
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f000 ff03 	bl	8005dd0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	2100      	movs	r1, #0
 8004fd8:	68f8      	ldr	r0, [r7, #12]
 8004fda:	f004 f90f 	bl	80091fc <USBD_LL_PrepareReceive>
 8004fde:	e017      	b.n	8005010 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00a      	beq.n	8005002 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004ff2:	2b03      	cmp	r3, #3
 8004ff4:	d105      	bne.n	8005002 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005002:	2180      	movs	r1, #128	; 0x80
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	f004 f84f 	bl	80090a8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800500a:	68f8      	ldr	r0, [r7, #12]
 800500c:	f000 ff32 	bl	8005e74 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005016:	2b01      	cmp	r3, #1
 8005018:	d123      	bne.n	8005062 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800501a:	68f8      	ldr	r0, [r7, #12]
 800501c:	f7ff fe9b 	bl	8004d56 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005028:	e01b      	b.n	8005062 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d013      	beq.n	800505e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800503c:	2b03      	cmp	r3, #3
 800503e:	d10e      	bne.n	800505e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005046:	695b      	ldr	r3, [r3, #20]
 8005048:	7afa      	ldrb	r2, [r7, #11]
 800504a:	4611      	mov	r1, r2
 800504c:	68f8      	ldr	r0, [r7, #12]
 800504e:	4798      	blx	r3
 8005050:	4603      	mov	r3, r0
 8005052:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005054:	7dfb      	ldrb	r3, [r7, #23]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d003      	beq.n	8005062 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800505a:	7dfb      	ldrb	r3, [r7, #23]
 800505c:	e002      	b.n	8005064 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800505e:	2303      	movs	r3, #3
 8005060:	e000      	b.n	8005064 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3718      	adds	r7, #24
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005098:	2b00      	cmp	r3, #0
 800509a:	d009      	beq.n	80050b0 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	6852      	ldr	r2, [r2, #4]
 80050a8:	b2d2      	uxtb	r2, r2
 80050aa:	4611      	mov	r1, r2
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80050b0:	2340      	movs	r3, #64	; 0x40
 80050b2:	2200      	movs	r2, #0
 80050b4:	2100      	movs	r1, #0
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f003 ffb1 	bl	800901e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2240      	movs	r2, #64	; 0x40
 80050c8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80050cc:	2340      	movs	r3, #64	; 0x40
 80050ce:	2200      	movs	r2, #0
 80050d0:	2180      	movs	r1, #128	; 0x80
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f003 ffa3 	bl	800901e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2240      	movs	r2, #64	; 0x40
 80050e2:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3708      	adds	r7, #8
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}

080050ee <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80050ee:	b480      	push	{r7}
 80050f0:	b083      	sub	sp, #12
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
 80050f6:	460b      	mov	r3, r1
 80050f8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	78fa      	ldrb	r2, [r7, #3]
 80050fe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	370c      	adds	r7, #12
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr

0800510e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800510e:	b480      	push	{r7}
 8005110:	b083      	sub	sp, #12
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2204      	movs	r2, #4
 8005126:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800512a:	2300      	movs	r3, #0
}
 800512c:	4618      	mov	r0, r3
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005146:	2b04      	cmp	r3, #4
 8005148:	d105      	bne.n	8005156 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005172:	2b03      	cmp	r3, #3
 8005174:	d10b      	bne.n	800518e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800517c:	69db      	ldr	r3, [r3, #28]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d005      	beq.n	800518e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005188:	69db      	ldr	r3, [r3, #28]
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3708      	adds	r7, #8
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	460b      	mov	r3, r1
 80051a2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	370c      	adds	r7, #12
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b083      	sub	sp, #12
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
 80051ba:	460b      	mov	r3, r1
 80051bc:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	370c      	adds	r7, #12
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	370c      	adds	r7, #12
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr

080051e2 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b082      	sub	sp, #8
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d009      	beq.n	8005210 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	6852      	ldr	r2, [r2, #4]
 8005208:	b2d2      	uxtb	r2, r2
 800520a:	4611      	mov	r1, r2
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	4798      	blx	r3
  }

  return USBD_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3708      	adds	r7, #8
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}

0800521a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800521a:	b480      	push	{r7}
 800521c:	b087      	sub	sp, #28
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	3301      	adds	r3, #1
 8005230:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005238:	8a3b      	ldrh	r3, [r7, #16]
 800523a:	021b      	lsls	r3, r3, #8
 800523c:	b21a      	sxth	r2, r3
 800523e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005242:	4313      	orrs	r3, r2
 8005244:	b21b      	sxth	r3, r3
 8005246:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005248:	89fb      	ldrh	r3, [r7, #14]
}
 800524a:	4618      	mov	r0, r3
 800524c:	371c      	adds	r7, #28
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
	...

08005258 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005262:	2300      	movs	r3, #0
 8005264:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800526e:	2b20      	cmp	r3, #32
 8005270:	d004      	beq.n	800527c <USBD_StdDevReq+0x24>
 8005272:	2b40      	cmp	r3, #64	; 0x40
 8005274:	d002      	beq.n	800527c <USBD_StdDevReq+0x24>
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00a      	beq.n	8005290 <USBD_StdDevReq+0x38>
 800527a:	e050      	b.n	800531e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	6839      	ldr	r1, [r7, #0]
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	4798      	blx	r3
 800528a:	4603      	mov	r3, r0
 800528c:	73fb      	strb	r3, [r7, #15]
    break;
 800528e:	e04b      	b.n	8005328 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	785b      	ldrb	r3, [r3, #1]
 8005294:	2b09      	cmp	r3, #9
 8005296:	d83c      	bhi.n	8005312 <USBD_StdDevReq+0xba>
 8005298:	a201      	add	r2, pc, #4	; (adr r2, 80052a0 <USBD_StdDevReq+0x48>)
 800529a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800529e:	bf00      	nop
 80052a0:	080052f5 	.word	0x080052f5
 80052a4:	08005309 	.word	0x08005309
 80052a8:	08005313 	.word	0x08005313
 80052ac:	080052ff 	.word	0x080052ff
 80052b0:	08005313 	.word	0x08005313
 80052b4:	080052d3 	.word	0x080052d3
 80052b8:	080052c9 	.word	0x080052c9
 80052bc:	08005313 	.word	0x08005313
 80052c0:	080052eb 	.word	0x080052eb
 80052c4:	080052dd 	.word	0x080052dd
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80052c8:	6839      	ldr	r1, [r7, #0]
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 f9ce 	bl	800566c <USBD_GetDescriptor>
      break;
 80052d0:	e024      	b.n	800531c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80052d2:	6839      	ldr	r1, [r7, #0]
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 fb33 	bl	8005940 <USBD_SetAddress>
      break;
 80052da:	e01f      	b.n	800531c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80052dc:	6839      	ldr	r1, [r7, #0]
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 fb70 	bl	80059c4 <USBD_SetConfig>
 80052e4:	4603      	mov	r3, r0
 80052e6:	73fb      	strb	r3, [r7, #15]
      break;
 80052e8:	e018      	b.n	800531c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80052ea:	6839      	ldr	r1, [r7, #0]
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 fc0d 	bl	8005b0c <USBD_GetConfig>
      break;
 80052f2:	e013      	b.n	800531c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80052f4:	6839      	ldr	r1, [r7, #0]
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 fc3c 	bl	8005b74 <USBD_GetStatus>
      break;
 80052fc:	e00e      	b.n	800531c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80052fe:	6839      	ldr	r1, [r7, #0]
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 fc6a 	bl	8005bda <USBD_SetFeature>
      break;
 8005306:	e009      	b.n	800531c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8005308:	6839      	ldr	r1, [r7, #0]
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 fc79 	bl	8005c02 <USBD_ClrFeature>
      break;
 8005310:	e004      	b.n	800531c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8005312:	6839      	ldr	r1, [r7, #0]
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 fccf 	bl	8005cb8 <USBD_CtlError>
      break;
 800531a:	bf00      	nop
    }
    break;
 800531c:	e004      	b.n	8005328 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800531e:	6839      	ldr	r1, [r7, #0]
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 fcc9 	bl	8005cb8 <USBD_CtlError>
    break;
 8005326:	bf00      	nop
  }

  return ret;
 8005328:	7bfb      	ldrb	r3, [r7, #15]
}
 800532a:	4618      	mov	r0, r3
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop

08005334 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800533e:	2300      	movs	r3, #0
 8005340:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800534a:	2b20      	cmp	r3, #32
 800534c:	d003      	beq.n	8005356 <USBD_StdItfReq+0x22>
 800534e:	2b40      	cmp	r3, #64	; 0x40
 8005350:	d001      	beq.n	8005356 <USBD_StdItfReq+0x22>
 8005352:	2b00      	cmp	r3, #0
 8005354:	d12a      	bne.n	80053ac <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800535c:	3b01      	subs	r3, #1
 800535e:	2b02      	cmp	r3, #2
 8005360:	d81d      	bhi.n	800539e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	889b      	ldrh	r3, [r3, #4]
 8005366:	b2db      	uxtb	r3, r3
 8005368:	2b01      	cmp	r3, #1
 800536a:	d813      	bhi.n	8005394 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	6839      	ldr	r1, [r7, #0]
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	4798      	blx	r3
 800537a:	4603      	mov	r3, r0
 800537c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	88db      	ldrh	r3, [r3, #6]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d110      	bne.n	80053a8 <USBD_StdItfReq+0x74>
 8005386:	7bfb      	ldrb	r3, [r7, #15]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d10d      	bne.n	80053a8 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 fd5e 	bl	8005e4e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8005392:	e009      	b.n	80053a8 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8005394:	6839      	ldr	r1, [r7, #0]
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 fc8e 	bl	8005cb8 <USBD_CtlError>
      break;
 800539c:	e004      	b.n	80053a8 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800539e:	6839      	ldr	r1, [r7, #0]
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 fc89 	bl	8005cb8 <USBD_CtlError>
      break;
 80053a6:	e000      	b.n	80053aa <USBD_StdItfReq+0x76>
      break;
 80053a8:	bf00      	nop
    }
    break;
 80053aa:	e004      	b.n	80053b6 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80053ac:	6839      	ldr	r1, [r7, #0]
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 fc82 	bl	8005cb8 <USBD_CtlError>
    break;
 80053b4:	bf00      	nop
  }

  return ret;
 80053b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3710      	adds	r7, #16
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80053ca:	2300      	movs	r3, #0
 80053cc:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	889b      	ldrh	r3, [r3, #4]
 80053d2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80053dc:	2b20      	cmp	r3, #32
 80053de:	d004      	beq.n	80053ea <USBD_StdEPReq+0x2a>
 80053e0:	2b40      	cmp	r3, #64	; 0x40
 80053e2:	d002      	beq.n	80053ea <USBD_StdEPReq+0x2a>
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00a      	beq.n	80053fe <USBD_StdEPReq+0x3e>
 80053e8:	e135      	b.n	8005656 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	6839      	ldr	r1, [r7, #0]
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	4798      	blx	r3
 80053f8:	4603      	mov	r3, r0
 80053fa:	73fb      	strb	r3, [r7, #15]
    break;
 80053fc:	e130      	b.n	8005660 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	785b      	ldrb	r3, [r3, #1]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d03e      	beq.n	8005484 <USBD_StdEPReq+0xc4>
 8005406:	2b03      	cmp	r3, #3
 8005408:	d002      	beq.n	8005410 <USBD_StdEPReq+0x50>
 800540a:	2b00      	cmp	r3, #0
 800540c:	d077      	beq.n	80054fe <USBD_StdEPReq+0x13e>
 800540e:	e11c      	b.n	800564a <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005416:	2b02      	cmp	r3, #2
 8005418:	d002      	beq.n	8005420 <USBD_StdEPReq+0x60>
 800541a:	2b03      	cmp	r3, #3
 800541c:	d015      	beq.n	800544a <USBD_StdEPReq+0x8a>
 800541e:	e02b      	b.n	8005478 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005420:	7bbb      	ldrb	r3, [r7, #14]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00c      	beq.n	8005440 <USBD_StdEPReq+0x80>
 8005426:	7bbb      	ldrb	r3, [r7, #14]
 8005428:	2b80      	cmp	r3, #128	; 0x80
 800542a:	d009      	beq.n	8005440 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800542c:	7bbb      	ldrb	r3, [r7, #14]
 800542e:	4619      	mov	r1, r3
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f003 fe39 	bl	80090a8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005436:	2180      	movs	r1, #128	; 0x80
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f003 fe35 	bl	80090a8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800543e:	e020      	b.n	8005482 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8005440:	6839      	ldr	r1, [r7, #0]
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 fc38 	bl	8005cb8 <USBD_CtlError>
        break;
 8005448:	e01b      	b.n	8005482 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	885b      	ldrh	r3, [r3, #2]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d10e      	bne.n	8005470 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005452:	7bbb      	ldrb	r3, [r7, #14]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d00b      	beq.n	8005470 <USBD_StdEPReq+0xb0>
 8005458:	7bbb      	ldrb	r3, [r7, #14]
 800545a:	2b80      	cmp	r3, #128	; 0x80
 800545c:	d008      	beq.n	8005470 <USBD_StdEPReq+0xb0>
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	88db      	ldrh	r3, [r3, #6]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d104      	bne.n	8005470 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8005466:	7bbb      	ldrb	r3, [r7, #14]
 8005468:	4619      	mov	r1, r3
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f003 fe1c 	bl	80090a8 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 fcec 	bl	8005e4e <USBD_CtlSendStatus>

        break;
 8005476:	e004      	b.n	8005482 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8005478:	6839      	ldr	r1, [r7, #0]
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 fc1c 	bl	8005cb8 <USBD_CtlError>
        break;
 8005480:	bf00      	nop
      }
      break;
 8005482:	e0e7      	b.n	8005654 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800548a:	2b02      	cmp	r3, #2
 800548c:	d002      	beq.n	8005494 <USBD_StdEPReq+0xd4>
 800548e:	2b03      	cmp	r3, #3
 8005490:	d015      	beq.n	80054be <USBD_StdEPReq+0xfe>
 8005492:	e02d      	b.n	80054f0 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005494:	7bbb      	ldrb	r3, [r7, #14]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00c      	beq.n	80054b4 <USBD_StdEPReq+0xf4>
 800549a:	7bbb      	ldrb	r3, [r7, #14]
 800549c:	2b80      	cmp	r3, #128	; 0x80
 800549e:	d009      	beq.n	80054b4 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80054a0:	7bbb      	ldrb	r3, [r7, #14]
 80054a2:	4619      	mov	r1, r3
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f003 fdff 	bl	80090a8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80054aa:	2180      	movs	r1, #128	; 0x80
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f003 fdfb 	bl	80090a8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80054b2:	e023      	b.n	80054fc <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 80054b4:	6839      	ldr	r1, [r7, #0]
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 fbfe 	bl	8005cb8 <USBD_CtlError>
        break;
 80054bc:	e01e      	b.n	80054fc <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	885b      	ldrh	r3, [r3, #2]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d119      	bne.n	80054fa <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80054c6:	7bbb      	ldrb	r3, [r7, #14]
 80054c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d004      	beq.n	80054da <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80054d0:	7bbb      	ldrb	r3, [r7, #14]
 80054d2:	4619      	mov	r1, r3
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f003 fe06 	bl	80090e6 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 fcb7 	bl	8005e4e <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	6839      	ldr	r1, [r7, #0]
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	4798      	blx	r3
        }
        break;
 80054ee:	e004      	b.n	80054fa <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 80054f0:	6839      	ldr	r1, [r7, #0]
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 fbe0 	bl	8005cb8 <USBD_CtlError>
        break;
 80054f8:	e000      	b.n	80054fc <USBD_StdEPReq+0x13c>
        break;
 80054fa:	bf00      	nop
      }
      break;
 80054fc:	e0aa      	b.n	8005654 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005504:	2b02      	cmp	r3, #2
 8005506:	d002      	beq.n	800550e <USBD_StdEPReq+0x14e>
 8005508:	2b03      	cmp	r3, #3
 800550a:	d032      	beq.n	8005572 <USBD_StdEPReq+0x1b2>
 800550c:	e097      	b.n	800563e <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800550e:	7bbb      	ldrb	r3, [r7, #14]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d007      	beq.n	8005524 <USBD_StdEPReq+0x164>
 8005514:	7bbb      	ldrb	r3, [r7, #14]
 8005516:	2b80      	cmp	r3, #128	; 0x80
 8005518:	d004      	beq.n	8005524 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800551a:	6839      	ldr	r1, [r7, #0]
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 fbcb 	bl	8005cb8 <USBD_CtlError>
          break;
 8005522:	e091      	b.n	8005648 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005524:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005528:	2b00      	cmp	r3, #0
 800552a:	da0b      	bge.n	8005544 <USBD_StdEPReq+0x184>
 800552c:	7bbb      	ldrb	r3, [r7, #14]
 800552e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005532:	4613      	mov	r3, r2
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	4413      	add	r3, r2
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	3310      	adds	r3, #16
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	4413      	add	r3, r2
 8005540:	3304      	adds	r3, #4
 8005542:	e00b      	b.n	800555c <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8005544:	7bbb      	ldrb	r3, [r7, #14]
 8005546:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800554a:	4613      	mov	r3, r2
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	4413      	add	r3, r2
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	4413      	add	r3, r2
 800555a:	3304      	adds	r3, #4
 800555c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	2200      	movs	r2, #0
 8005562:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	2202      	movs	r2, #2
 8005568:	4619      	mov	r1, r3
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 fc15 	bl	8005d9a <USBD_CtlSendData>
        break;
 8005570:	e06a      	b.n	8005648 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8005572:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005576:	2b00      	cmp	r3, #0
 8005578:	da11      	bge.n	800559e <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800557a:	7bbb      	ldrb	r3, [r7, #14]
 800557c:	f003 020f 	and.w	r2, r3, #15
 8005580:	6879      	ldr	r1, [r7, #4]
 8005582:	4613      	mov	r3, r2
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	4413      	add	r3, r2
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	440b      	add	r3, r1
 800558c:	3324      	adds	r3, #36	; 0x24
 800558e:	881b      	ldrh	r3, [r3, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d117      	bne.n	80055c4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8005594:	6839      	ldr	r1, [r7, #0]
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 fb8e 	bl	8005cb8 <USBD_CtlError>
            break;
 800559c:	e054      	b.n	8005648 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800559e:	7bbb      	ldrb	r3, [r7, #14]
 80055a0:	f003 020f 	and.w	r2, r3, #15
 80055a4:	6879      	ldr	r1, [r7, #4]
 80055a6:	4613      	mov	r3, r2
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	4413      	add	r3, r2
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	440b      	add	r3, r1
 80055b0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80055b4:	881b      	ldrh	r3, [r3, #0]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d104      	bne.n	80055c4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80055ba:	6839      	ldr	r1, [r7, #0]
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 fb7b 	bl	8005cb8 <USBD_CtlError>
            break;
 80055c2:	e041      	b.n	8005648 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80055c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	da0b      	bge.n	80055e4 <USBD_StdEPReq+0x224>
 80055cc:	7bbb      	ldrb	r3, [r7, #14]
 80055ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80055d2:	4613      	mov	r3, r2
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	4413      	add	r3, r2
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	3310      	adds	r3, #16
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	4413      	add	r3, r2
 80055e0:	3304      	adds	r3, #4
 80055e2:	e00b      	b.n	80055fc <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80055e4:	7bbb      	ldrb	r3, [r7, #14]
 80055e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80055ea:	4613      	mov	r3, r2
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	4413      	add	r3, r2
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	4413      	add	r3, r2
 80055fa:	3304      	adds	r3, #4
 80055fc:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80055fe:	7bbb      	ldrb	r3, [r7, #14]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d002      	beq.n	800560a <USBD_StdEPReq+0x24a>
 8005604:	7bbb      	ldrb	r3, [r7, #14]
 8005606:	2b80      	cmp	r3, #128	; 0x80
 8005608:	d103      	bne.n	8005612 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	2200      	movs	r2, #0
 800560e:	601a      	str	r2, [r3, #0]
 8005610:	e00e      	b.n	8005630 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005612:	7bbb      	ldrb	r3, [r7, #14]
 8005614:	4619      	mov	r1, r3
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f003 fd84 	bl	8009124 <USBD_LL_IsStallEP>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d003      	beq.n	800562a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	2201      	movs	r2, #1
 8005626:	601a      	str	r2, [r3, #0]
 8005628:	e002      	b.n	8005630 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	2200      	movs	r2, #0
 800562e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	2202      	movs	r2, #2
 8005634:	4619      	mov	r1, r3
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 fbaf 	bl	8005d9a <USBD_CtlSendData>
          break;
 800563c:	e004      	b.n	8005648 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800563e:	6839      	ldr	r1, [r7, #0]
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f000 fb39 	bl	8005cb8 <USBD_CtlError>
        break;
 8005646:	bf00      	nop
      }
      break;
 8005648:	e004      	b.n	8005654 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800564a:	6839      	ldr	r1, [r7, #0]
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f000 fb33 	bl	8005cb8 <USBD_CtlError>
      break;
 8005652:	bf00      	nop
    }
    break;
 8005654:	e004      	b.n	8005660 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8005656:	6839      	ldr	r1, [r7, #0]
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 fb2d 	bl	8005cb8 <USBD_CtlError>
    break;
 800565e:	bf00      	nop
  }

  return ret;
 8005660:	7bfb      	ldrb	r3, [r7, #15]
}
 8005662:	4618      	mov	r0, r3
 8005664:	3710      	adds	r7, #16
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
	...

0800566c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005676:	2300      	movs	r3, #0
 8005678:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800567a:	2300      	movs	r3, #0
 800567c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800567e:	2300      	movs	r3, #0
 8005680:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	885b      	ldrh	r3, [r3, #2]
 8005686:	0a1b      	lsrs	r3, r3, #8
 8005688:	b29b      	uxth	r3, r3
 800568a:	3b01      	subs	r3, #1
 800568c:	2b06      	cmp	r3, #6
 800568e:	f200 8128 	bhi.w	80058e2 <USBD_GetDescriptor+0x276>
 8005692:	a201      	add	r2, pc, #4	; (adr r2, 8005698 <USBD_GetDescriptor+0x2c>)
 8005694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005698:	080056b5 	.word	0x080056b5
 800569c:	080056cd 	.word	0x080056cd
 80056a0:	0800570d 	.word	0x0800570d
 80056a4:	080058e3 	.word	0x080058e3
 80056a8:	080058e3 	.word	0x080058e3
 80056ac:	08005883 	.word	0x08005883
 80056b0:	080058af 	.word	0x080058af
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	7c12      	ldrb	r2, [r2, #16]
 80056c0:	f107 0108 	add.w	r1, r7, #8
 80056c4:	4610      	mov	r0, r2
 80056c6:	4798      	blx	r3
 80056c8:	60f8      	str	r0, [r7, #12]
    break;
 80056ca:	e112      	b.n	80058f2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	7c1b      	ldrb	r3, [r3, #16]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d10d      	bne.n	80056f0 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056dc:	f107 0208 	add.w	r2, r7, #8
 80056e0:	4610      	mov	r0, r2
 80056e2:	4798      	blx	r3
 80056e4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	3301      	adds	r3, #1
 80056ea:	2202      	movs	r2, #2
 80056ec:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80056ee:	e100      	b.n	80058f2 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f8:	f107 0208 	add.w	r2, r7, #8
 80056fc:	4610      	mov	r0, r2
 80056fe:	4798      	blx	r3
 8005700:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	3301      	adds	r3, #1
 8005706:	2202      	movs	r2, #2
 8005708:	701a      	strb	r2, [r3, #0]
    break;
 800570a:	e0f2      	b.n	80058f2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	885b      	ldrh	r3, [r3, #2]
 8005710:	b2db      	uxtb	r3, r3
 8005712:	2b05      	cmp	r3, #5
 8005714:	f200 80ac 	bhi.w	8005870 <USBD_GetDescriptor+0x204>
 8005718:	a201      	add	r2, pc, #4	; (adr r2, 8005720 <USBD_GetDescriptor+0xb4>)
 800571a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800571e:	bf00      	nop
 8005720:	08005739 	.word	0x08005739
 8005724:	0800576d 	.word	0x0800576d
 8005728:	080057a1 	.word	0x080057a1
 800572c:	080057d5 	.word	0x080057d5
 8005730:	08005809 	.word	0x08005809
 8005734:	0800583d 	.word	0x0800583d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d00b      	beq.n	800575c <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	7c12      	ldrb	r2, [r2, #16]
 8005750:	f107 0108 	add.w	r1, r7, #8
 8005754:	4610      	mov	r0, r2
 8005756:	4798      	blx	r3
 8005758:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800575a:	e091      	b.n	8005880 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800575c:	6839      	ldr	r1, [r7, #0]
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 faaa 	bl	8005cb8 <USBD_CtlError>
        err++;
 8005764:	7afb      	ldrb	r3, [r7, #11]
 8005766:	3301      	adds	r3, #1
 8005768:	72fb      	strb	r3, [r7, #11]
      break;
 800576a:	e089      	b.n	8005880 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00b      	beq.n	8005790 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	7c12      	ldrb	r2, [r2, #16]
 8005784:	f107 0108 	add.w	r1, r7, #8
 8005788:	4610      	mov	r0, r2
 800578a:	4798      	blx	r3
 800578c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800578e:	e077      	b.n	8005880 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005790:	6839      	ldr	r1, [r7, #0]
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 fa90 	bl	8005cb8 <USBD_CtlError>
        err++;
 8005798:	7afb      	ldrb	r3, [r7, #11]
 800579a:	3301      	adds	r3, #1
 800579c:	72fb      	strb	r3, [r7, #11]
      break;
 800579e:	e06f      	b.n	8005880 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00b      	beq.n	80057c4 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	7c12      	ldrb	r2, [r2, #16]
 80057b8:	f107 0108 	add.w	r1, r7, #8
 80057bc:	4610      	mov	r0, r2
 80057be:	4798      	blx	r3
 80057c0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80057c2:	e05d      	b.n	8005880 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80057c4:	6839      	ldr	r1, [r7, #0]
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 fa76 	bl	8005cb8 <USBD_CtlError>
        err++;
 80057cc:	7afb      	ldrb	r3, [r7, #11]
 80057ce:	3301      	adds	r3, #1
 80057d0:	72fb      	strb	r3, [r7, #11]
      break;
 80057d2:	e055      	b.n	8005880 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00b      	beq.n	80057f8 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	7c12      	ldrb	r2, [r2, #16]
 80057ec:	f107 0108 	add.w	r1, r7, #8
 80057f0:	4610      	mov	r0, r2
 80057f2:	4798      	blx	r3
 80057f4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80057f6:	e043      	b.n	8005880 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80057f8:	6839      	ldr	r1, [r7, #0]
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 fa5c 	bl	8005cb8 <USBD_CtlError>
        err++;
 8005800:	7afb      	ldrb	r3, [r7, #11]
 8005802:	3301      	adds	r3, #1
 8005804:	72fb      	strb	r3, [r7, #11]
      break;
 8005806:	e03b      	b.n	8005880 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800580e:	695b      	ldr	r3, [r3, #20]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00b      	beq.n	800582c <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800581a:	695b      	ldr	r3, [r3, #20]
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	7c12      	ldrb	r2, [r2, #16]
 8005820:	f107 0108 	add.w	r1, r7, #8
 8005824:	4610      	mov	r0, r2
 8005826:	4798      	blx	r3
 8005828:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800582a:	e029      	b.n	8005880 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800582c:	6839      	ldr	r1, [r7, #0]
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 fa42 	bl	8005cb8 <USBD_CtlError>
        err++;
 8005834:	7afb      	ldrb	r3, [r7, #11]
 8005836:	3301      	adds	r3, #1
 8005838:	72fb      	strb	r3, [r7, #11]
      break;
 800583a:	e021      	b.n	8005880 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005842:	699b      	ldr	r3, [r3, #24]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d00b      	beq.n	8005860 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800584e:	699b      	ldr	r3, [r3, #24]
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	7c12      	ldrb	r2, [r2, #16]
 8005854:	f107 0108 	add.w	r1, r7, #8
 8005858:	4610      	mov	r0, r2
 800585a:	4798      	blx	r3
 800585c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800585e:	e00f      	b.n	8005880 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005860:	6839      	ldr	r1, [r7, #0]
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 fa28 	bl	8005cb8 <USBD_CtlError>
        err++;
 8005868:	7afb      	ldrb	r3, [r7, #11]
 800586a:	3301      	adds	r3, #1
 800586c:	72fb      	strb	r3, [r7, #11]
      break;
 800586e:	e007      	b.n	8005880 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8005870:	6839      	ldr	r1, [r7, #0]
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 fa20 	bl	8005cb8 <USBD_CtlError>
      err++;
 8005878:	7afb      	ldrb	r3, [r7, #11]
 800587a:	3301      	adds	r3, #1
 800587c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800587e:	bf00      	nop
    }
    break;
 8005880:	e037      	b.n	80058f2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	7c1b      	ldrb	r3, [r3, #16]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d109      	bne.n	800589e <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005892:	f107 0208 	add.w	r2, r7, #8
 8005896:	4610      	mov	r0, r2
 8005898:	4798      	blx	r3
 800589a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800589c:	e029      	b.n	80058f2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800589e:	6839      	ldr	r1, [r7, #0]
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 fa09 	bl	8005cb8 <USBD_CtlError>
      err++;
 80058a6:	7afb      	ldrb	r3, [r7, #11]
 80058a8:	3301      	adds	r3, #1
 80058aa:	72fb      	strb	r3, [r7, #11]
    break;
 80058ac:	e021      	b.n	80058f2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	7c1b      	ldrb	r3, [r3, #16]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d10d      	bne.n	80058d2 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058be:	f107 0208 	add.w	r2, r7, #8
 80058c2:	4610      	mov	r0, r2
 80058c4:	4798      	blx	r3
 80058c6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	3301      	adds	r3, #1
 80058cc:	2207      	movs	r2, #7
 80058ce:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80058d0:	e00f      	b.n	80058f2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80058d2:	6839      	ldr	r1, [r7, #0]
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 f9ef 	bl	8005cb8 <USBD_CtlError>
      err++;
 80058da:	7afb      	ldrb	r3, [r7, #11]
 80058dc:	3301      	adds	r3, #1
 80058de:	72fb      	strb	r3, [r7, #11]
    break;
 80058e0:	e007      	b.n	80058f2 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 80058e2:	6839      	ldr	r1, [r7, #0]
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f000 f9e7 	bl	8005cb8 <USBD_CtlError>
    err++;
 80058ea:	7afb      	ldrb	r3, [r7, #11]
 80058ec:	3301      	adds	r3, #1
 80058ee:	72fb      	strb	r3, [r7, #11]
    break;
 80058f0:	bf00      	nop
  }

  if (err != 0U)
 80058f2:	7afb      	ldrb	r3, [r7, #11]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d11e      	bne.n	8005936 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	88db      	ldrh	r3, [r3, #6]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d016      	beq.n	800592e <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8005900:	893b      	ldrh	r3, [r7, #8]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00e      	beq.n	8005924 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	88da      	ldrh	r2, [r3, #6]
 800590a:	893b      	ldrh	r3, [r7, #8]
 800590c:	4293      	cmp	r3, r2
 800590e:	bf28      	it	cs
 8005910:	4613      	movcs	r3, r2
 8005912:	b29b      	uxth	r3, r3
 8005914:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8005916:	893b      	ldrh	r3, [r7, #8]
 8005918:	461a      	mov	r2, r3
 800591a:	68f9      	ldr	r1, [r7, #12]
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f000 fa3c 	bl	8005d9a <USBD_CtlSendData>
 8005922:	e009      	b.n	8005938 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8005924:	6839      	ldr	r1, [r7, #0]
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 f9c6 	bl	8005cb8 <USBD_CtlError>
 800592c:	e004      	b.n	8005938 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 fa8d 	bl	8005e4e <USBD_CtlSendStatus>
 8005934:	e000      	b.n	8005938 <USBD_GetDescriptor+0x2cc>
    return;
 8005936:	bf00      	nop
    }
  }
}
 8005938:	3710      	adds	r7, #16
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop

08005940 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	889b      	ldrh	r3, [r3, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d130      	bne.n	80059b4 <USBD_SetAddress+0x74>
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	88db      	ldrh	r3, [r3, #6]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d12c      	bne.n	80059b4 <USBD_SetAddress+0x74>
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	885b      	ldrh	r3, [r3, #2]
 800595e:	2b7f      	cmp	r3, #127	; 0x7f
 8005960:	d828      	bhi.n	80059b4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	885b      	ldrh	r3, [r3, #2]
 8005966:	b2db      	uxtb	r3, r3
 8005968:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800596c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005974:	2b03      	cmp	r3, #3
 8005976:	d104      	bne.n	8005982 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005978:	6839      	ldr	r1, [r7, #0]
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 f99c 	bl	8005cb8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005980:	e01c      	b.n	80059bc <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	7bfa      	ldrb	r2, [r7, #15]
 8005986:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800598a:	7bfb      	ldrb	r3, [r7, #15]
 800598c:	4619      	mov	r1, r3
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f003 fbf4 	bl	800917c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 fa5a 	bl	8005e4e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800599a:	7bfb      	ldrb	r3, [r7, #15]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d004      	beq.n	80059aa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2202      	movs	r2, #2
 80059a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059a8:	e008      	b.n	80059bc <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2201      	movs	r2, #1
 80059ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059b2:	e003      	b.n	80059bc <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80059b4:	6839      	ldr	r1, [r7, #0]
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 f97e 	bl	8005cb8 <USBD_CtlError>
  }
}
 80059bc:	bf00      	nop
 80059be:	3710      	adds	r7, #16
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80059ce:	2300      	movs	r3, #0
 80059d0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	885b      	ldrh	r3, [r3, #2]
 80059d6:	b2da      	uxtb	r2, r3
 80059d8:	4b4b      	ldr	r3, [pc, #300]	; (8005b08 <USBD_SetConfig+0x144>)
 80059da:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80059dc:	4b4a      	ldr	r3, [pc, #296]	; (8005b08 <USBD_SetConfig+0x144>)
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d905      	bls.n	80059f0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80059e4:	6839      	ldr	r1, [r7, #0]
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 f966 	bl	8005cb8 <USBD_CtlError>
    return USBD_FAIL;
 80059ec:	2303      	movs	r3, #3
 80059ee:	e087      	b.n	8005b00 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d002      	beq.n	8005a00 <USBD_SetConfig+0x3c>
 80059fa:	2b03      	cmp	r3, #3
 80059fc:	d025      	beq.n	8005a4a <USBD_SetConfig+0x86>
 80059fe:	e071      	b.n	8005ae4 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8005a00:	4b41      	ldr	r3, [pc, #260]	; (8005b08 <USBD_SetConfig+0x144>)
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d01c      	beq.n	8005a42 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8005a08:	4b3f      	ldr	r3, [pc, #252]	; (8005b08 <USBD_SetConfig+0x144>)
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8005a12:	4b3d      	ldr	r3, [pc, #244]	; (8005b08 <USBD_SetConfig+0x144>)
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	4619      	mov	r1, r3
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f7ff f9a7 	bl	8004d6c <USBD_SetClassConfig>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8005a22:	7bfb      	ldrb	r3, [r7, #15]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d004      	beq.n	8005a32 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8005a28:	6839      	ldr	r1, [r7, #0]
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 f944 	bl	8005cb8 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8005a30:	e065      	b.n	8005afe <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 fa0b 	bl	8005e4e <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2203      	movs	r2, #3
 8005a3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8005a40:	e05d      	b.n	8005afe <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 fa03 	bl	8005e4e <USBD_CtlSendStatus>
    break;
 8005a48:	e059      	b.n	8005afe <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8005a4a:	4b2f      	ldr	r3, [pc, #188]	; (8005b08 <USBD_SetConfig+0x144>)
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d112      	bne.n	8005a78 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2202      	movs	r2, #2
 8005a56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8005a5a:	4b2b      	ldr	r3, [pc, #172]	; (8005b08 <USBD_SetConfig+0x144>)
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	461a      	mov	r2, r3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005a64:	4b28      	ldr	r3, [pc, #160]	; (8005b08 <USBD_SetConfig+0x144>)
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	4619      	mov	r1, r3
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f7ff f99a 	bl	8004da4 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f000 f9ec 	bl	8005e4e <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8005a76:	e042      	b.n	8005afe <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8005a78:	4b23      	ldr	r3, [pc, #140]	; (8005b08 <USBD_SetConfig+0x144>)
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d02a      	beq.n	8005adc <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f7ff f988 	bl	8004da4 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8005a94:	4b1c      	ldr	r3, [pc, #112]	; (8005b08 <USBD_SetConfig+0x144>)
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	461a      	mov	r2, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8005a9e:	4b1a      	ldr	r3, [pc, #104]	; (8005b08 <USBD_SetConfig+0x144>)
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f7ff f961 	bl	8004d6c <USBD_SetClassConfig>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8005aae:	7bfb      	ldrb	r3, [r7, #15]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00f      	beq.n	8005ad4 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8005ab4:	6839      	ldr	r1, [r7, #0]
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 f8fe 	bl	8005cb8 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f7ff f96d 	bl	8004da4 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2202      	movs	r2, #2
 8005ace:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8005ad2:	e014      	b.n	8005afe <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 f9ba 	bl	8005e4e <USBD_CtlSendStatus>
    break;
 8005ada:	e010      	b.n	8005afe <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f000 f9b6 	bl	8005e4e <USBD_CtlSendStatus>
    break;
 8005ae2:	e00c      	b.n	8005afe <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8005ae4:	6839      	ldr	r1, [r7, #0]
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 f8e6 	bl	8005cb8 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005aec:	4b06      	ldr	r3, [pc, #24]	; (8005b08 <USBD_SetConfig+0x144>)
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	4619      	mov	r1, r3
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f7ff f956 	bl	8004da4 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8005af8:	2303      	movs	r3, #3
 8005afa:	73fb      	strb	r3, [r7, #15]
    break;
 8005afc:	bf00      	nop
  }

  return ret;
 8005afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3710      	adds	r7, #16
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	2000020c 	.word	0x2000020c

08005b0c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	88db      	ldrh	r3, [r3, #6]
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d004      	beq.n	8005b28 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005b1e:	6839      	ldr	r1, [r7, #0]
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 f8c9 	bl	8005cb8 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8005b26:	e021      	b.n	8005b6c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	db17      	blt.n	8005b62 <USBD_GetConfig+0x56>
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	dd02      	ble.n	8005b3c <USBD_GetConfig+0x30>
 8005b36:	2b03      	cmp	r3, #3
 8005b38:	d00b      	beq.n	8005b52 <USBD_GetConfig+0x46>
 8005b3a:	e012      	b.n	8005b62 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	3308      	adds	r3, #8
 8005b46:	2201      	movs	r2, #1
 8005b48:	4619      	mov	r1, r3
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 f925 	bl	8005d9a <USBD_CtlSendData>
      break;
 8005b50:	e00c      	b.n	8005b6c <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	3304      	adds	r3, #4
 8005b56:	2201      	movs	r2, #1
 8005b58:	4619      	mov	r1, r3
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 f91d 	bl	8005d9a <USBD_CtlSendData>
      break;
 8005b60:	e004      	b.n	8005b6c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8005b62:	6839      	ldr	r1, [r7, #0]
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 f8a7 	bl	8005cb8 <USBD_CtlError>
      break;
 8005b6a:	bf00      	nop
}
 8005b6c:	bf00      	nop
 8005b6e:	3708      	adds	r7, #8
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b84:	3b01      	subs	r3, #1
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d81e      	bhi.n	8005bc8 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	88db      	ldrh	r3, [r3, #6]
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	d004      	beq.n	8005b9c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8005b92:	6839      	ldr	r1, [r7, #0]
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 f88f 	bl	8005cb8 <USBD_CtlError>
      break;
 8005b9a:	e01a      	b.n	8005bd2 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d005      	beq.n	8005bb8 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	f043 0202 	orr.w	r2, r3, #2
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	330c      	adds	r3, #12
 8005bbc:	2202      	movs	r2, #2
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f000 f8ea 	bl	8005d9a <USBD_CtlSendData>
    break;
 8005bc6:	e004      	b.n	8005bd2 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8005bc8:	6839      	ldr	r1, [r7, #0]
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 f874 	bl	8005cb8 <USBD_CtlError>
    break;
 8005bd0:	bf00      	nop
  }
}
 8005bd2:	bf00      	nop
 8005bd4:	3708      	adds	r7, #8
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}

08005bda <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005bda:	b580      	push	{r7, lr}
 8005bdc:	b082      	sub	sp, #8
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
 8005be2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	885b      	ldrh	r3, [r3, #2]
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d106      	bne.n	8005bfa <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 f92a 	bl	8005e4e <USBD_CtlSendStatus>
  }
}
 8005bfa:	bf00      	nop
 8005bfc:	3708      	adds	r7, #8
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c02:	b580      	push	{r7, lr}
 8005c04:	b082      	sub	sp, #8
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
 8005c0a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c12:	3b01      	subs	r3, #1
 8005c14:	2b02      	cmp	r3, #2
 8005c16:	d80b      	bhi.n	8005c30 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	885b      	ldrh	r3, [r3, #2]
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d10c      	bne.n	8005c3a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f000 f910 	bl	8005e4e <USBD_CtlSendStatus>
      }
      break;
 8005c2e:	e004      	b.n	8005c3a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8005c30:	6839      	ldr	r1, [r7, #0]
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 f840 	bl	8005cb8 <USBD_CtlError>
      break;
 8005c38:	e000      	b.n	8005c3c <USBD_ClrFeature+0x3a>
      break;
 8005c3a:	bf00      	nop
  }
}
 8005c3c:	bf00      	nop
 8005c3e:	3708      	adds	r7, #8
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	781a      	ldrb	r2, [r3, #0]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	781a      	ldrb	r2, [r3, #0]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	f7ff fad3 	bl	800521a <SWAPBYTE>
 8005c74:	4603      	mov	r3, r0
 8005c76:	461a      	mov	r2, r3
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	3301      	adds	r3, #1
 8005c80:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	3301      	adds	r3, #1
 8005c86:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f7ff fac6 	bl	800521a <SWAPBYTE>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	461a      	mov	r2, r3
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	3301      	adds	r3, #1
 8005c9a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	f7ff fab9 	bl	800521a <SWAPBYTE>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	461a      	mov	r2, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	80da      	strh	r2, [r3, #6]
}
 8005cb0:	bf00      	nop
 8005cb2:	3710      	adds	r7, #16
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005cc2:	2180      	movs	r1, #128	; 0x80
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f003 f9ef 	bl	80090a8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005cca:	2100      	movs	r1, #0
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f003 f9eb 	bl	80090a8 <USBD_LL_StallEP>
}
 8005cd2:	bf00      	nop
 8005cd4:	3708      	adds	r7, #8
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}

08005cda <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	b086      	sub	sp, #24
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	60f8      	str	r0, [r7, #12]
 8005ce2:	60b9      	str	r1, [r7, #8]
 8005ce4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d036      	beq.n	8005d5e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005cf4:	6938      	ldr	r0, [r7, #16]
 8005cf6:	f000 f836 	bl	8005d66 <USBD_GetLen>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	005b      	lsls	r3, r3, #1
 8005d02:	b29a      	uxth	r2, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005d08:	7dfb      	ldrb	r3, [r7, #23]
 8005d0a:	68ba      	ldr	r2, [r7, #8]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	7812      	ldrb	r2, [r2, #0]
 8005d12:	701a      	strb	r2, [r3, #0]
  idx++;
 8005d14:	7dfb      	ldrb	r3, [r7, #23]
 8005d16:	3301      	adds	r3, #1
 8005d18:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005d1a:	7dfb      	ldrb	r3, [r7, #23]
 8005d1c:	68ba      	ldr	r2, [r7, #8]
 8005d1e:	4413      	add	r3, r2
 8005d20:	2203      	movs	r2, #3
 8005d22:	701a      	strb	r2, [r3, #0]
  idx++;
 8005d24:	7dfb      	ldrb	r3, [r7, #23]
 8005d26:	3301      	adds	r3, #1
 8005d28:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005d2a:	e013      	b.n	8005d54 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8005d2c:	7dfb      	ldrb	r3, [r7, #23]
 8005d2e:	68ba      	ldr	r2, [r7, #8]
 8005d30:	4413      	add	r3, r2
 8005d32:	693a      	ldr	r2, [r7, #16]
 8005d34:	7812      	ldrb	r2, [r2, #0]
 8005d36:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	613b      	str	r3, [r7, #16]
    idx++;
 8005d3e:	7dfb      	ldrb	r3, [r7, #23]
 8005d40:	3301      	adds	r3, #1
 8005d42:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005d44:	7dfb      	ldrb	r3, [r7, #23]
 8005d46:	68ba      	ldr	r2, [r7, #8]
 8005d48:	4413      	add	r3, r2
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	701a      	strb	r2, [r3, #0]
    idx++;
 8005d4e:	7dfb      	ldrb	r3, [r7, #23]
 8005d50:	3301      	adds	r3, #1
 8005d52:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d1e7      	bne.n	8005d2c <USBD_GetString+0x52>
 8005d5c:	e000      	b.n	8005d60 <USBD_GetString+0x86>
    return;
 8005d5e:	bf00      	nop
  }
}
 8005d60:	3718      	adds	r7, #24
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}

08005d66 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005d66:	b480      	push	{r7}
 8005d68:	b085      	sub	sp, #20
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005d76:	e005      	b.n	8005d84 <USBD_GetLen+0x1e>
  {
    len++;
 8005d78:	7bfb      	ldrb	r3, [r7, #15]
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	3301      	adds	r3, #1
 8005d82:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d1f5      	bne.n	8005d78 <USBD_GetLen+0x12>
  }

  return len;
 8005d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3714      	adds	r7, #20
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr

08005d9a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005d9a:	b580      	push	{r7, lr}
 8005d9c:	b084      	sub	sp, #16
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	60f8      	str	r0, [r7, #12]
 8005da2:	60b9      	str	r1, [r7, #8]
 8005da4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2202      	movs	r2, #2
 8005daa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	68ba      	ldr	r2, [r7, #8]
 8005dbe:	2100      	movs	r1, #0
 8005dc0:	68f8      	ldr	r0, [r7, #12]
 8005dc2:	f003 f9fa 	bl	80091ba <USBD_LL_Transmit>

  return USBD_OK;
 8005dc6:	2300      	movs	r3, #0
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3710      	adds	r7, #16
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	68ba      	ldr	r2, [r7, #8]
 8005de0:	2100      	movs	r1, #0
 8005de2:	68f8      	ldr	r0, [r7, #12]
 8005de4:	f003 f9e9 	bl	80091ba <USBD_LL_Transmit>

  return USBD_OK;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3710      	adds	r7, #16
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}

08005df2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b084      	sub	sp, #16
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	60f8      	str	r0, [r7, #12]
 8005dfa:	60b9      	str	r1, [r7, #8]
 8005dfc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2203      	movs	r2, #3
 8005e02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	68ba      	ldr	r2, [r7, #8]
 8005e1a:	2100      	movs	r1, #0
 8005e1c:	68f8      	ldr	r0, [r7, #12]
 8005e1e:	f003 f9ed 	bl	80091fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005e22:	2300      	movs	r3, #0
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3710      	adds	r7, #16
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	68ba      	ldr	r2, [r7, #8]
 8005e3c:	2100      	movs	r1, #0
 8005e3e:	68f8      	ldr	r0, [r7, #12]
 8005e40:	f003 f9dc 	bl	80091fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3710      	adds	r7, #16
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}

08005e4e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005e4e:	b580      	push	{r7, lr}
 8005e50:	b082      	sub	sp, #8
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2204      	movs	r2, #4
 8005e5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005e5e:	2300      	movs	r3, #0
 8005e60:	2200      	movs	r2, #0
 8005e62:	2100      	movs	r1, #0
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f003 f9a8 	bl	80091ba <USBD_LL_Transmit>

  return USBD_OK;
 8005e6a:	2300      	movs	r3, #0
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3708      	adds	r7, #8
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b082      	sub	sp, #8
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2205      	movs	r2, #5
 8005e80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e84:	2300      	movs	r3, #0
 8005e86:	2200      	movs	r2, #0
 8005e88:	2100      	movs	r1, #0
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f003 f9b6 	bl	80091fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3708      	adds	r7, #8
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005e9a:	b480      	push	{r7}
 8005e9c:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8005e9e:	bf00      	nop
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005ea8:	b480      	push	{r7}
 8005eaa:	b085      	sub	sp, #20
 8005eac:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005eae:	f3ef 8305 	mrs	r3, IPSR
 8005eb2:	60bb      	str	r3, [r7, #8]
  return(result);
 8005eb4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d10f      	bne.n	8005eda <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005eba:	f3ef 8310 	mrs	r3, PRIMASK
 8005ebe:	607b      	str	r3, [r7, #4]
  return(result);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d105      	bne.n	8005ed2 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005ec6:	f3ef 8311 	mrs	r3, BASEPRI
 8005eca:	603b      	str	r3, [r7, #0]
  return(result);
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d007      	beq.n	8005ee2 <osKernelInitialize+0x3a>
 8005ed2:	4b0e      	ldr	r3, [pc, #56]	; (8005f0c <osKernelInitialize+0x64>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2b02      	cmp	r3, #2
 8005ed8:	d103      	bne.n	8005ee2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005eda:	f06f 0305 	mvn.w	r3, #5
 8005ede:	60fb      	str	r3, [r7, #12]
 8005ee0:	e00c      	b.n	8005efc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005ee2:	4b0a      	ldr	r3, [pc, #40]	; (8005f0c <osKernelInitialize+0x64>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d105      	bne.n	8005ef6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005eea:	4b08      	ldr	r3, [pc, #32]	; (8005f0c <osKernelInitialize+0x64>)
 8005eec:	2201      	movs	r2, #1
 8005eee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	60fb      	str	r3, [r7, #12]
 8005ef4:	e002      	b.n	8005efc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005ef6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005efa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005efc:	68fb      	ldr	r3, [r7, #12]
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3714      	adds	r7, #20
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop
 8005f0c:	20000210 	.word	0x20000210

08005f10 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f16:	f3ef 8305 	mrs	r3, IPSR
 8005f1a:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f1c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d10f      	bne.n	8005f42 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f22:	f3ef 8310 	mrs	r3, PRIMASK
 8005f26:	607b      	str	r3, [r7, #4]
  return(result);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d105      	bne.n	8005f3a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005f2e:	f3ef 8311 	mrs	r3, BASEPRI
 8005f32:	603b      	str	r3, [r7, #0]
  return(result);
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d007      	beq.n	8005f4a <osKernelStart+0x3a>
 8005f3a:	4b0f      	ldr	r3, [pc, #60]	; (8005f78 <osKernelStart+0x68>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	2b02      	cmp	r3, #2
 8005f40:	d103      	bne.n	8005f4a <osKernelStart+0x3a>
    stat = osErrorISR;
 8005f42:	f06f 0305 	mvn.w	r3, #5
 8005f46:	60fb      	str	r3, [r7, #12]
 8005f48:	e010      	b.n	8005f6c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005f4a:	4b0b      	ldr	r3, [pc, #44]	; (8005f78 <osKernelStart+0x68>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d109      	bne.n	8005f66 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005f52:	f7ff ffa2 	bl	8005e9a <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005f56:	4b08      	ldr	r3, [pc, #32]	; (8005f78 <osKernelStart+0x68>)
 8005f58:	2202      	movs	r2, #2
 8005f5a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005f5c:	f001 f870 	bl	8007040 <vTaskStartScheduler>
      stat = osOK;
 8005f60:	2300      	movs	r3, #0
 8005f62:	60fb      	str	r3, [r7, #12]
 8005f64:	e002      	b.n	8005f6c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8005f66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f6a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3710      	adds	r7, #16
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	20000210 	.word	0x20000210

08005f7c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b090      	sub	sp, #64	; 0x40
 8005f80:	af04      	add	r7, sp, #16
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f8c:	f3ef 8305 	mrs	r3, IPSR
 8005f90:	61fb      	str	r3, [r7, #28]
  return(result);
 8005f92:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	f040 808f 	bne.w	80060b8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f9a:	f3ef 8310 	mrs	r3, PRIMASK
 8005f9e:	61bb      	str	r3, [r7, #24]
  return(result);
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d105      	bne.n	8005fb2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005fa6:	f3ef 8311 	mrs	r3, BASEPRI
 8005faa:	617b      	str	r3, [r7, #20]
  return(result);
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d003      	beq.n	8005fba <osThreadNew+0x3e>
 8005fb2:	4b44      	ldr	r3, [pc, #272]	; (80060c4 <osThreadNew+0x148>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2b02      	cmp	r3, #2
 8005fb8:	d07e      	beq.n	80060b8 <osThreadNew+0x13c>
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d07b      	beq.n	80060b8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8005fc0:	2380      	movs	r3, #128	; 0x80
 8005fc2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005fc4:	2318      	movs	r3, #24
 8005fc6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8005fcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005fd0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d045      	beq.n	8006064 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d002      	beq.n	8005fe6 <osThreadNew+0x6a>
        name = attr->name;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	699b      	ldr	r3, [r3, #24]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d002      	beq.n	8005ff4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	699b      	ldr	r3, [r3, #24]
 8005ff2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d008      	beq.n	800600c <osThreadNew+0x90>
 8005ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffc:	2b38      	cmp	r3, #56	; 0x38
 8005ffe:	d805      	bhi.n	800600c <osThreadNew+0x90>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	f003 0301 	and.w	r3, r3, #1
 8006008:	2b00      	cmp	r3, #0
 800600a:	d001      	beq.n	8006010 <osThreadNew+0x94>
        return (NULL);
 800600c:	2300      	movs	r3, #0
 800600e:	e054      	b.n	80060ba <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	695b      	ldr	r3, [r3, #20]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d003      	beq.n	8006020 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	695b      	ldr	r3, [r3, #20]
 800601c:	089b      	lsrs	r3, r3, #2
 800601e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d00e      	beq.n	8006046 <osThreadNew+0xca>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	2b5b      	cmp	r3, #91	; 0x5b
 800602e:	d90a      	bls.n	8006046 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006034:	2b00      	cmp	r3, #0
 8006036:	d006      	beq.n	8006046 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	695b      	ldr	r3, [r3, #20]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d002      	beq.n	8006046 <osThreadNew+0xca>
        mem = 1;
 8006040:	2301      	movs	r3, #1
 8006042:	623b      	str	r3, [r7, #32]
 8006044:	e010      	b.n	8006068 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d10c      	bne.n	8006068 <osThreadNew+0xec>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d108      	bne.n	8006068 <osThreadNew+0xec>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d104      	bne.n	8006068 <osThreadNew+0xec>
          mem = 0;
 800605e:	2300      	movs	r3, #0
 8006060:	623b      	str	r3, [r7, #32]
 8006062:	e001      	b.n	8006068 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8006064:	2300      	movs	r3, #0
 8006066:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006068:	6a3b      	ldr	r3, [r7, #32]
 800606a:	2b01      	cmp	r3, #1
 800606c:	d110      	bne.n	8006090 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006076:	9202      	str	r2, [sp, #8]
 8006078:	9301      	str	r3, [sp, #4]
 800607a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607c:	9300      	str	r3, [sp, #0]
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006082:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f000 fe09 	bl	8006c9c <xTaskCreateStatic>
 800608a:	4603      	mov	r3, r0
 800608c:	613b      	str	r3, [r7, #16]
 800608e:	e013      	b.n	80060b8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8006090:	6a3b      	ldr	r3, [r7, #32]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d110      	bne.n	80060b8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006098:	b29a      	uxth	r2, r3
 800609a:	f107 0310 	add.w	r3, r7, #16
 800609e:	9301      	str	r3, [sp, #4]
 80060a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a2:	9300      	str	r3, [sp, #0]
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80060a8:	68f8      	ldr	r0, [r7, #12]
 80060aa:	f000 fe51 	bl	8006d50 <xTaskCreate>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d001      	beq.n	80060b8 <osThreadNew+0x13c>
          hTask = NULL;
 80060b4:	2300      	movs	r3, #0
 80060b6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80060b8:	693b      	ldr	r3, [r7, #16]
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3730      	adds	r7, #48	; 0x30
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	20000210 	.word	0x20000210

080060c8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b086      	sub	sp, #24
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060d0:	f3ef 8305 	mrs	r3, IPSR
 80060d4:	613b      	str	r3, [r7, #16]
  return(result);
 80060d6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d10f      	bne.n	80060fc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060dc:	f3ef 8310 	mrs	r3, PRIMASK
 80060e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d105      	bne.n	80060f4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80060e8:	f3ef 8311 	mrs	r3, BASEPRI
 80060ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d007      	beq.n	8006104 <osDelay+0x3c>
 80060f4:	4b0a      	ldr	r3, [pc, #40]	; (8006120 <osDelay+0x58>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	d103      	bne.n	8006104 <osDelay+0x3c>
    stat = osErrorISR;
 80060fc:	f06f 0305 	mvn.w	r3, #5
 8006100:	617b      	str	r3, [r7, #20]
 8006102:	e007      	b.n	8006114 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006104:	2300      	movs	r3, #0
 8006106:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d002      	beq.n	8006114 <osDelay+0x4c>
      vTaskDelay(ticks);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 ff62 	bl	8006fd8 <vTaskDelay>
    }
  }

  return (stat);
 8006114:	697b      	ldr	r3, [r7, #20]
}
 8006116:	4618      	mov	r0, r3
 8006118:	3718      	adds	r7, #24
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	20000210 	.word	0x20000210

08006124 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006124:	b480      	push	{r7}
 8006126:	b085      	sub	sp, #20
 8006128:	af00      	add	r7, sp, #0
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	4a07      	ldr	r2, [pc, #28]	; (8006150 <vApplicationGetIdleTaskMemory+0x2c>)
 8006134:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	4a06      	ldr	r2, [pc, #24]	; (8006154 <vApplicationGetIdleTaskMemory+0x30>)
 800613a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2280      	movs	r2, #128	; 0x80
 8006140:	601a      	str	r2, [r3, #0]
}
 8006142:	bf00      	nop
 8006144:	3714      	adds	r7, #20
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	20000214 	.word	0x20000214
 8006154:	20000270 	.word	0x20000270

08006158 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006158:	b480      	push	{r7}
 800615a:	b085      	sub	sp, #20
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	4a07      	ldr	r2, [pc, #28]	; (8006184 <vApplicationGetTimerTaskMemory+0x2c>)
 8006168:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	4a06      	ldr	r2, [pc, #24]	; (8006188 <vApplicationGetTimerTaskMemory+0x30>)
 800616e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006176:	601a      	str	r2, [r3, #0]
}
 8006178:	bf00      	nop
 800617a:	3714      	adds	r7, #20
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr
 8006184:	20000470 	.word	0x20000470
 8006188:	200004cc 	.word	0x200004cc

0800618c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f103 0208 	add.w	r2, r3, #8
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80061a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f103 0208 	add.w	r2, r3, #8
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f103 0208 	add.w	r2, r3, #8
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80061c0:	bf00      	nop
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80061da:	bf00      	nop
 80061dc:	370c      	adds	r7, #12
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr

080061e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80061e6:	b480      	push	{r7}
 80061e8:	b085      	sub	sp, #20
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
 80061ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	689a      	ldr	r2, [r3, #8]
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	683a      	ldr	r2, [r7, #0]
 800620a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	683a      	ldr	r2, [r7, #0]
 8006210:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	1c5a      	adds	r2, r3, #1
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	601a      	str	r2, [r3, #0]
}
 8006222:	bf00      	nop
 8006224:	3714      	adds	r7, #20
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr

0800622e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800622e:	b480      	push	{r7}
 8006230:	b085      	sub	sp, #20
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
 8006236:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006244:	d103      	bne.n	800624e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	60fb      	str	r3, [r7, #12]
 800624c:	e00c      	b.n	8006268 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	3308      	adds	r3, #8
 8006252:	60fb      	str	r3, [r7, #12]
 8006254:	e002      	b.n	800625c <vListInsert+0x2e>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	60fb      	str	r3, [r7, #12]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68ba      	ldr	r2, [r7, #8]
 8006264:	429a      	cmp	r2, r3
 8006266:	d2f6      	bcs.n	8006256 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	685a      	ldr	r2, [r3, #4]
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	683a      	ldr	r2, [r7, #0]
 8006276:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	68fa      	ldr	r2, [r7, #12]
 800627c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	683a      	ldr	r2, [r7, #0]
 8006282:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	1c5a      	adds	r2, r3, #1
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	601a      	str	r2, [r3, #0]
}
 8006294:	bf00      	nop
 8006296:	3714      	adds	r7, #20
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80062a0:	b480      	push	{r7}
 80062a2:	b085      	sub	sp, #20
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	6892      	ldr	r2, [r2, #8]
 80062b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	6852      	ldr	r2, [r2, #4]
 80062c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d103      	bne.n	80062d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	689a      	ldr	r2, [r3, #8]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	1e5a      	subs	r2, r3, #1
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3714      	adds	r7, #20
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d109      	bne.n	800631c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800630c:	f383 8811 	msr	BASEPRI, r3
 8006310:	f3bf 8f6f 	isb	sy
 8006314:	f3bf 8f4f 	dsb	sy
 8006318:	60bb      	str	r3, [r7, #8]
 800631a:	e7fe      	b.n	800631a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800631c:	f002 f80e 	bl	800833c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006328:	68f9      	ldr	r1, [r7, #12]
 800632a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800632c:	fb01 f303 	mul.w	r3, r1, r3
 8006330:	441a      	add	r2, r3
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2200      	movs	r2, #0
 800633a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800634c:	3b01      	subs	r3, #1
 800634e:	68f9      	ldr	r1, [r7, #12]
 8006350:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006352:	fb01 f303 	mul.w	r3, r1, r3
 8006356:	441a      	add	r2, r3
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	22ff      	movs	r2, #255	; 0xff
 8006360:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	22ff      	movs	r2, #255	; 0xff
 8006368:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d114      	bne.n	800639c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d01a      	beq.n	80063b0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	3310      	adds	r3, #16
 800637e:	4618      	mov	r0, r3
 8006380:	f001 f8de 	bl	8007540 <xTaskRemoveFromEventList>
 8006384:	4603      	mov	r3, r0
 8006386:	2b00      	cmp	r3, #0
 8006388:	d012      	beq.n	80063b0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800638a:	4b0d      	ldr	r3, [pc, #52]	; (80063c0 <xQueueGenericReset+0xcc>)
 800638c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006390:	601a      	str	r2, [r3, #0]
 8006392:	f3bf 8f4f 	dsb	sy
 8006396:	f3bf 8f6f 	isb	sy
 800639a:	e009      	b.n	80063b0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	3310      	adds	r3, #16
 80063a0:	4618      	mov	r0, r3
 80063a2:	f7ff fef3 	bl	800618c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	3324      	adds	r3, #36	; 0x24
 80063aa:	4618      	mov	r0, r3
 80063ac:	f7ff feee 	bl	800618c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80063b0:	f001 fff2 	bl	8008398 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80063b4:	2301      	movs	r3, #1
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3710      	adds	r7, #16
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	e000ed04 	.word	0xe000ed04

080063c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b08e      	sub	sp, #56	; 0x38
 80063c8:	af02      	add	r7, sp, #8
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	607a      	str	r2, [r7, #4]
 80063d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d109      	bne.n	80063ec <xQueueGenericCreateStatic+0x28>
 80063d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063dc:	f383 8811 	msr	BASEPRI, r3
 80063e0:	f3bf 8f6f 	isb	sy
 80063e4:	f3bf 8f4f 	dsb	sy
 80063e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80063ea:	e7fe      	b.n	80063ea <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d109      	bne.n	8006406 <xQueueGenericCreateStatic+0x42>
 80063f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f6:	f383 8811 	msr	BASEPRI, r3
 80063fa:	f3bf 8f6f 	isb	sy
 80063fe:	f3bf 8f4f 	dsb	sy
 8006402:	627b      	str	r3, [r7, #36]	; 0x24
 8006404:	e7fe      	b.n	8006404 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d002      	beq.n	8006412 <xQueueGenericCreateStatic+0x4e>
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d001      	beq.n	8006416 <xQueueGenericCreateStatic+0x52>
 8006412:	2301      	movs	r3, #1
 8006414:	e000      	b.n	8006418 <xQueueGenericCreateStatic+0x54>
 8006416:	2300      	movs	r3, #0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d109      	bne.n	8006430 <xQueueGenericCreateStatic+0x6c>
 800641c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006420:	f383 8811 	msr	BASEPRI, r3
 8006424:	f3bf 8f6f 	isb	sy
 8006428:	f3bf 8f4f 	dsb	sy
 800642c:	623b      	str	r3, [r7, #32]
 800642e:	e7fe      	b.n	800642e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d102      	bne.n	800643c <xQueueGenericCreateStatic+0x78>
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d101      	bne.n	8006440 <xQueueGenericCreateStatic+0x7c>
 800643c:	2301      	movs	r3, #1
 800643e:	e000      	b.n	8006442 <xQueueGenericCreateStatic+0x7e>
 8006440:	2300      	movs	r3, #0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d109      	bne.n	800645a <xQueueGenericCreateStatic+0x96>
 8006446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644a:	f383 8811 	msr	BASEPRI, r3
 800644e:	f3bf 8f6f 	isb	sy
 8006452:	f3bf 8f4f 	dsb	sy
 8006456:	61fb      	str	r3, [r7, #28]
 8006458:	e7fe      	b.n	8006458 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800645a:	2350      	movs	r3, #80	; 0x50
 800645c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	2b50      	cmp	r3, #80	; 0x50
 8006462:	d009      	beq.n	8006478 <xQueueGenericCreateStatic+0xb4>
 8006464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006468:	f383 8811 	msr	BASEPRI, r3
 800646c:	f3bf 8f6f 	isb	sy
 8006470:	f3bf 8f4f 	dsb	sy
 8006474:	61bb      	str	r3, [r7, #24]
 8006476:	e7fe      	b.n	8006476 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006478:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800647e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00d      	beq.n	80064a0 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006486:	2201      	movs	r2, #1
 8006488:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800648c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006492:	9300      	str	r3, [sp, #0]
 8006494:	4613      	mov	r3, r2
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	68b9      	ldr	r1, [r7, #8]
 800649a:	68f8      	ldr	r0, [r7, #12]
 800649c:	f000 f805 	bl	80064aa <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80064a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3730      	adds	r7, #48	; 0x30
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}

080064aa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80064aa:	b580      	push	{r7, lr}
 80064ac:	b084      	sub	sp, #16
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	60f8      	str	r0, [r7, #12]
 80064b2:	60b9      	str	r1, [r7, #8]
 80064b4:	607a      	str	r2, [r7, #4]
 80064b6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d103      	bne.n	80064c6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	69ba      	ldr	r2, [r7, #24]
 80064c2:	601a      	str	r2, [r3, #0]
 80064c4:	e002      	b.n	80064cc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80064cc:	69bb      	ldr	r3, [r7, #24]
 80064ce:	68fa      	ldr	r2, [r7, #12]
 80064d0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80064d2:	69bb      	ldr	r3, [r7, #24]
 80064d4:	68ba      	ldr	r2, [r7, #8]
 80064d6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80064d8:	2101      	movs	r1, #1
 80064da:	69b8      	ldr	r0, [r7, #24]
 80064dc:	f7ff ff0a 	bl	80062f4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	78fa      	ldrb	r2, [r7, #3]
 80064e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80064e8:	bf00      	nop
 80064ea:	3710      	adds	r7, #16
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b08e      	sub	sp, #56	; 0x38
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	607a      	str	r2, [r7, #4]
 80064fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80064fe:	2300      	movs	r3, #0
 8006500:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006508:	2b00      	cmp	r3, #0
 800650a:	d109      	bne.n	8006520 <xQueueGenericSend+0x30>
 800650c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006510:	f383 8811 	msr	BASEPRI, r3
 8006514:	f3bf 8f6f 	isb	sy
 8006518:	f3bf 8f4f 	dsb	sy
 800651c:	62bb      	str	r3, [r7, #40]	; 0x28
 800651e:	e7fe      	b.n	800651e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d103      	bne.n	800652e <xQueueGenericSend+0x3e>
 8006526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800652a:	2b00      	cmp	r3, #0
 800652c:	d101      	bne.n	8006532 <xQueueGenericSend+0x42>
 800652e:	2301      	movs	r3, #1
 8006530:	e000      	b.n	8006534 <xQueueGenericSend+0x44>
 8006532:	2300      	movs	r3, #0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d109      	bne.n	800654c <xQueueGenericSend+0x5c>
 8006538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800653c:	f383 8811 	msr	BASEPRI, r3
 8006540:	f3bf 8f6f 	isb	sy
 8006544:	f3bf 8f4f 	dsb	sy
 8006548:	627b      	str	r3, [r7, #36]	; 0x24
 800654a:	e7fe      	b.n	800654a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	2b02      	cmp	r3, #2
 8006550:	d103      	bne.n	800655a <xQueueGenericSend+0x6a>
 8006552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006556:	2b01      	cmp	r3, #1
 8006558:	d101      	bne.n	800655e <xQueueGenericSend+0x6e>
 800655a:	2301      	movs	r3, #1
 800655c:	e000      	b.n	8006560 <xQueueGenericSend+0x70>
 800655e:	2300      	movs	r3, #0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d109      	bne.n	8006578 <xQueueGenericSend+0x88>
 8006564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006568:	f383 8811 	msr	BASEPRI, r3
 800656c:	f3bf 8f6f 	isb	sy
 8006570:	f3bf 8f4f 	dsb	sy
 8006574:	623b      	str	r3, [r7, #32]
 8006576:	e7fe      	b.n	8006576 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006578:	f001 f998 	bl	80078ac <xTaskGetSchedulerState>
 800657c:	4603      	mov	r3, r0
 800657e:	2b00      	cmp	r3, #0
 8006580:	d102      	bne.n	8006588 <xQueueGenericSend+0x98>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d101      	bne.n	800658c <xQueueGenericSend+0x9c>
 8006588:	2301      	movs	r3, #1
 800658a:	e000      	b.n	800658e <xQueueGenericSend+0x9e>
 800658c:	2300      	movs	r3, #0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d109      	bne.n	80065a6 <xQueueGenericSend+0xb6>
 8006592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006596:	f383 8811 	msr	BASEPRI, r3
 800659a:	f3bf 8f6f 	isb	sy
 800659e:	f3bf 8f4f 	dsb	sy
 80065a2:	61fb      	str	r3, [r7, #28]
 80065a4:	e7fe      	b.n	80065a4 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80065a6:	f001 fec9 	bl	800833c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80065aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d302      	bcc.n	80065bc <xQueueGenericSend+0xcc>
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	2b02      	cmp	r3, #2
 80065ba:	d129      	bne.n	8006610 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80065bc:	683a      	ldr	r2, [r7, #0]
 80065be:	68b9      	ldr	r1, [r7, #8]
 80065c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065c2:	f000 f9ff 	bl	80069c4 <prvCopyDataToQueue>
 80065c6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d010      	beq.n	80065f2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d2:	3324      	adds	r3, #36	; 0x24
 80065d4:	4618      	mov	r0, r3
 80065d6:	f000 ffb3 	bl	8007540 <xTaskRemoveFromEventList>
 80065da:	4603      	mov	r3, r0
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d013      	beq.n	8006608 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80065e0:	4b3f      	ldr	r3, [pc, #252]	; (80066e0 <xQueueGenericSend+0x1f0>)
 80065e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065e6:	601a      	str	r2, [r3, #0]
 80065e8:	f3bf 8f4f 	dsb	sy
 80065ec:	f3bf 8f6f 	isb	sy
 80065f0:	e00a      	b.n	8006608 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80065f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d007      	beq.n	8006608 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80065f8:	4b39      	ldr	r3, [pc, #228]	; (80066e0 <xQueueGenericSend+0x1f0>)
 80065fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065fe:	601a      	str	r2, [r3, #0]
 8006600:	f3bf 8f4f 	dsb	sy
 8006604:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006608:	f001 fec6 	bl	8008398 <vPortExitCritical>
				return pdPASS;
 800660c:	2301      	movs	r3, #1
 800660e:	e063      	b.n	80066d8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d103      	bne.n	800661e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006616:	f001 febf 	bl	8008398 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800661a:	2300      	movs	r3, #0
 800661c:	e05c      	b.n	80066d8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800661e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006620:	2b00      	cmp	r3, #0
 8006622:	d106      	bne.n	8006632 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006624:	f107 0314 	add.w	r3, r7, #20
 8006628:	4618      	mov	r0, r3
 800662a:	f000 ffeb 	bl	8007604 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800662e:	2301      	movs	r3, #1
 8006630:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006632:	f001 feb1 	bl	8008398 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006636:	f000 fd67 	bl	8007108 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800663a:	f001 fe7f 	bl	800833c <vPortEnterCritical>
 800663e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006640:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006644:	b25b      	sxtb	r3, r3
 8006646:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800664a:	d103      	bne.n	8006654 <xQueueGenericSend+0x164>
 800664c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664e:	2200      	movs	r2, #0
 8006650:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006656:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800665a:	b25b      	sxtb	r3, r3
 800665c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006660:	d103      	bne.n	800666a <xQueueGenericSend+0x17a>
 8006662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006664:	2200      	movs	r2, #0
 8006666:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800666a:	f001 fe95 	bl	8008398 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800666e:	1d3a      	adds	r2, r7, #4
 8006670:	f107 0314 	add.w	r3, r7, #20
 8006674:	4611      	mov	r1, r2
 8006676:	4618      	mov	r0, r3
 8006678:	f000 ffda 	bl	8007630 <xTaskCheckForTimeOut>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d124      	bne.n	80066cc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006682:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006684:	f000 fa96 	bl	8006bb4 <prvIsQueueFull>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d018      	beq.n	80066c0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800668e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006690:	3310      	adds	r3, #16
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	4611      	mov	r1, r2
 8006696:	4618      	mov	r0, r3
 8006698:	f000 ff04 	bl	80074a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800669c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800669e:	f000 fa21 	bl	8006ae4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80066a2:	f000 fd3f 	bl	8007124 <xTaskResumeAll>
 80066a6:	4603      	mov	r3, r0
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	f47f af7c 	bne.w	80065a6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80066ae:	4b0c      	ldr	r3, [pc, #48]	; (80066e0 <xQueueGenericSend+0x1f0>)
 80066b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066b4:	601a      	str	r2, [r3, #0]
 80066b6:	f3bf 8f4f 	dsb	sy
 80066ba:	f3bf 8f6f 	isb	sy
 80066be:	e772      	b.n	80065a6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80066c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066c2:	f000 fa0f 	bl	8006ae4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80066c6:	f000 fd2d 	bl	8007124 <xTaskResumeAll>
 80066ca:	e76c      	b.n	80065a6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80066cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066ce:	f000 fa09 	bl	8006ae4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80066d2:	f000 fd27 	bl	8007124 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80066d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3738      	adds	r7, #56	; 0x38
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}
 80066e0:	e000ed04 	.word	0xe000ed04

080066e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b08e      	sub	sp, #56	; 0x38
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	60f8      	str	r0, [r7, #12]
 80066ec:	60b9      	str	r1, [r7, #8]
 80066ee:	607a      	str	r2, [r7, #4]
 80066f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80066f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d109      	bne.n	8006710 <xQueueGenericSendFromISR+0x2c>
 80066fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006700:	f383 8811 	msr	BASEPRI, r3
 8006704:	f3bf 8f6f 	isb	sy
 8006708:	f3bf 8f4f 	dsb	sy
 800670c:	627b      	str	r3, [r7, #36]	; 0x24
 800670e:	e7fe      	b.n	800670e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d103      	bne.n	800671e <xQueueGenericSendFromISR+0x3a>
 8006716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671a:	2b00      	cmp	r3, #0
 800671c:	d101      	bne.n	8006722 <xQueueGenericSendFromISR+0x3e>
 800671e:	2301      	movs	r3, #1
 8006720:	e000      	b.n	8006724 <xQueueGenericSendFromISR+0x40>
 8006722:	2300      	movs	r3, #0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d109      	bne.n	800673c <xQueueGenericSendFromISR+0x58>
 8006728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800672c:	f383 8811 	msr	BASEPRI, r3
 8006730:	f3bf 8f6f 	isb	sy
 8006734:	f3bf 8f4f 	dsb	sy
 8006738:	623b      	str	r3, [r7, #32]
 800673a:	e7fe      	b.n	800673a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	2b02      	cmp	r3, #2
 8006740:	d103      	bne.n	800674a <xQueueGenericSendFromISR+0x66>
 8006742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006746:	2b01      	cmp	r3, #1
 8006748:	d101      	bne.n	800674e <xQueueGenericSendFromISR+0x6a>
 800674a:	2301      	movs	r3, #1
 800674c:	e000      	b.n	8006750 <xQueueGenericSendFromISR+0x6c>
 800674e:	2300      	movs	r3, #0
 8006750:	2b00      	cmp	r3, #0
 8006752:	d109      	bne.n	8006768 <xQueueGenericSendFromISR+0x84>
 8006754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006758:	f383 8811 	msr	BASEPRI, r3
 800675c:	f3bf 8f6f 	isb	sy
 8006760:	f3bf 8f4f 	dsb	sy
 8006764:	61fb      	str	r3, [r7, #28]
 8006766:	e7fe      	b.n	8006766 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006768:	f001 fec4 	bl	80084f4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800676c:	f3ef 8211 	mrs	r2, BASEPRI
 8006770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006774:	f383 8811 	msr	BASEPRI, r3
 8006778:	f3bf 8f6f 	isb	sy
 800677c:	f3bf 8f4f 	dsb	sy
 8006780:	61ba      	str	r2, [r7, #24]
 8006782:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006784:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006786:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800678c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006790:	429a      	cmp	r2, r3
 8006792:	d302      	bcc.n	800679a <xQueueGenericSendFromISR+0xb6>
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	2b02      	cmp	r3, #2
 8006798:	d12c      	bne.n	80067f4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800679a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80067a4:	683a      	ldr	r2, [r7, #0]
 80067a6:	68b9      	ldr	r1, [r7, #8]
 80067a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067aa:	f000 f90b 	bl	80069c4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80067ae:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80067b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067b6:	d112      	bne.n	80067de <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d016      	beq.n	80067ee <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c2:	3324      	adds	r3, #36	; 0x24
 80067c4:	4618      	mov	r0, r3
 80067c6:	f000 febb 	bl	8007540 <xTaskRemoveFromEventList>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d00e      	beq.n	80067ee <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d00b      	beq.n	80067ee <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2201      	movs	r2, #1
 80067da:	601a      	str	r2, [r3, #0]
 80067dc:	e007      	b.n	80067ee <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80067de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80067e2:	3301      	adds	r3, #1
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	b25a      	sxtb	r2, r3
 80067e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80067ee:	2301      	movs	r3, #1
 80067f0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80067f2:	e001      	b.n	80067f8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80067f4:	2300      	movs	r3, #0
 80067f6:	637b      	str	r3, [r7, #52]	; 0x34
 80067f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067fa:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006804:	4618      	mov	r0, r3
 8006806:	3738      	adds	r7, #56	; 0x38
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}

0800680c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b08c      	sub	sp, #48	; 0x30
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006818:	2300      	movs	r3, #0
 800681a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006822:	2b00      	cmp	r3, #0
 8006824:	d109      	bne.n	800683a <xQueueReceive+0x2e>
	__asm volatile
 8006826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800682a:	f383 8811 	msr	BASEPRI, r3
 800682e:	f3bf 8f6f 	isb	sy
 8006832:	f3bf 8f4f 	dsb	sy
 8006836:	623b      	str	r3, [r7, #32]
 8006838:	e7fe      	b.n	8006838 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d103      	bne.n	8006848 <xQueueReceive+0x3c>
 8006840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006844:	2b00      	cmp	r3, #0
 8006846:	d101      	bne.n	800684c <xQueueReceive+0x40>
 8006848:	2301      	movs	r3, #1
 800684a:	e000      	b.n	800684e <xQueueReceive+0x42>
 800684c:	2300      	movs	r3, #0
 800684e:	2b00      	cmp	r3, #0
 8006850:	d109      	bne.n	8006866 <xQueueReceive+0x5a>
 8006852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006856:	f383 8811 	msr	BASEPRI, r3
 800685a:	f3bf 8f6f 	isb	sy
 800685e:	f3bf 8f4f 	dsb	sy
 8006862:	61fb      	str	r3, [r7, #28]
 8006864:	e7fe      	b.n	8006864 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006866:	f001 f821 	bl	80078ac <xTaskGetSchedulerState>
 800686a:	4603      	mov	r3, r0
 800686c:	2b00      	cmp	r3, #0
 800686e:	d102      	bne.n	8006876 <xQueueReceive+0x6a>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d101      	bne.n	800687a <xQueueReceive+0x6e>
 8006876:	2301      	movs	r3, #1
 8006878:	e000      	b.n	800687c <xQueueReceive+0x70>
 800687a:	2300      	movs	r3, #0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d109      	bne.n	8006894 <xQueueReceive+0x88>
 8006880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006884:	f383 8811 	msr	BASEPRI, r3
 8006888:	f3bf 8f6f 	isb	sy
 800688c:	f3bf 8f4f 	dsb	sy
 8006890:	61bb      	str	r3, [r7, #24]
 8006892:	e7fe      	b.n	8006892 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006894:	f001 fd52 	bl	800833c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800689c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800689e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d01f      	beq.n	80068e4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80068a4:	68b9      	ldr	r1, [r7, #8]
 80068a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068a8:	f000 f8f6 	bl	8006a98 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80068ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ae:	1e5a      	subs	r2, r3, #1
 80068b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b6:	691b      	ldr	r3, [r3, #16]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d00f      	beq.n	80068dc <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068be:	3310      	adds	r3, #16
 80068c0:	4618      	mov	r0, r3
 80068c2:	f000 fe3d 	bl	8007540 <xTaskRemoveFromEventList>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d007      	beq.n	80068dc <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80068cc:	4b3c      	ldr	r3, [pc, #240]	; (80069c0 <xQueueReceive+0x1b4>)
 80068ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068d2:	601a      	str	r2, [r3, #0]
 80068d4:	f3bf 8f4f 	dsb	sy
 80068d8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80068dc:	f001 fd5c 	bl	8008398 <vPortExitCritical>
				return pdPASS;
 80068e0:	2301      	movs	r3, #1
 80068e2:	e069      	b.n	80069b8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d103      	bne.n	80068f2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80068ea:	f001 fd55 	bl	8008398 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80068ee:	2300      	movs	r3, #0
 80068f0:	e062      	b.n	80069b8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80068f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d106      	bne.n	8006906 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80068f8:	f107 0310 	add.w	r3, r7, #16
 80068fc:	4618      	mov	r0, r3
 80068fe:	f000 fe81 	bl	8007604 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006902:	2301      	movs	r3, #1
 8006904:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006906:	f001 fd47 	bl	8008398 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800690a:	f000 fbfd 	bl	8007108 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800690e:	f001 fd15 	bl	800833c <vPortEnterCritical>
 8006912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006914:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006918:	b25b      	sxtb	r3, r3
 800691a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800691e:	d103      	bne.n	8006928 <xQueueReceive+0x11c>
 8006920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006922:	2200      	movs	r2, #0
 8006924:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800692a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800692e:	b25b      	sxtb	r3, r3
 8006930:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006934:	d103      	bne.n	800693e <xQueueReceive+0x132>
 8006936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006938:	2200      	movs	r2, #0
 800693a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800693e:	f001 fd2b 	bl	8008398 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006942:	1d3a      	adds	r2, r7, #4
 8006944:	f107 0310 	add.w	r3, r7, #16
 8006948:	4611      	mov	r1, r2
 800694a:	4618      	mov	r0, r3
 800694c:	f000 fe70 	bl	8007630 <xTaskCheckForTimeOut>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d123      	bne.n	800699e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006956:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006958:	f000 f916 	bl	8006b88 <prvIsQueueEmpty>
 800695c:	4603      	mov	r3, r0
 800695e:	2b00      	cmp	r3, #0
 8006960:	d017      	beq.n	8006992 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006964:	3324      	adds	r3, #36	; 0x24
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	4611      	mov	r1, r2
 800696a:	4618      	mov	r0, r3
 800696c:	f000 fd9a 	bl	80074a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006970:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006972:	f000 f8b7 	bl	8006ae4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006976:	f000 fbd5 	bl	8007124 <xTaskResumeAll>
 800697a:	4603      	mov	r3, r0
 800697c:	2b00      	cmp	r3, #0
 800697e:	d189      	bne.n	8006894 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8006980:	4b0f      	ldr	r3, [pc, #60]	; (80069c0 <xQueueReceive+0x1b4>)
 8006982:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006986:	601a      	str	r2, [r3, #0]
 8006988:	f3bf 8f4f 	dsb	sy
 800698c:	f3bf 8f6f 	isb	sy
 8006990:	e780      	b.n	8006894 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006992:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006994:	f000 f8a6 	bl	8006ae4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006998:	f000 fbc4 	bl	8007124 <xTaskResumeAll>
 800699c:	e77a      	b.n	8006894 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800699e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069a0:	f000 f8a0 	bl	8006ae4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80069a4:	f000 fbbe 	bl	8007124 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80069a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069aa:	f000 f8ed 	bl	8006b88 <prvIsQueueEmpty>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	f43f af6f 	beq.w	8006894 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80069b6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3730      	adds	r7, #48	; 0x30
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	e000ed04 	.word	0xe000ed04

080069c4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b086      	sub	sp, #24
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80069d0:	2300      	movs	r3, #0
 80069d2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d10d      	bne.n	80069fe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d14d      	bne.n	8006a86 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	4618      	mov	r0, r3
 80069f0:	f000 ff7a 	bl	80078e8 <xTaskPriorityDisinherit>
 80069f4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2200      	movs	r2, #0
 80069fa:	609a      	str	r2, [r3, #8]
 80069fc:	e043      	b.n	8006a86 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d119      	bne.n	8006a38 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6858      	ldr	r0, [r3, #4]
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	68b9      	ldr	r1, [r7, #8]
 8006a10:	f002 fc8e 	bl	8009330 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	685a      	ldr	r2, [r3, #4]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a1c:	441a      	add	r2, r3
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	685a      	ldr	r2, [r3, #4]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d32b      	bcc.n	8006a86 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	605a      	str	r2, [r3, #4]
 8006a36:	e026      	b.n	8006a86 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	68d8      	ldr	r0, [r3, #12]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a40:	461a      	mov	r2, r3
 8006a42:	68b9      	ldr	r1, [r7, #8]
 8006a44:	f002 fc74 	bl	8009330 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	68da      	ldr	r2, [r3, #12]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a50:	425b      	negs	r3, r3
 8006a52:	441a      	add	r2, r3
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	68da      	ldr	r2, [r3, #12]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d207      	bcs.n	8006a74 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	689a      	ldr	r2, [r3, #8]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6c:	425b      	negs	r3, r3
 8006a6e:	441a      	add	r2, r3
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2b02      	cmp	r3, #2
 8006a78:	d105      	bne.n	8006a86 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d002      	beq.n	8006a86 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	3b01      	subs	r3, #1
 8006a84:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	1c5a      	adds	r2, r3, #1
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006a8e:	697b      	ldr	r3, [r7, #20]
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3718      	adds	r7, #24
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d018      	beq.n	8006adc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	68da      	ldr	r2, [r3, #12]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab2:	441a      	add	r2, r3
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	68da      	ldr	r2, [r3, #12]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d303      	bcc.n	8006acc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	68d9      	ldr	r1, [r3, #12]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	6838      	ldr	r0, [r7, #0]
 8006ad8:	f002 fc2a 	bl	8009330 <memcpy>
	}
}
 8006adc:	bf00      	nop
 8006ade:	3708      	adds	r7, #8
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b084      	sub	sp, #16
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006aec:	f001 fc26 	bl	800833c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006af6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006af8:	e011      	b.n	8006b1e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d012      	beq.n	8006b28 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	3324      	adds	r3, #36	; 0x24
 8006b06:	4618      	mov	r0, r3
 8006b08:	f000 fd1a 	bl	8007540 <xTaskRemoveFromEventList>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d001      	beq.n	8006b16 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006b12:	f000 fded 	bl	80076f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006b16:	7bfb      	ldrb	r3, [r7, #15]
 8006b18:	3b01      	subs	r3, #1
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	dce9      	bgt.n	8006afa <prvUnlockQueue+0x16>
 8006b26:	e000      	b.n	8006b2a <prvUnlockQueue+0x46>
					break;
 8006b28:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	22ff      	movs	r2, #255	; 0xff
 8006b2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006b32:	f001 fc31 	bl	8008398 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006b36:	f001 fc01 	bl	800833c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b40:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006b42:	e011      	b.n	8006b68 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	691b      	ldr	r3, [r3, #16]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d012      	beq.n	8006b72 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	3310      	adds	r3, #16
 8006b50:	4618      	mov	r0, r3
 8006b52:	f000 fcf5 	bl	8007540 <xTaskRemoveFromEventList>
 8006b56:	4603      	mov	r3, r0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d001      	beq.n	8006b60 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006b5c:	f000 fdc8 	bl	80076f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006b60:	7bbb      	ldrb	r3, [r7, #14]
 8006b62:	3b01      	subs	r3, #1
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006b68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	dce9      	bgt.n	8006b44 <prvUnlockQueue+0x60>
 8006b70:	e000      	b.n	8006b74 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006b72:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	22ff      	movs	r2, #255	; 0xff
 8006b78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006b7c:	f001 fc0c 	bl	8008398 <vPortExitCritical>
}
 8006b80:	bf00      	nop
 8006b82:	3710      	adds	r7, #16
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006b90:	f001 fbd4 	bl	800833c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d102      	bne.n	8006ba2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	60fb      	str	r3, [r7, #12]
 8006ba0:	e001      	b.n	8006ba6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006ba6:	f001 fbf7 	bl	8008398 <vPortExitCritical>

	return xReturn;
 8006baa:	68fb      	ldr	r3, [r7, #12]
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3710      	adds	r7, #16
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006bbc:	f001 fbbe 	bl	800833c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d102      	bne.n	8006bd2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	60fb      	str	r3, [r7, #12]
 8006bd0:	e001      	b.n	8006bd6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006bd6:	f001 fbdf 	bl	8008398 <vPortExitCritical>

	return xReturn;
 8006bda:	68fb      	ldr	r3, [r7, #12]
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3710      	adds	r7, #16
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006be4:	b480      	push	{r7}
 8006be6:	b085      	sub	sp, #20
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006bee:	2300      	movs	r3, #0
 8006bf0:	60fb      	str	r3, [r7, #12]
 8006bf2:	e014      	b.n	8006c1e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006bf4:	4a0e      	ldr	r2, [pc, #56]	; (8006c30 <vQueueAddToRegistry+0x4c>)
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d10b      	bne.n	8006c18 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006c00:	490b      	ldr	r1, [pc, #44]	; (8006c30 <vQueueAddToRegistry+0x4c>)
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	683a      	ldr	r2, [r7, #0]
 8006c06:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006c0a:	4a09      	ldr	r2, [pc, #36]	; (8006c30 <vQueueAddToRegistry+0x4c>)
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	00db      	lsls	r3, r3, #3
 8006c10:	4413      	add	r3, r2
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006c16:	e005      	b.n	8006c24 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	60fb      	str	r3, [r7, #12]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2b07      	cmp	r3, #7
 8006c22:	d9e7      	bls.n	8006bf4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006c24:	bf00      	nop
 8006c26:	3714      	adds	r7, #20
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr
 8006c30:	20004b68 	.word	0x20004b68

08006c34 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b086      	sub	sp, #24
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	60b9      	str	r1, [r7, #8]
 8006c3e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006c44:	f001 fb7a 	bl	800833c <vPortEnterCritical>
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c4e:	b25b      	sxtb	r3, r3
 8006c50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c54:	d103      	bne.n	8006c5e <vQueueWaitForMessageRestricted+0x2a>
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c64:	b25b      	sxtb	r3, r3
 8006c66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c6a:	d103      	bne.n	8006c74 <vQueueWaitForMessageRestricted+0x40>
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c74:	f001 fb90 	bl	8008398 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d106      	bne.n	8006c8e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	3324      	adds	r3, #36	; 0x24
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	68b9      	ldr	r1, [r7, #8]
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f000 fc2f 	bl	80074ec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006c8e:	6978      	ldr	r0, [r7, #20]
 8006c90:	f7ff ff28 	bl	8006ae4 <prvUnlockQueue>
	}
 8006c94:	bf00      	nop
 8006c96:	3718      	adds	r7, #24
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b08e      	sub	sp, #56	; 0x38
 8006ca0:	af04      	add	r7, sp, #16
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	607a      	str	r2, [r7, #4]
 8006ca8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d109      	bne.n	8006cc4 <xTaskCreateStatic+0x28>
 8006cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb4:	f383 8811 	msr	BASEPRI, r3
 8006cb8:	f3bf 8f6f 	isb	sy
 8006cbc:	f3bf 8f4f 	dsb	sy
 8006cc0:	623b      	str	r3, [r7, #32]
 8006cc2:	e7fe      	b.n	8006cc2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8006cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d109      	bne.n	8006cde <xTaskCreateStatic+0x42>
 8006cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cce:	f383 8811 	msr	BASEPRI, r3
 8006cd2:	f3bf 8f6f 	isb	sy
 8006cd6:	f3bf 8f4f 	dsb	sy
 8006cda:	61fb      	str	r3, [r7, #28]
 8006cdc:	e7fe      	b.n	8006cdc <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006cde:	235c      	movs	r3, #92	; 0x5c
 8006ce0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	2b5c      	cmp	r3, #92	; 0x5c
 8006ce6:	d009      	beq.n	8006cfc <xTaskCreateStatic+0x60>
 8006ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cec:	f383 8811 	msr	BASEPRI, r3
 8006cf0:	f3bf 8f6f 	isb	sy
 8006cf4:	f3bf 8f4f 	dsb	sy
 8006cf8:	61bb      	str	r3, [r7, #24]
 8006cfa:	e7fe      	b.n	8006cfa <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006cfc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d01e      	beq.n	8006d42 <xTaskCreateStatic+0xa6>
 8006d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d01b      	beq.n	8006d42 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d0c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d12:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d16:	2202      	movs	r2, #2
 8006d18:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	9303      	str	r3, [sp, #12]
 8006d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d22:	9302      	str	r3, [sp, #8]
 8006d24:	f107 0314 	add.w	r3, r7, #20
 8006d28:	9301      	str	r3, [sp, #4]
 8006d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2c:	9300      	str	r3, [sp, #0]
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	68b9      	ldr	r1, [r7, #8]
 8006d34:	68f8      	ldr	r0, [r7, #12]
 8006d36:	f000 f850 	bl	8006dda <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006d3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006d3c:	f000 f8dc 	bl	8006ef8 <prvAddNewTaskToReadyList>
 8006d40:	e001      	b.n	8006d46 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8006d42:	2300      	movs	r3, #0
 8006d44:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006d46:	697b      	ldr	r3, [r7, #20]
	}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3728      	adds	r7, #40	; 0x28
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b08c      	sub	sp, #48	; 0x30
 8006d54:	af04      	add	r7, sp, #16
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	603b      	str	r3, [r7, #0]
 8006d5c:	4613      	mov	r3, r2
 8006d5e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006d60:	88fb      	ldrh	r3, [r7, #6]
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	4618      	mov	r0, r3
 8006d66:	f001 fc03 	bl	8008570 <pvPortMalloc>
 8006d6a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d00e      	beq.n	8006d90 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006d72:	205c      	movs	r0, #92	; 0x5c
 8006d74:	f001 fbfc 	bl	8008570 <pvPortMalloc>
 8006d78:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006d7a:	69fb      	ldr	r3, [r7, #28]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d003      	beq.n	8006d88 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	697a      	ldr	r2, [r7, #20]
 8006d84:	631a      	str	r2, [r3, #48]	; 0x30
 8006d86:	e005      	b.n	8006d94 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006d88:	6978      	ldr	r0, [r7, #20]
 8006d8a:	f001 fcb3 	bl	80086f4 <vPortFree>
 8006d8e:	e001      	b.n	8006d94 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006d90:	2300      	movs	r3, #0
 8006d92:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006d94:	69fb      	ldr	r3, [r7, #28]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d017      	beq.n	8006dca <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006da2:	88fa      	ldrh	r2, [r7, #6]
 8006da4:	2300      	movs	r3, #0
 8006da6:	9303      	str	r3, [sp, #12]
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	9302      	str	r3, [sp, #8]
 8006dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dae:	9301      	str	r3, [sp, #4]
 8006db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db2:	9300      	str	r3, [sp, #0]
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	68b9      	ldr	r1, [r7, #8]
 8006db8:	68f8      	ldr	r0, [r7, #12]
 8006dba:	f000 f80e 	bl	8006dda <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006dbe:	69f8      	ldr	r0, [r7, #28]
 8006dc0:	f000 f89a 	bl	8006ef8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	61bb      	str	r3, [r7, #24]
 8006dc8:	e002      	b.n	8006dd0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006dca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006dce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006dd0:	69bb      	ldr	r3, [r7, #24]
	}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3720      	adds	r7, #32
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}

08006dda <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006dda:	b580      	push	{r7, lr}
 8006ddc:	b088      	sub	sp, #32
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	60f8      	str	r0, [r7, #12]
 8006de2:	60b9      	str	r1, [r7, #8]
 8006de4:	607a      	str	r2, [r7, #4]
 8006de6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dea:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	461a      	mov	r2, r3
 8006df2:	21a5      	movs	r1, #165	; 0xa5
 8006df4:	f002 faa7 	bl	8009346 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006e02:	3b01      	subs	r3, #1
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	4413      	add	r3, r2
 8006e08:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006e0a:	69bb      	ldr	r3, [r7, #24]
 8006e0c:	f023 0307 	bic.w	r3, r3, #7
 8006e10:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006e12:	69bb      	ldr	r3, [r7, #24]
 8006e14:	f003 0307 	and.w	r3, r3, #7
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d009      	beq.n	8006e30 <prvInitialiseNewTask+0x56>
 8006e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e20:	f383 8811 	msr	BASEPRI, r3
 8006e24:	f3bf 8f6f 	isb	sy
 8006e28:	f3bf 8f4f 	dsb	sy
 8006e2c:	617b      	str	r3, [r7, #20]
 8006e2e:	e7fe      	b.n	8006e2e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d01f      	beq.n	8006e76 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006e36:	2300      	movs	r3, #0
 8006e38:	61fb      	str	r3, [r7, #28]
 8006e3a:	e012      	b.n	8006e62 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006e3c:	68ba      	ldr	r2, [r7, #8]
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	4413      	add	r3, r2
 8006e42:	7819      	ldrb	r1, [r3, #0]
 8006e44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	4413      	add	r3, r2
 8006e4a:	3334      	adds	r3, #52	; 0x34
 8006e4c:	460a      	mov	r2, r1
 8006e4e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006e50:	68ba      	ldr	r2, [r7, #8]
 8006e52:	69fb      	ldr	r3, [r7, #28]
 8006e54:	4413      	add	r3, r2
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d006      	beq.n	8006e6a <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	3301      	adds	r3, #1
 8006e60:	61fb      	str	r3, [r7, #28]
 8006e62:	69fb      	ldr	r3, [r7, #28]
 8006e64:	2b0f      	cmp	r3, #15
 8006e66:	d9e9      	bls.n	8006e3c <prvInitialiseNewTask+0x62>
 8006e68:	e000      	b.n	8006e6c <prvInitialiseNewTask+0x92>
			{
				break;
 8006e6a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e74:	e003      	b.n	8006e7e <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e80:	2b37      	cmp	r3, #55	; 0x37
 8006e82:	d901      	bls.n	8006e88 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006e84:	2337      	movs	r3, #55	; 0x37
 8006e86:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e8c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e92:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e96:	2200      	movs	r2, #0
 8006e98:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e9c:	3304      	adds	r3, #4
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f7ff f994 	bl	80061cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea6:	3318      	adds	r3, #24
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f7ff f98f 	bl	80061cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006eb2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ebc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ec2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006ed2:	683a      	ldr	r2, [r7, #0]
 8006ed4:	68f9      	ldr	r1, [r7, #12]
 8006ed6:	69b8      	ldr	r0, [r7, #24]
 8006ed8:	f001 f90c 	bl	80080f4 <pxPortInitialiseStack>
 8006edc:	4602      	mov	r2, r0
 8006ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d002      	beq.n	8006eee <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006eec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006eee:	bf00      	nop
 8006ef0:	3720      	adds	r7, #32
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
	...

08006ef8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b082      	sub	sp, #8
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006f00:	f001 fa1c 	bl	800833c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006f04:	4b2d      	ldr	r3, [pc, #180]	; (8006fbc <prvAddNewTaskToReadyList+0xc4>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	3301      	adds	r3, #1
 8006f0a:	4a2c      	ldr	r2, [pc, #176]	; (8006fbc <prvAddNewTaskToReadyList+0xc4>)
 8006f0c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006f0e:	4b2c      	ldr	r3, [pc, #176]	; (8006fc0 <prvAddNewTaskToReadyList+0xc8>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d109      	bne.n	8006f2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006f16:	4a2a      	ldr	r2, [pc, #168]	; (8006fc0 <prvAddNewTaskToReadyList+0xc8>)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006f1c:	4b27      	ldr	r3, [pc, #156]	; (8006fbc <prvAddNewTaskToReadyList+0xc4>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d110      	bne.n	8006f46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006f24:	f000 fc08 	bl	8007738 <prvInitialiseTaskLists>
 8006f28:	e00d      	b.n	8006f46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006f2a:	4b26      	ldr	r3, [pc, #152]	; (8006fc4 <prvAddNewTaskToReadyList+0xcc>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d109      	bne.n	8006f46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006f32:	4b23      	ldr	r3, [pc, #140]	; (8006fc0 <prvAddNewTaskToReadyList+0xc8>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d802      	bhi.n	8006f46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006f40:	4a1f      	ldr	r2, [pc, #124]	; (8006fc0 <prvAddNewTaskToReadyList+0xc8>)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006f46:	4b20      	ldr	r3, [pc, #128]	; (8006fc8 <prvAddNewTaskToReadyList+0xd0>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	4a1e      	ldr	r2, [pc, #120]	; (8006fc8 <prvAddNewTaskToReadyList+0xd0>)
 8006f4e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006f50:	4b1d      	ldr	r3, [pc, #116]	; (8006fc8 <prvAddNewTaskToReadyList+0xd0>)
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f5c:	4b1b      	ldr	r3, [pc, #108]	; (8006fcc <prvAddNewTaskToReadyList+0xd4>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d903      	bls.n	8006f6c <prvAddNewTaskToReadyList+0x74>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f68:	4a18      	ldr	r2, [pc, #96]	; (8006fcc <prvAddNewTaskToReadyList+0xd4>)
 8006f6a:	6013      	str	r3, [r2, #0]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f70:	4613      	mov	r3, r2
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	4413      	add	r3, r2
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	4a15      	ldr	r2, [pc, #84]	; (8006fd0 <prvAddNewTaskToReadyList+0xd8>)
 8006f7a:	441a      	add	r2, r3
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	3304      	adds	r3, #4
 8006f80:	4619      	mov	r1, r3
 8006f82:	4610      	mov	r0, r2
 8006f84:	f7ff f92f 	bl	80061e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006f88:	f001 fa06 	bl	8008398 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006f8c:	4b0d      	ldr	r3, [pc, #52]	; (8006fc4 <prvAddNewTaskToReadyList+0xcc>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d00e      	beq.n	8006fb2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006f94:	4b0a      	ldr	r3, [pc, #40]	; (8006fc0 <prvAddNewTaskToReadyList+0xc8>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d207      	bcs.n	8006fb2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006fa2:	4b0c      	ldr	r3, [pc, #48]	; (8006fd4 <prvAddNewTaskToReadyList+0xdc>)
 8006fa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fa8:	601a      	str	r2, [r3, #0]
 8006faa:	f3bf 8f4f 	dsb	sy
 8006fae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006fb2:	bf00      	nop
 8006fb4:	3708      	adds	r7, #8
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	20000da0 	.word	0x20000da0
 8006fc0:	200008cc 	.word	0x200008cc
 8006fc4:	20000dac 	.word	0x20000dac
 8006fc8:	20000dbc 	.word	0x20000dbc
 8006fcc:	20000da8 	.word	0x20000da8
 8006fd0:	200008d0 	.word	0x200008d0
 8006fd4:	e000ed04 	.word	0xe000ed04

08006fd8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d016      	beq.n	8007018 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006fea:	4b13      	ldr	r3, [pc, #76]	; (8007038 <vTaskDelay+0x60>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d009      	beq.n	8007006 <vTaskDelay+0x2e>
 8006ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff6:	f383 8811 	msr	BASEPRI, r3
 8006ffa:	f3bf 8f6f 	isb	sy
 8006ffe:	f3bf 8f4f 	dsb	sy
 8007002:	60bb      	str	r3, [r7, #8]
 8007004:	e7fe      	b.n	8007004 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8007006:	f000 f87f 	bl	8007108 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800700a:	2100      	movs	r1, #0
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 fcd7 	bl	80079c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007012:	f000 f887 	bl	8007124 <xTaskResumeAll>
 8007016:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d107      	bne.n	800702e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800701e:	4b07      	ldr	r3, [pc, #28]	; (800703c <vTaskDelay+0x64>)
 8007020:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007024:	601a      	str	r2, [r3, #0]
 8007026:	f3bf 8f4f 	dsb	sy
 800702a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800702e:	bf00      	nop
 8007030:	3710      	adds	r7, #16
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
 8007036:	bf00      	nop
 8007038:	20000dc8 	.word	0x20000dc8
 800703c:	e000ed04 	.word	0xe000ed04

08007040 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b08a      	sub	sp, #40	; 0x28
 8007044:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007046:	2300      	movs	r3, #0
 8007048:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800704a:	2300      	movs	r3, #0
 800704c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800704e:	463a      	mov	r2, r7
 8007050:	1d39      	adds	r1, r7, #4
 8007052:	f107 0308 	add.w	r3, r7, #8
 8007056:	4618      	mov	r0, r3
 8007058:	f7ff f864 	bl	8006124 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800705c:	6839      	ldr	r1, [r7, #0]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	68ba      	ldr	r2, [r7, #8]
 8007062:	9202      	str	r2, [sp, #8]
 8007064:	9301      	str	r3, [sp, #4]
 8007066:	2300      	movs	r3, #0
 8007068:	9300      	str	r3, [sp, #0]
 800706a:	2300      	movs	r3, #0
 800706c:	460a      	mov	r2, r1
 800706e:	4920      	ldr	r1, [pc, #128]	; (80070f0 <vTaskStartScheduler+0xb0>)
 8007070:	4820      	ldr	r0, [pc, #128]	; (80070f4 <vTaskStartScheduler+0xb4>)
 8007072:	f7ff fe13 	bl	8006c9c <xTaskCreateStatic>
 8007076:	4602      	mov	r2, r0
 8007078:	4b1f      	ldr	r3, [pc, #124]	; (80070f8 <vTaskStartScheduler+0xb8>)
 800707a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800707c:	4b1e      	ldr	r3, [pc, #120]	; (80070f8 <vTaskStartScheduler+0xb8>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d002      	beq.n	800708a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007084:	2301      	movs	r3, #1
 8007086:	617b      	str	r3, [r7, #20]
 8007088:	e001      	b.n	800708e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800708a:	2300      	movs	r3, #0
 800708c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	2b01      	cmp	r3, #1
 8007092:	d102      	bne.n	800709a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007094:	f000 fce8 	bl	8007a68 <xTimerCreateTimerTask>
 8007098:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	2b01      	cmp	r3, #1
 800709e:	d115      	bne.n	80070cc <vTaskStartScheduler+0x8c>
 80070a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a4:	f383 8811 	msr	BASEPRI, r3
 80070a8:	f3bf 8f6f 	isb	sy
 80070ac:	f3bf 8f4f 	dsb	sy
 80070b0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80070b2:	4b12      	ldr	r3, [pc, #72]	; (80070fc <vTaskStartScheduler+0xbc>)
 80070b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80070b8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80070ba:	4b11      	ldr	r3, [pc, #68]	; (8007100 <vTaskStartScheduler+0xc0>)
 80070bc:	2201      	movs	r2, #1
 80070be:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80070c0:	4b10      	ldr	r3, [pc, #64]	; (8007104 <vTaskStartScheduler+0xc4>)
 80070c2:	2200      	movs	r2, #0
 80070c4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80070c6:	f001 f89b 	bl	8008200 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80070ca:	e00d      	b.n	80070e8 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070d2:	d109      	bne.n	80070e8 <vTaskStartScheduler+0xa8>
 80070d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d8:	f383 8811 	msr	BASEPRI, r3
 80070dc:	f3bf 8f6f 	isb	sy
 80070e0:	f3bf 8f4f 	dsb	sy
 80070e4:	60fb      	str	r3, [r7, #12]
 80070e6:	e7fe      	b.n	80070e6 <vTaskStartScheduler+0xa6>
}
 80070e8:	bf00      	nop
 80070ea:	3718      	adds	r7, #24
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	0800955c 	.word	0x0800955c
 80070f4:	08007709 	.word	0x08007709
 80070f8:	20000dc4 	.word	0x20000dc4
 80070fc:	20000dc0 	.word	0x20000dc0
 8007100:	20000dac 	.word	0x20000dac
 8007104:	20000da4 	.word	0x20000da4

08007108 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007108:	b480      	push	{r7}
 800710a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800710c:	4b04      	ldr	r3, [pc, #16]	; (8007120 <vTaskSuspendAll+0x18>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	3301      	adds	r3, #1
 8007112:	4a03      	ldr	r2, [pc, #12]	; (8007120 <vTaskSuspendAll+0x18>)
 8007114:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007116:	bf00      	nop
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr
 8007120:	20000dc8 	.word	0x20000dc8

08007124 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800712a:	2300      	movs	r3, #0
 800712c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800712e:	2300      	movs	r3, #0
 8007130:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007132:	4b41      	ldr	r3, [pc, #260]	; (8007238 <xTaskResumeAll+0x114>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d109      	bne.n	800714e <xTaskResumeAll+0x2a>
 800713a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800713e:	f383 8811 	msr	BASEPRI, r3
 8007142:	f3bf 8f6f 	isb	sy
 8007146:	f3bf 8f4f 	dsb	sy
 800714a:	603b      	str	r3, [r7, #0]
 800714c:	e7fe      	b.n	800714c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800714e:	f001 f8f5 	bl	800833c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007152:	4b39      	ldr	r3, [pc, #228]	; (8007238 <xTaskResumeAll+0x114>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	3b01      	subs	r3, #1
 8007158:	4a37      	ldr	r2, [pc, #220]	; (8007238 <xTaskResumeAll+0x114>)
 800715a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800715c:	4b36      	ldr	r3, [pc, #216]	; (8007238 <xTaskResumeAll+0x114>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d162      	bne.n	800722a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007164:	4b35      	ldr	r3, [pc, #212]	; (800723c <xTaskResumeAll+0x118>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d05e      	beq.n	800722a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800716c:	e02f      	b.n	80071ce <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800716e:	4b34      	ldr	r3, [pc, #208]	; (8007240 <xTaskResumeAll+0x11c>)
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	3318      	adds	r3, #24
 800717a:	4618      	mov	r0, r3
 800717c:	f7ff f890 	bl	80062a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	3304      	adds	r3, #4
 8007184:	4618      	mov	r0, r3
 8007186:	f7ff f88b 	bl	80062a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800718e:	4b2d      	ldr	r3, [pc, #180]	; (8007244 <xTaskResumeAll+0x120>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	429a      	cmp	r2, r3
 8007194:	d903      	bls.n	800719e <xTaskResumeAll+0x7a>
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800719a:	4a2a      	ldr	r2, [pc, #168]	; (8007244 <xTaskResumeAll+0x120>)
 800719c:	6013      	str	r3, [r2, #0]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071a2:	4613      	mov	r3, r2
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	4413      	add	r3, r2
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	4a27      	ldr	r2, [pc, #156]	; (8007248 <xTaskResumeAll+0x124>)
 80071ac:	441a      	add	r2, r3
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	3304      	adds	r3, #4
 80071b2:	4619      	mov	r1, r3
 80071b4:	4610      	mov	r0, r2
 80071b6:	f7ff f816 	bl	80061e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071be:	4b23      	ldr	r3, [pc, #140]	; (800724c <xTaskResumeAll+0x128>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d302      	bcc.n	80071ce <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80071c8:	4b21      	ldr	r3, [pc, #132]	; (8007250 <xTaskResumeAll+0x12c>)
 80071ca:	2201      	movs	r2, #1
 80071cc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80071ce:	4b1c      	ldr	r3, [pc, #112]	; (8007240 <xTaskResumeAll+0x11c>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d1cb      	bne.n	800716e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d001      	beq.n	80071e0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80071dc:	f000 fb46 	bl	800786c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80071e0:	4b1c      	ldr	r3, [pc, #112]	; (8007254 <xTaskResumeAll+0x130>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d010      	beq.n	800720e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80071ec:	f000 f846 	bl	800727c <xTaskIncrementTick>
 80071f0:	4603      	mov	r3, r0
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d002      	beq.n	80071fc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80071f6:	4b16      	ldr	r3, [pc, #88]	; (8007250 <xTaskResumeAll+0x12c>)
 80071f8:	2201      	movs	r2, #1
 80071fa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	3b01      	subs	r3, #1
 8007200:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d1f1      	bne.n	80071ec <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8007208:	4b12      	ldr	r3, [pc, #72]	; (8007254 <xTaskResumeAll+0x130>)
 800720a:	2200      	movs	r2, #0
 800720c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800720e:	4b10      	ldr	r3, [pc, #64]	; (8007250 <xTaskResumeAll+0x12c>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d009      	beq.n	800722a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007216:	2301      	movs	r3, #1
 8007218:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800721a:	4b0f      	ldr	r3, [pc, #60]	; (8007258 <xTaskResumeAll+0x134>)
 800721c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007220:	601a      	str	r2, [r3, #0]
 8007222:	f3bf 8f4f 	dsb	sy
 8007226:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800722a:	f001 f8b5 	bl	8008398 <vPortExitCritical>

	return xAlreadyYielded;
 800722e:	68bb      	ldr	r3, [r7, #8]
}
 8007230:	4618      	mov	r0, r3
 8007232:	3710      	adds	r7, #16
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}
 8007238:	20000dc8 	.word	0x20000dc8
 800723c:	20000da0 	.word	0x20000da0
 8007240:	20000d60 	.word	0x20000d60
 8007244:	20000da8 	.word	0x20000da8
 8007248:	200008d0 	.word	0x200008d0
 800724c:	200008cc 	.word	0x200008cc
 8007250:	20000db4 	.word	0x20000db4
 8007254:	20000db0 	.word	0x20000db0
 8007258:	e000ed04 	.word	0xe000ed04

0800725c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007262:	4b05      	ldr	r3, [pc, #20]	; (8007278 <xTaskGetTickCount+0x1c>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007268:	687b      	ldr	r3, [r7, #4]
}
 800726a:	4618      	mov	r0, r3
 800726c:	370c      	adds	r7, #12
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr
 8007276:	bf00      	nop
 8007278:	20000da4 	.word	0x20000da4

0800727c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b086      	sub	sp, #24
 8007280:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007282:	2300      	movs	r3, #0
 8007284:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007286:	4b4e      	ldr	r3, [pc, #312]	; (80073c0 <xTaskIncrementTick+0x144>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2b00      	cmp	r3, #0
 800728c:	f040 8088 	bne.w	80073a0 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007290:	4b4c      	ldr	r3, [pc, #304]	; (80073c4 <xTaskIncrementTick+0x148>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	3301      	adds	r3, #1
 8007296:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007298:	4a4a      	ldr	r2, [pc, #296]	; (80073c4 <xTaskIncrementTick+0x148>)
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d11f      	bne.n	80072e4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80072a4:	4b48      	ldr	r3, [pc, #288]	; (80073c8 <xTaskIncrementTick+0x14c>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d009      	beq.n	80072c2 <xTaskIncrementTick+0x46>
 80072ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b2:	f383 8811 	msr	BASEPRI, r3
 80072b6:	f3bf 8f6f 	isb	sy
 80072ba:	f3bf 8f4f 	dsb	sy
 80072be:	603b      	str	r3, [r7, #0]
 80072c0:	e7fe      	b.n	80072c0 <xTaskIncrementTick+0x44>
 80072c2:	4b41      	ldr	r3, [pc, #260]	; (80073c8 <xTaskIncrementTick+0x14c>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	60fb      	str	r3, [r7, #12]
 80072c8:	4b40      	ldr	r3, [pc, #256]	; (80073cc <xTaskIncrementTick+0x150>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a3e      	ldr	r2, [pc, #248]	; (80073c8 <xTaskIncrementTick+0x14c>)
 80072ce:	6013      	str	r3, [r2, #0]
 80072d0:	4a3e      	ldr	r2, [pc, #248]	; (80073cc <xTaskIncrementTick+0x150>)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6013      	str	r3, [r2, #0]
 80072d6:	4b3e      	ldr	r3, [pc, #248]	; (80073d0 <xTaskIncrementTick+0x154>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	3301      	adds	r3, #1
 80072dc:	4a3c      	ldr	r2, [pc, #240]	; (80073d0 <xTaskIncrementTick+0x154>)
 80072de:	6013      	str	r3, [r2, #0]
 80072e0:	f000 fac4 	bl	800786c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80072e4:	4b3b      	ldr	r3, [pc, #236]	; (80073d4 <xTaskIncrementTick+0x158>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	693a      	ldr	r2, [r7, #16]
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d349      	bcc.n	8007382 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80072ee:	4b36      	ldr	r3, [pc, #216]	; (80073c8 <xTaskIncrementTick+0x14c>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d104      	bne.n	8007302 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072f8:	4b36      	ldr	r3, [pc, #216]	; (80073d4 <xTaskIncrementTick+0x158>)
 80072fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80072fe:	601a      	str	r2, [r3, #0]
					break;
 8007300:	e03f      	b.n	8007382 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007302:	4b31      	ldr	r3, [pc, #196]	; (80073c8 <xTaskIncrementTick+0x14c>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	68db      	ldr	r3, [r3, #12]
 800730a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007312:	693a      	ldr	r2, [r7, #16]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	429a      	cmp	r2, r3
 8007318:	d203      	bcs.n	8007322 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800731a:	4a2e      	ldr	r2, [pc, #184]	; (80073d4 <xTaskIncrementTick+0x158>)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007320:	e02f      	b.n	8007382 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	3304      	adds	r3, #4
 8007326:	4618      	mov	r0, r3
 8007328:	f7fe ffba 	bl	80062a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007330:	2b00      	cmp	r3, #0
 8007332:	d004      	beq.n	800733e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	3318      	adds	r3, #24
 8007338:	4618      	mov	r0, r3
 800733a:	f7fe ffb1 	bl	80062a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007342:	4b25      	ldr	r3, [pc, #148]	; (80073d8 <xTaskIncrementTick+0x15c>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	429a      	cmp	r2, r3
 8007348:	d903      	bls.n	8007352 <xTaskIncrementTick+0xd6>
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800734e:	4a22      	ldr	r2, [pc, #136]	; (80073d8 <xTaskIncrementTick+0x15c>)
 8007350:	6013      	str	r3, [r2, #0]
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007356:	4613      	mov	r3, r2
 8007358:	009b      	lsls	r3, r3, #2
 800735a:	4413      	add	r3, r2
 800735c:	009b      	lsls	r3, r3, #2
 800735e:	4a1f      	ldr	r2, [pc, #124]	; (80073dc <xTaskIncrementTick+0x160>)
 8007360:	441a      	add	r2, r3
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	3304      	adds	r3, #4
 8007366:	4619      	mov	r1, r3
 8007368:	4610      	mov	r0, r2
 800736a:	f7fe ff3c 	bl	80061e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007372:	4b1b      	ldr	r3, [pc, #108]	; (80073e0 <xTaskIncrementTick+0x164>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007378:	429a      	cmp	r2, r3
 800737a:	d3b8      	bcc.n	80072ee <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800737c:	2301      	movs	r3, #1
 800737e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007380:	e7b5      	b.n	80072ee <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007382:	4b17      	ldr	r3, [pc, #92]	; (80073e0 <xTaskIncrementTick+0x164>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007388:	4914      	ldr	r1, [pc, #80]	; (80073dc <xTaskIncrementTick+0x160>)
 800738a:	4613      	mov	r3, r2
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	4413      	add	r3, r2
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	440b      	add	r3, r1
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	2b01      	cmp	r3, #1
 8007398:	d907      	bls.n	80073aa <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800739a:	2301      	movs	r3, #1
 800739c:	617b      	str	r3, [r7, #20]
 800739e:	e004      	b.n	80073aa <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80073a0:	4b10      	ldr	r3, [pc, #64]	; (80073e4 <xTaskIncrementTick+0x168>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	3301      	adds	r3, #1
 80073a6:	4a0f      	ldr	r2, [pc, #60]	; (80073e4 <xTaskIncrementTick+0x168>)
 80073a8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80073aa:	4b0f      	ldr	r3, [pc, #60]	; (80073e8 <xTaskIncrementTick+0x16c>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d001      	beq.n	80073b6 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 80073b2:	2301      	movs	r3, #1
 80073b4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80073b6:	697b      	ldr	r3, [r7, #20]
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3718      	adds	r7, #24
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}
 80073c0:	20000dc8 	.word	0x20000dc8
 80073c4:	20000da4 	.word	0x20000da4
 80073c8:	20000d58 	.word	0x20000d58
 80073cc:	20000d5c 	.word	0x20000d5c
 80073d0:	20000db8 	.word	0x20000db8
 80073d4:	20000dc0 	.word	0x20000dc0
 80073d8:	20000da8 	.word	0x20000da8
 80073dc:	200008d0 	.word	0x200008d0
 80073e0:	200008cc 	.word	0x200008cc
 80073e4:	20000db0 	.word	0x20000db0
 80073e8:	20000db4 	.word	0x20000db4

080073ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80073ec:	b480      	push	{r7}
 80073ee:	b085      	sub	sp, #20
 80073f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80073f2:	4b27      	ldr	r3, [pc, #156]	; (8007490 <vTaskSwitchContext+0xa4>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d003      	beq.n	8007402 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80073fa:	4b26      	ldr	r3, [pc, #152]	; (8007494 <vTaskSwitchContext+0xa8>)
 80073fc:	2201      	movs	r2, #1
 80073fe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007400:	e040      	b.n	8007484 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8007402:	4b24      	ldr	r3, [pc, #144]	; (8007494 <vTaskSwitchContext+0xa8>)
 8007404:	2200      	movs	r2, #0
 8007406:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007408:	4b23      	ldr	r3, [pc, #140]	; (8007498 <vTaskSwitchContext+0xac>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	60fb      	str	r3, [r7, #12]
 800740e:	e00f      	b.n	8007430 <vTaskSwitchContext+0x44>
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d109      	bne.n	800742a <vTaskSwitchContext+0x3e>
 8007416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800741a:	f383 8811 	msr	BASEPRI, r3
 800741e:	f3bf 8f6f 	isb	sy
 8007422:	f3bf 8f4f 	dsb	sy
 8007426:	607b      	str	r3, [r7, #4]
 8007428:	e7fe      	b.n	8007428 <vTaskSwitchContext+0x3c>
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	3b01      	subs	r3, #1
 800742e:	60fb      	str	r3, [r7, #12]
 8007430:	491a      	ldr	r1, [pc, #104]	; (800749c <vTaskSwitchContext+0xb0>)
 8007432:	68fa      	ldr	r2, [r7, #12]
 8007434:	4613      	mov	r3, r2
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	4413      	add	r3, r2
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	440b      	add	r3, r1
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d0e5      	beq.n	8007410 <vTaskSwitchContext+0x24>
 8007444:	68fa      	ldr	r2, [r7, #12]
 8007446:	4613      	mov	r3, r2
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	4413      	add	r3, r2
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	4a13      	ldr	r2, [pc, #76]	; (800749c <vTaskSwitchContext+0xb0>)
 8007450:	4413      	add	r3, r2
 8007452:	60bb      	str	r3, [r7, #8]
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	685a      	ldr	r2, [r3, #4]
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	605a      	str	r2, [r3, #4]
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	685a      	ldr	r2, [r3, #4]
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	3308      	adds	r3, #8
 8007466:	429a      	cmp	r2, r3
 8007468:	d104      	bne.n	8007474 <vTaskSwitchContext+0x88>
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	685a      	ldr	r2, [r3, #4]
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	605a      	str	r2, [r3, #4]
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	4a09      	ldr	r2, [pc, #36]	; (80074a0 <vTaskSwitchContext+0xb4>)
 800747c:	6013      	str	r3, [r2, #0]
 800747e:	4a06      	ldr	r2, [pc, #24]	; (8007498 <vTaskSwitchContext+0xac>)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	6013      	str	r3, [r2, #0]
}
 8007484:	bf00      	nop
 8007486:	3714      	adds	r7, #20
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr
 8007490:	20000dc8 	.word	0x20000dc8
 8007494:	20000db4 	.word	0x20000db4
 8007498:	20000da8 	.word	0x20000da8
 800749c:	200008d0 	.word	0x200008d0
 80074a0:	200008cc 	.word	0x200008cc

080074a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d109      	bne.n	80074c8 <vTaskPlaceOnEventList+0x24>
 80074b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b8:	f383 8811 	msr	BASEPRI, r3
 80074bc:	f3bf 8f6f 	isb	sy
 80074c0:	f3bf 8f4f 	dsb	sy
 80074c4:	60fb      	str	r3, [r7, #12]
 80074c6:	e7fe      	b.n	80074c6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80074c8:	4b07      	ldr	r3, [pc, #28]	; (80074e8 <vTaskPlaceOnEventList+0x44>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	3318      	adds	r3, #24
 80074ce:	4619      	mov	r1, r3
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f7fe feac 	bl	800622e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80074d6:	2101      	movs	r1, #1
 80074d8:	6838      	ldr	r0, [r7, #0]
 80074da:	f000 fa71 	bl	80079c0 <prvAddCurrentTaskToDelayedList>
}
 80074de:	bf00      	nop
 80074e0:	3710      	adds	r7, #16
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	bf00      	nop
 80074e8:	200008cc 	.word	0x200008cc

080074ec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b086      	sub	sp, #24
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d109      	bne.n	8007512 <vTaskPlaceOnEventListRestricted+0x26>
 80074fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007502:	f383 8811 	msr	BASEPRI, r3
 8007506:	f3bf 8f6f 	isb	sy
 800750a:	f3bf 8f4f 	dsb	sy
 800750e:	617b      	str	r3, [r7, #20]
 8007510:	e7fe      	b.n	8007510 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007512:	4b0a      	ldr	r3, [pc, #40]	; (800753c <vTaskPlaceOnEventListRestricted+0x50>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	3318      	adds	r3, #24
 8007518:	4619      	mov	r1, r3
 800751a:	68f8      	ldr	r0, [r7, #12]
 800751c:	f7fe fe63 	bl	80061e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d002      	beq.n	800752c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8007526:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800752a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800752c:	6879      	ldr	r1, [r7, #4]
 800752e:	68b8      	ldr	r0, [r7, #8]
 8007530:	f000 fa46 	bl	80079c0 <prvAddCurrentTaskToDelayedList>
	}
 8007534:	bf00      	nop
 8007536:	3718      	adds	r7, #24
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}
 800753c:	200008cc 	.word	0x200008cc

08007540 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b086      	sub	sp, #24
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	68db      	ldr	r3, [r3, #12]
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d109      	bne.n	800756a <xTaskRemoveFromEventList+0x2a>
 8007556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800755a:	f383 8811 	msr	BASEPRI, r3
 800755e:	f3bf 8f6f 	isb	sy
 8007562:	f3bf 8f4f 	dsb	sy
 8007566:	60fb      	str	r3, [r7, #12]
 8007568:	e7fe      	b.n	8007568 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	3318      	adds	r3, #24
 800756e:	4618      	mov	r0, r3
 8007570:	f7fe fe96 	bl	80062a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007574:	4b1d      	ldr	r3, [pc, #116]	; (80075ec <xTaskRemoveFromEventList+0xac>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d11d      	bne.n	80075b8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	3304      	adds	r3, #4
 8007580:	4618      	mov	r0, r3
 8007582:	f7fe fe8d 	bl	80062a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800758a:	4b19      	ldr	r3, [pc, #100]	; (80075f0 <xTaskRemoveFromEventList+0xb0>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	429a      	cmp	r2, r3
 8007590:	d903      	bls.n	800759a <xTaskRemoveFromEventList+0x5a>
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007596:	4a16      	ldr	r2, [pc, #88]	; (80075f0 <xTaskRemoveFromEventList+0xb0>)
 8007598:	6013      	str	r3, [r2, #0]
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800759e:	4613      	mov	r3, r2
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	4413      	add	r3, r2
 80075a4:	009b      	lsls	r3, r3, #2
 80075a6:	4a13      	ldr	r2, [pc, #76]	; (80075f4 <xTaskRemoveFromEventList+0xb4>)
 80075a8:	441a      	add	r2, r3
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	3304      	adds	r3, #4
 80075ae:	4619      	mov	r1, r3
 80075b0:	4610      	mov	r0, r2
 80075b2:	f7fe fe18 	bl	80061e6 <vListInsertEnd>
 80075b6:	e005      	b.n	80075c4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	3318      	adds	r3, #24
 80075bc:	4619      	mov	r1, r3
 80075be:	480e      	ldr	r0, [pc, #56]	; (80075f8 <xTaskRemoveFromEventList+0xb8>)
 80075c0:	f7fe fe11 	bl	80061e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075c8:	4b0c      	ldr	r3, [pc, #48]	; (80075fc <xTaskRemoveFromEventList+0xbc>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d905      	bls.n	80075de <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80075d2:	2301      	movs	r3, #1
 80075d4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80075d6:	4b0a      	ldr	r3, [pc, #40]	; (8007600 <xTaskRemoveFromEventList+0xc0>)
 80075d8:	2201      	movs	r2, #1
 80075da:	601a      	str	r2, [r3, #0]
 80075dc:	e001      	b.n	80075e2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80075de:	2300      	movs	r3, #0
 80075e0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80075e2:	697b      	ldr	r3, [r7, #20]
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3718      	adds	r7, #24
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}
 80075ec:	20000dc8 	.word	0x20000dc8
 80075f0:	20000da8 	.word	0x20000da8
 80075f4:	200008d0 	.word	0x200008d0
 80075f8:	20000d60 	.word	0x20000d60
 80075fc:	200008cc 	.word	0x200008cc
 8007600:	20000db4 	.word	0x20000db4

08007604 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800760c:	4b06      	ldr	r3, [pc, #24]	; (8007628 <vTaskInternalSetTimeOutState+0x24>)
 800760e:	681a      	ldr	r2, [r3, #0]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007614:	4b05      	ldr	r3, [pc, #20]	; (800762c <vTaskInternalSetTimeOutState+0x28>)
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	605a      	str	r2, [r3, #4]
}
 800761c:	bf00      	nop
 800761e:	370c      	adds	r7, #12
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr
 8007628:	20000db8 	.word	0x20000db8
 800762c:	20000da4 	.word	0x20000da4

08007630 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b088      	sub	sp, #32
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d109      	bne.n	8007654 <xTaskCheckForTimeOut+0x24>
 8007640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007644:	f383 8811 	msr	BASEPRI, r3
 8007648:	f3bf 8f6f 	isb	sy
 800764c:	f3bf 8f4f 	dsb	sy
 8007650:	613b      	str	r3, [r7, #16]
 8007652:	e7fe      	b.n	8007652 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d109      	bne.n	800766e <xTaskCheckForTimeOut+0x3e>
 800765a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800765e:	f383 8811 	msr	BASEPRI, r3
 8007662:	f3bf 8f6f 	isb	sy
 8007666:	f3bf 8f4f 	dsb	sy
 800766a:	60fb      	str	r3, [r7, #12]
 800766c:	e7fe      	b.n	800766c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800766e:	f000 fe65 	bl	800833c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007672:	4b1d      	ldr	r3, [pc, #116]	; (80076e8 <xTaskCheckForTimeOut+0xb8>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	69ba      	ldr	r2, [r7, #24]
 800767e:	1ad3      	subs	r3, r2, r3
 8007680:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800768a:	d102      	bne.n	8007692 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800768c:	2300      	movs	r3, #0
 800768e:	61fb      	str	r3, [r7, #28]
 8007690:	e023      	b.n	80076da <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681a      	ldr	r2, [r3, #0]
 8007696:	4b15      	ldr	r3, [pc, #84]	; (80076ec <xTaskCheckForTimeOut+0xbc>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	429a      	cmp	r2, r3
 800769c:	d007      	beq.n	80076ae <xTaskCheckForTimeOut+0x7e>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	69ba      	ldr	r2, [r7, #24]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d302      	bcc.n	80076ae <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80076a8:	2301      	movs	r3, #1
 80076aa:	61fb      	str	r3, [r7, #28]
 80076ac:	e015      	b.n	80076da <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	697a      	ldr	r2, [r7, #20]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d20b      	bcs.n	80076d0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	1ad2      	subs	r2, r2, r3
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f7ff ff9d 	bl	8007604 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80076ca:	2300      	movs	r3, #0
 80076cc:	61fb      	str	r3, [r7, #28]
 80076ce:	e004      	b.n	80076da <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	2200      	movs	r2, #0
 80076d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80076d6:	2301      	movs	r3, #1
 80076d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80076da:	f000 fe5d 	bl	8008398 <vPortExitCritical>

	return xReturn;
 80076de:	69fb      	ldr	r3, [r7, #28]
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3720      	adds	r7, #32
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	20000da4 	.word	0x20000da4
 80076ec:	20000db8 	.word	0x20000db8

080076f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80076f0:	b480      	push	{r7}
 80076f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80076f4:	4b03      	ldr	r3, [pc, #12]	; (8007704 <vTaskMissedYield+0x14>)
 80076f6:	2201      	movs	r2, #1
 80076f8:	601a      	str	r2, [r3, #0]
}
 80076fa:	bf00      	nop
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr
 8007704:	20000db4 	.word	0x20000db4

08007708 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b082      	sub	sp, #8
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007710:	f000 f852 	bl	80077b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007714:	4b06      	ldr	r3, [pc, #24]	; (8007730 <prvIdleTask+0x28>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	2b01      	cmp	r3, #1
 800771a:	d9f9      	bls.n	8007710 <prvIdleTask+0x8>
			{
				taskYIELD();
 800771c:	4b05      	ldr	r3, [pc, #20]	; (8007734 <prvIdleTask+0x2c>)
 800771e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007722:	601a      	str	r2, [r3, #0]
 8007724:	f3bf 8f4f 	dsb	sy
 8007728:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800772c:	e7f0      	b.n	8007710 <prvIdleTask+0x8>
 800772e:	bf00      	nop
 8007730:	200008d0 	.word	0x200008d0
 8007734:	e000ed04 	.word	0xe000ed04

08007738 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800773e:	2300      	movs	r3, #0
 8007740:	607b      	str	r3, [r7, #4]
 8007742:	e00c      	b.n	800775e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	4613      	mov	r3, r2
 8007748:	009b      	lsls	r3, r3, #2
 800774a:	4413      	add	r3, r2
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	4a12      	ldr	r2, [pc, #72]	; (8007798 <prvInitialiseTaskLists+0x60>)
 8007750:	4413      	add	r3, r2
 8007752:	4618      	mov	r0, r3
 8007754:	f7fe fd1a 	bl	800618c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	3301      	adds	r3, #1
 800775c:	607b      	str	r3, [r7, #4]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2b37      	cmp	r3, #55	; 0x37
 8007762:	d9ef      	bls.n	8007744 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007764:	480d      	ldr	r0, [pc, #52]	; (800779c <prvInitialiseTaskLists+0x64>)
 8007766:	f7fe fd11 	bl	800618c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800776a:	480d      	ldr	r0, [pc, #52]	; (80077a0 <prvInitialiseTaskLists+0x68>)
 800776c:	f7fe fd0e 	bl	800618c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007770:	480c      	ldr	r0, [pc, #48]	; (80077a4 <prvInitialiseTaskLists+0x6c>)
 8007772:	f7fe fd0b 	bl	800618c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007776:	480c      	ldr	r0, [pc, #48]	; (80077a8 <prvInitialiseTaskLists+0x70>)
 8007778:	f7fe fd08 	bl	800618c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800777c:	480b      	ldr	r0, [pc, #44]	; (80077ac <prvInitialiseTaskLists+0x74>)
 800777e:	f7fe fd05 	bl	800618c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007782:	4b0b      	ldr	r3, [pc, #44]	; (80077b0 <prvInitialiseTaskLists+0x78>)
 8007784:	4a05      	ldr	r2, [pc, #20]	; (800779c <prvInitialiseTaskLists+0x64>)
 8007786:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007788:	4b0a      	ldr	r3, [pc, #40]	; (80077b4 <prvInitialiseTaskLists+0x7c>)
 800778a:	4a05      	ldr	r2, [pc, #20]	; (80077a0 <prvInitialiseTaskLists+0x68>)
 800778c:	601a      	str	r2, [r3, #0]
}
 800778e:	bf00      	nop
 8007790:	3708      	adds	r7, #8
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}
 8007796:	bf00      	nop
 8007798:	200008d0 	.word	0x200008d0
 800779c:	20000d30 	.word	0x20000d30
 80077a0:	20000d44 	.word	0x20000d44
 80077a4:	20000d60 	.word	0x20000d60
 80077a8:	20000d74 	.word	0x20000d74
 80077ac:	20000d8c 	.word	0x20000d8c
 80077b0:	20000d58 	.word	0x20000d58
 80077b4:	20000d5c 	.word	0x20000d5c

080077b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b082      	sub	sp, #8
 80077bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80077be:	e019      	b.n	80077f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80077c0:	f000 fdbc 	bl	800833c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077c4:	4b0f      	ldr	r3, [pc, #60]	; (8007804 <prvCheckTasksWaitingTermination+0x4c>)
 80077c6:	68db      	ldr	r3, [r3, #12]
 80077c8:	68db      	ldr	r3, [r3, #12]
 80077ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	3304      	adds	r3, #4
 80077d0:	4618      	mov	r0, r3
 80077d2:	f7fe fd65 	bl	80062a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80077d6:	4b0c      	ldr	r3, [pc, #48]	; (8007808 <prvCheckTasksWaitingTermination+0x50>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	3b01      	subs	r3, #1
 80077dc:	4a0a      	ldr	r2, [pc, #40]	; (8007808 <prvCheckTasksWaitingTermination+0x50>)
 80077de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80077e0:	4b0a      	ldr	r3, [pc, #40]	; (800780c <prvCheckTasksWaitingTermination+0x54>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	3b01      	subs	r3, #1
 80077e6:	4a09      	ldr	r2, [pc, #36]	; (800780c <prvCheckTasksWaitingTermination+0x54>)
 80077e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80077ea:	f000 fdd5 	bl	8008398 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 f80e 	bl	8007810 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80077f4:	4b05      	ldr	r3, [pc, #20]	; (800780c <prvCheckTasksWaitingTermination+0x54>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d1e1      	bne.n	80077c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80077fc:	bf00      	nop
 80077fe:	3708      	adds	r7, #8
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}
 8007804:	20000d74 	.word	0x20000d74
 8007808:	20000da0 	.word	0x20000da0
 800780c:	20000d88 	.word	0x20000d88

08007810 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800781e:	2b00      	cmp	r3, #0
 8007820:	d108      	bne.n	8007834 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007826:	4618      	mov	r0, r3
 8007828:	f000 ff64 	bl	80086f4 <vPortFree>
				vPortFree( pxTCB );
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 ff61 	bl	80086f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007832:	e017      	b.n	8007864 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800783a:	2b01      	cmp	r3, #1
 800783c:	d103      	bne.n	8007846 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 ff58 	bl	80086f4 <vPortFree>
	}
 8007844:	e00e      	b.n	8007864 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800784c:	2b02      	cmp	r3, #2
 800784e:	d009      	beq.n	8007864 <prvDeleteTCB+0x54>
 8007850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007854:	f383 8811 	msr	BASEPRI, r3
 8007858:	f3bf 8f6f 	isb	sy
 800785c:	f3bf 8f4f 	dsb	sy
 8007860:	60fb      	str	r3, [r7, #12]
 8007862:	e7fe      	b.n	8007862 <prvDeleteTCB+0x52>
	}
 8007864:	bf00      	nop
 8007866:	3710      	adds	r7, #16
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800786c:	b480      	push	{r7}
 800786e:	b083      	sub	sp, #12
 8007870:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007872:	4b0c      	ldr	r3, [pc, #48]	; (80078a4 <prvResetNextTaskUnblockTime+0x38>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d104      	bne.n	8007886 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800787c:	4b0a      	ldr	r3, [pc, #40]	; (80078a8 <prvResetNextTaskUnblockTime+0x3c>)
 800787e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007882:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007884:	e008      	b.n	8007898 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007886:	4b07      	ldr	r3, [pc, #28]	; (80078a4 <prvResetNextTaskUnblockTime+0x38>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	4a04      	ldr	r2, [pc, #16]	; (80078a8 <prvResetNextTaskUnblockTime+0x3c>)
 8007896:	6013      	str	r3, [r2, #0]
}
 8007898:	bf00      	nop
 800789a:	370c      	adds	r7, #12
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr
 80078a4:	20000d58 	.word	0x20000d58
 80078a8:	20000dc0 	.word	0x20000dc0

080078ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80078ac:	b480      	push	{r7}
 80078ae:	b083      	sub	sp, #12
 80078b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80078b2:	4b0b      	ldr	r3, [pc, #44]	; (80078e0 <xTaskGetSchedulerState+0x34>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d102      	bne.n	80078c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80078ba:	2301      	movs	r3, #1
 80078bc:	607b      	str	r3, [r7, #4]
 80078be:	e008      	b.n	80078d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078c0:	4b08      	ldr	r3, [pc, #32]	; (80078e4 <xTaskGetSchedulerState+0x38>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d102      	bne.n	80078ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80078c8:	2302      	movs	r3, #2
 80078ca:	607b      	str	r3, [r7, #4]
 80078cc:	e001      	b.n	80078d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80078ce:	2300      	movs	r3, #0
 80078d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80078d2:	687b      	ldr	r3, [r7, #4]
	}
 80078d4:	4618      	mov	r0, r3
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr
 80078e0:	20000dac 	.word	0x20000dac
 80078e4:	20000dc8 	.word	0x20000dc8

080078e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b086      	sub	sp, #24
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80078f4:	2300      	movs	r3, #0
 80078f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d054      	beq.n	80079a8 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80078fe:	4b2d      	ldr	r3, [pc, #180]	; (80079b4 <xTaskPriorityDisinherit+0xcc>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	693a      	ldr	r2, [r7, #16]
 8007904:	429a      	cmp	r2, r3
 8007906:	d009      	beq.n	800791c <xTaskPriorityDisinherit+0x34>
 8007908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800790c:	f383 8811 	msr	BASEPRI, r3
 8007910:	f3bf 8f6f 	isb	sy
 8007914:	f3bf 8f4f 	dsb	sy
 8007918:	60fb      	str	r3, [r7, #12]
 800791a:	e7fe      	b.n	800791a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007920:	2b00      	cmp	r3, #0
 8007922:	d109      	bne.n	8007938 <xTaskPriorityDisinherit+0x50>
 8007924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007928:	f383 8811 	msr	BASEPRI, r3
 800792c:	f3bf 8f6f 	isb	sy
 8007930:	f3bf 8f4f 	dsb	sy
 8007934:	60bb      	str	r3, [r7, #8]
 8007936:	e7fe      	b.n	8007936 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800793c:	1e5a      	subs	r2, r3, #1
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800794a:	429a      	cmp	r2, r3
 800794c:	d02c      	beq.n	80079a8 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007952:	2b00      	cmp	r3, #0
 8007954:	d128      	bne.n	80079a8 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	3304      	adds	r3, #4
 800795a:	4618      	mov	r0, r3
 800795c:	f7fe fca0 	bl	80062a0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800796c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007978:	4b0f      	ldr	r3, [pc, #60]	; (80079b8 <xTaskPriorityDisinherit+0xd0>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	429a      	cmp	r2, r3
 800797e:	d903      	bls.n	8007988 <xTaskPriorityDisinherit+0xa0>
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007984:	4a0c      	ldr	r2, [pc, #48]	; (80079b8 <xTaskPriorityDisinherit+0xd0>)
 8007986:	6013      	str	r3, [r2, #0]
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800798c:	4613      	mov	r3, r2
 800798e:	009b      	lsls	r3, r3, #2
 8007990:	4413      	add	r3, r2
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	4a09      	ldr	r2, [pc, #36]	; (80079bc <xTaskPriorityDisinherit+0xd4>)
 8007996:	441a      	add	r2, r3
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	3304      	adds	r3, #4
 800799c:	4619      	mov	r1, r3
 800799e:	4610      	mov	r0, r2
 80079a0:	f7fe fc21 	bl	80061e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80079a4:	2301      	movs	r3, #1
 80079a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80079a8:	697b      	ldr	r3, [r7, #20]
	}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3718      	adds	r7, #24
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	bf00      	nop
 80079b4:	200008cc 	.word	0x200008cc
 80079b8:	20000da8 	.word	0x20000da8
 80079bc:	200008d0 	.word	0x200008d0

080079c0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b084      	sub	sp, #16
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80079ca:	4b21      	ldr	r3, [pc, #132]	; (8007a50 <prvAddCurrentTaskToDelayedList+0x90>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079d0:	4b20      	ldr	r3, [pc, #128]	; (8007a54 <prvAddCurrentTaskToDelayedList+0x94>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	3304      	adds	r3, #4
 80079d6:	4618      	mov	r0, r3
 80079d8:	f7fe fc62 	bl	80062a0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079e2:	d10a      	bne.n	80079fa <prvAddCurrentTaskToDelayedList+0x3a>
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d007      	beq.n	80079fa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079ea:	4b1a      	ldr	r3, [pc, #104]	; (8007a54 <prvAddCurrentTaskToDelayedList+0x94>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	3304      	adds	r3, #4
 80079f0:	4619      	mov	r1, r3
 80079f2:	4819      	ldr	r0, [pc, #100]	; (8007a58 <prvAddCurrentTaskToDelayedList+0x98>)
 80079f4:	f7fe fbf7 	bl	80061e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80079f8:	e026      	b.n	8007a48 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80079fa:	68fa      	ldr	r2, [r7, #12]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	4413      	add	r3, r2
 8007a00:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007a02:	4b14      	ldr	r3, [pc, #80]	; (8007a54 <prvAddCurrentTaskToDelayedList+0x94>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	68ba      	ldr	r2, [r7, #8]
 8007a08:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007a0a:	68ba      	ldr	r2, [r7, #8]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d209      	bcs.n	8007a26 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a12:	4b12      	ldr	r3, [pc, #72]	; (8007a5c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	4b0f      	ldr	r3, [pc, #60]	; (8007a54 <prvAddCurrentTaskToDelayedList+0x94>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	3304      	adds	r3, #4
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	4610      	mov	r0, r2
 8007a20:	f7fe fc05 	bl	800622e <vListInsert>
}
 8007a24:	e010      	b.n	8007a48 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a26:	4b0e      	ldr	r3, [pc, #56]	; (8007a60 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	4b0a      	ldr	r3, [pc, #40]	; (8007a54 <prvAddCurrentTaskToDelayedList+0x94>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	3304      	adds	r3, #4
 8007a30:	4619      	mov	r1, r3
 8007a32:	4610      	mov	r0, r2
 8007a34:	f7fe fbfb 	bl	800622e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007a38:	4b0a      	ldr	r3, [pc, #40]	; (8007a64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	68ba      	ldr	r2, [r7, #8]
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d202      	bcs.n	8007a48 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007a42:	4a08      	ldr	r2, [pc, #32]	; (8007a64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	6013      	str	r3, [r2, #0]
}
 8007a48:	bf00      	nop
 8007a4a:	3710      	adds	r7, #16
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}
 8007a50:	20000da4 	.word	0x20000da4
 8007a54:	200008cc 	.word	0x200008cc
 8007a58:	20000d8c 	.word	0x20000d8c
 8007a5c:	20000d5c 	.word	0x20000d5c
 8007a60:	20000d58 	.word	0x20000d58
 8007a64:	20000dc0 	.word	0x20000dc0

08007a68 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b08a      	sub	sp, #40	; 0x28
 8007a6c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007a72:	f000 faff 	bl	8008074 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007a76:	4b1c      	ldr	r3, [pc, #112]	; (8007ae8 <xTimerCreateTimerTask+0x80>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d021      	beq.n	8007ac2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007a82:	2300      	movs	r3, #0
 8007a84:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007a86:	1d3a      	adds	r2, r7, #4
 8007a88:	f107 0108 	add.w	r1, r7, #8
 8007a8c:	f107 030c 	add.w	r3, r7, #12
 8007a90:	4618      	mov	r0, r3
 8007a92:	f7fe fb61 	bl	8006158 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007a96:	6879      	ldr	r1, [r7, #4]
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	68fa      	ldr	r2, [r7, #12]
 8007a9c:	9202      	str	r2, [sp, #8]
 8007a9e:	9301      	str	r3, [sp, #4]
 8007aa0:	2302      	movs	r3, #2
 8007aa2:	9300      	str	r3, [sp, #0]
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	460a      	mov	r2, r1
 8007aa8:	4910      	ldr	r1, [pc, #64]	; (8007aec <xTimerCreateTimerTask+0x84>)
 8007aaa:	4811      	ldr	r0, [pc, #68]	; (8007af0 <xTimerCreateTimerTask+0x88>)
 8007aac:	f7ff f8f6 	bl	8006c9c <xTaskCreateStatic>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	4b10      	ldr	r3, [pc, #64]	; (8007af4 <xTimerCreateTimerTask+0x8c>)
 8007ab4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007ab6:	4b0f      	ldr	r3, [pc, #60]	; (8007af4 <xTimerCreateTimerTask+0x8c>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d001      	beq.n	8007ac2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d109      	bne.n	8007adc <xTimerCreateTimerTask+0x74>
 8007ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007acc:	f383 8811 	msr	BASEPRI, r3
 8007ad0:	f3bf 8f6f 	isb	sy
 8007ad4:	f3bf 8f4f 	dsb	sy
 8007ad8:	613b      	str	r3, [r7, #16]
 8007ada:	e7fe      	b.n	8007ada <xTimerCreateTimerTask+0x72>
	return xReturn;
 8007adc:	697b      	ldr	r3, [r7, #20]
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3718      	adds	r7, #24
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	20000dfc 	.word	0x20000dfc
 8007aec:	08009564 	.word	0x08009564
 8007af0:	08007c29 	.word	0x08007c29
 8007af4:	20000e00 	.word	0x20000e00

08007af8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b08a      	sub	sp, #40	; 0x28
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	60f8      	str	r0, [r7, #12]
 8007b00:	60b9      	str	r1, [r7, #8]
 8007b02:	607a      	str	r2, [r7, #4]
 8007b04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007b06:	2300      	movs	r3, #0
 8007b08:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d109      	bne.n	8007b24 <xTimerGenericCommand+0x2c>
 8007b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b14:	f383 8811 	msr	BASEPRI, r3
 8007b18:	f3bf 8f6f 	isb	sy
 8007b1c:	f3bf 8f4f 	dsb	sy
 8007b20:	623b      	str	r3, [r7, #32]
 8007b22:	e7fe      	b.n	8007b22 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007b24:	4b19      	ldr	r3, [pc, #100]	; (8007b8c <xTimerGenericCommand+0x94>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d02a      	beq.n	8007b82 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	2b05      	cmp	r3, #5
 8007b3c:	dc18      	bgt.n	8007b70 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007b3e:	f7ff feb5 	bl	80078ac <xTaskGetSchedulerState>
 8007b42:	4603      	mov	r3, r0
 8007b44:	2b02      	cmp	r3, #2
 8007b46:	d109      	bne.n	8007b5c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007b48:	4b10      	ldr	r3, [pc, #64]	; (8007b8c <xTimerGenericCommand+0x94>)
 8007b4a:	6818      	ldr	r0, [r3, #0]
 8007b4c:	f107 0110 	add.w	r1, r7, #16
 8007b50:	2300      	movs	r3, #0
 8007b52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b54:	f7fe fccc 	bl	80064f0 <xQueueGenericSend>
 8007b58:	6278      	str	r0, [r7, #36]	; 0x24
 8007b5a:	e012      	b.n	8007b82 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007b5c:	4b0b      	ldr	r3, [pc, #44]	; (8007b8c <xTimerGenericCommand+0x94>)
 8007b5e:	6818      	ldr	r0, [r3, #0]
 8007b60:	f107 0110 	add.w	r1, r7, #16
 8007b64:	2300      	movs	r3, #0
 8007b66:	2200      	movs	r2, #0
 8007b68:	f7fe fcc2 	bl	80064f0 <xQueueGenericSend>
 8007b6c:	6278      	str	r0, [r7, #36]	; 0x24
 8007b6e:	e008      	b.n	8007b82 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007b70:	4b06      	ldr	r3, [pc, #24]	; (8007b8c <xTimerGenericCommand+0x94>)
 8007b72:	6818      	ldr	r0, [r3, #0]
 8007b74:	f107 0110 	add.w	r1, r7, #16
 8007b78:	2300      	movs	r3, #0
 8007b7a:	683a      	ldr	r2, [r7, #0]
 8007b7c:	f7fe fdb2 	bl	80066e4 <xQueueGenericSendFromISR>
 8007b80:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3728      	adds	r7, #40	; 0x28
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}
 8007b8c:	20000dfc 	.word	0x20000dfc

08007b90 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b088      	sub	sp, #32
 8007b94:	af02      	add	r7, sp, #8
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b9a:	4b22      	ldr	r3, [pc, #136]	; (8007c24 <prvProcessExpiredTimer+0x94>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	68db      	ldr	r3, [r3, #12]
 8007ba0:	68db      	ldr	r3, [r3, #12]
 8007ba2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	3304      	adds	r3, #4
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f7fe fb79 	bl	80062a0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007bb4:	f003 0304 	and.w	r3, r3, #4
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d021      	beq.n	8007c00 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	699a      	ldr	r2, [r3, #24]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	18d1      	adds	r1, r2, r3
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	683a      	ldr	r2, [r7, #0]
 8007bc8:	6978      	ldr	r0, [r7, #20]
 8007bca:	f000 f8d1 	bl	8007d70 <prvInsertTimerInActiveList>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d01e      	beq.n	8007c12 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	9300      	str	r3, [sp, #0]
 8007bd8:	2300      	movs	r3, #0
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	2100      	movs	r1, #0
 8007bde:	6978      	ldr	r0, [r7, #20]
 8007be0:	f7ff ff8a 	bl	8007af8 <xTimerGenericCommand>
 8007be4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d112      	bne.n	8007c12 <prvProcessExpiredTimer+0x82>
 8007bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf0:	f383 8811 	msr	BASEPRI, r3
 8007bf4:	f3bf 8f6f 	isb	sy
 8007bf8:	f3bf 8f4f 	dsb	sy
 8007bfc:	60fb      	str	r3, [r7, #12]
 8007bfe:	e7fe      	b.n	8007bfe <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c06:	f023 0301 	bic.w	r3, r3, #1
 8007c0a:	b2da      	uxtb	r2, r3
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	6a1b      	ldr	r3, [r3, #32]
 8007c16:	6978      	ldr	r0, [r7, #20]
 8007c18:	4798      	blx	r3
}
 8007c1a:	bf00      	nop
 8007c1c:	3718      	adds	r7, #24
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	20000df4 	.word	0x20000df4

08007c28 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007c30:	f107 0308 	add.w	r3, r7, #8
 8007c34:	4618      	mov	r0, r3
 8007c36:	f000 f857 	bl	8007ce8 <prvGetNextExpireTime>
 8007c3a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	4619      	mov	r1, r3
 8007c40:	68f8      	ldr	r0, [r7, #12]
 8007c42:	f000 f803 	bl	8007c4c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007c46:	f000 f8d5 	bl	8007df4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007c4a:	e7f1      	b.n	8007c30 <prvTimerTask+0x8>

08007c4c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b084      	sub	sp, #16
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007c56:	f7ff fa57 	bl	8007108 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007c5a:	f107 0308 	add.w	r3, r7, #8
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f000 f866 	bl	8007d30 <prvSampleTimeNow>
 8007c64:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d130      	bne.n	8007cce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d10a      	bne.n	8007c88 <prvProcessTimerOrBlockTask+0x3c>
 8007c72:	687a      	ldr	r2, [r7, #4]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d806      	bhi.n	8007c88 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007c7a:	f7ff fa53 	bl	8007124 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007c7e:	68f9      	ldr	r1, [r7, #12]
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f7ff ff85 	bl	8007b90 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007c86:	e024      	b.n	8007cd2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d008      	beq.n	8007ca0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007c8e:	4b13      	ldr	r3, [pc, #76]	; (8007cdc <prvProcessTimerOrBlockTask+0x90>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d101      	bne.n	8007c9c <prvProcessTimerOrBlockTask+0x50>
 8007c98:	2301      	movs	r3, #1
 8007c9a:	e000      	b.n	8007c9e <prvProcessTimerOrBlockTask+0x52>
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007ca0:	4b0f      	ldr	r3, [pc, #60]	; (8007ce0 <prvProcessTimerOrBlockTask+0x94>)
 8007ca2:	6818      	ldr	r0, [r3, #0]
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	1ad3      	subs	r3, r2, r3
 8007caa:	683a      	ldr	r2, [r7, #0]
 8007cac:	4619      	mov	r1, r3
 8007cae:	f7fe ffc1 	bl	8006c34 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007cb2:	f7ff fa37 	bl	8007124 <xTaskResumeAll>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d10a      	bne.n	8007cd2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007cbc:	4b09      	ldr	r3, [pc, #36]	; (8007ce4 <prvProcessTimerOrBlockTask+0x98>)
 8007cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cc2:	601a      	str	r2, [r3, #0]
 8007cc4:	f3bf 8f4f 	dsb	sy
 8007cc8:	f3bf 8f6f 	isb	sy
}
 8007ccc:	e001      	b.n	8007cd2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007cce:	f7ff fa29 	bl	8007124 <xTaskResumeAll>
}
 8007cd2:	bf00      	nop
 8007cd4:	3710      	adds	r7, #16
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	bf00      	nop
 8007cdc:	20000df8 	.word	0x20000df8
 8007ce0:	20000dfc 	.word	0x20000dfc
 8007ce4:	e000ed04 	.word	0xe000ed04

08007ce8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b085      	sub	sp, #20
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007cf0:	4b0e      	ldr	r3, [pc, #56]	; (8007d2c <prvGetNextExpireTime+0x44>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d101      	bne.n	8007cfe <prvGetNextExpireTime+0x16>
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	e000      	b.n	8007d00 <prvGetNextExpireTime+0x18>
 8007cfe:	2200      	movs	r2, #0
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d105      	bne.n	8007d18 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d0c:	4b07      	ldr	r3, [pc, #28]	; (8007d2c <prvGetNextExpireTime+0x44>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	68db      	ldr	r3, [r3, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	60fb      	str	r3, [r7, #12]
 8007d16:	e001      	b.n	8007d1c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3714      	adds	r7, #20
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr
 8007d2a:	bf00      	nop
 8007d2c:	20000df4 	.word	0x20000df4

08007d30 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b084      	sub	sp, #16
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007d38:	f7ff fa90 	bl	800725c <xTaskGetTickCount>
 8007d3c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007d3e:	4b0b      	ldr	r3, [pc, #44]	; (8007d6c <prvSampleTimeNow+0x3c>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	68fa      	ldr	r2, [r7, #12]
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d205      	bcs.n	8007d54 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007d48:	f000 f930 	bl	8007fac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	601a      	str	r2, [r3, #0]
 8007d52:	e002      	b.n	8007d5a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2200      	movs	r2, #0
 8007d58:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007d5a:	4a04      	ldr	r2, [pc, #16]	; (8007d6c <prvSampleTimeNow+0x3c>)
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007d60:	68fb      	ldr	r3, [r7, #12]
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3710      	adds	r7, #16
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
 8007d6a:	bf00      	nop
 8007d6c:	20000e04 	.word	0x20000e04

08007d70 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b086      	sub	sp, #24
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	607a      	str	r2, [r7, #4]
 8007d7c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	68ba      	ldr	r2, [r7, #8]
 8007d86:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	68fa      	ldr	r2, [r7, #12]
 8007d8c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007d8e:	68ba      	ldr	r2, [r7, #8]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d812      	bhi.n	8007dbc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	1ad2      	subs	r2, r2, r3
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	699b      	ldr	r3, [r3, #24]
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d302      	bcc.n	8007daa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007da4:	2301      	movs	r3, #1
 8007da6:	617b      	str	r3, [r7, #20]
 8007da8:	e01b      	b.n	8007de2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007daa:	4b10      	ldr	r3, [pc, #64]	; (8007dec <prvInsertTimerInActiveList+0x7c>)
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	3304      	adds	r3, #4
 8007db2:	4619      	mov	r1, r3
 8007db4:	4610      	mov	r0, r2
 8007db6:	f7fe fa3a 	bl	800622e <vListInsert>
 8007dba:	e012      	b.n	8007de2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d206      	bcs.n	8007dd2 <prvInsertTimerInActiveList+0x62>
 8007dc4:	68ba      	ldr	r2, [r7, #8]
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d302      	bcc.n	8007dd2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	617b      	str	r3, [r7, #20]
 8007dd0:	e007      	b.n	8007de2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007dd2:	4b07      	ldr	r3, [pc, #28]	; (8007df0 <prvInsertTimerInActiveList+0x80>)
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	3304      	adds	r3, #4
 8007dda:	4619      	mov	r1, r3
 8007ddc:	4610      	mov	r0, r2
 8007dde:	f7fe fa26 	bl	800622e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007de2:	697b      	ldr	r3, [r7, #20]
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3718      	adds	r7, #24
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}
 8007dec:	20000df8 	.word	0x20000df8
 8007df0:	20000df4 	.word	0x20000df4

08007df4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b08e      	sub	sp, #56	; 0x38
 8007df8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007dfa:	e0c6      	b.n	8007f8a <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	da17      	bge.n	8007e32 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007e02:	1d3b      	adds	r3, r7, #4
 8007e04:	3304      	adds	r3, #4
 8007e06:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d109      	bne.n	8007e22 <prvProcessReceivedCommands+0x2e>
 8007e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e12:	f383 8811 	msr	BASEPRI, r3
 8007e16:	f3bf 8f6f 	isb	sy
 8007e1a:	f3bf 8f4f 	dsb	sy
 8007e1e:	61fb      	str	r3, [r7, #28]
 8007e20:	e7fe      	b.n	8007e20 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e28:	6850      	ldr	r0, [r2, #4]
 8007e2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e2c:	6892      	ldr	r2, [r2, #8]
 8007e2e:	4611      	mov	r1, r2
 8007e30:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	f2c0 80a7 	blt.w	8007f88 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e40:	695b      	ldr	r3, [r3, #20]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d004      	beq.n	8007e50 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e48:	3304      	adds	r3, #4
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f7fe fa28 	bl	80062a0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007e50:	463b      	mov	r3, r7
 8007e52:	4618      	mov	r0, r3
 8007e54:	f7ff ff6c 	bl	8007d30 <prvSampleTimeNow>
 8007e58:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2b09      	cmp	r3, #9
 8007e5e:	f200 8094 	bhi.w	8007f8a <prvProcessReceivedCommands+0x196>
 8007e62:	a201      	add	r2, pc, #4	; (adr r2, 8007e68 <prvProcessReceivedCommands+0x74>)
 8007e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e68:	08007e91 	.word	0x08007e91
 8007e6c:	08007e91 	.word	0x08007e91
 8007e70:	08007e91 	.word	0x08007e91
 8007e74:	08007f03 	.word	0x08007f03
 8007e78:	08007f17 	.word	0x08007f17
 8007e7c:	08007f5f 	.word	0x08007f5f
 8007e80:	08007e91 	.word	0x08007e91
 8007e84:	08007e91 	.word	0x08007e91
 8007e88:	08007f03 	.word	0x08007f03
 8007e8c:	08007f17 	.word	0x08007f17
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e96:	f043 0301 	orr.w	r3, r3, #1
 8007e9a:	b2da      	uxtb	r2, r3
 8007e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007ea2:	68ba      	ldr	r2, [r7, #8]
 8007ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea6:	699b      	ldr	r3, [r3, #24]
 8007ea8:	18d1      	adds	r1, r2, r3
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007eb0:	f7ff ff5e 	bl	8007d70 <prvInsertTimerInActiveList>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d067      	beq.n	8007f8a <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ebc:	6a1b      	ldr	r3, [r3, #32]
 8007ebe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ec0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ec8:	f003 0304 	and.w	r3, r3, #4
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d05c      	beq.n	8007f8a <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007ed0:	68ba      	ldr	r2, [r7, #8]
 8007ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed4:	699b      	ldr	r3, [r3, #24]
 8007ed6:	441a      	add	r2, r3
 8007ed8:	2300      	movs	r3, #0
 8007eda:	9300      	str	r3, [sp, #0]
 8007edc:	2300      	movs	r3, #0
 8007ede:	2100      	movs	r1, #0
 8007ee0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ee2:	f7ff fe09 	bl	8007af8 <xTimerGenericCommand>
 8007ee6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007ee8:	6a3b      	ldr	r3, [r7, #32]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d14d      	bne.n	8007f8a <prvProcessReceivedCommands+0x196>
 8007eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef2:	f383 8811 	msr	BASEPRI, r3
 8007ef6:	f3bf 8f6f 	isb	sy
 8007efa:	f3bf 8f4f 	dsb	sy
 8007efe:	61bb      	str	r3, [r7, #24]
 8007f00:	e7fe      	b.n	8007f00 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f08:	f023 0301 	bic.w	r3, r3, #1
 8007f0c:	b2da      	uxtb	r2, r3
 8007f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f10:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007f14:	e039      	b.n	8007f8a <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f1c:	f043 0301 	orr.w	r3, r3, #1
 8007f20:	b2da      	uxtb	r2, r3
 8007f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f24:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007f28:	68ba      	ldr	r2, [r7, #8]
 8007f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f2c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f30:	699b      	ldr	r3, [r3, #24]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d109      	bne.n	8007f4a <prvProcessReceivedCommands+0x156>
 8007f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f3a:	f383 8811 	msr	BASEPRI, r3
 8007f3e:	f3bf 8f6f 	isb	sy
 8007f42:	f3bf 8f4f 	dsb	sy
 8007f46:	617b      	str	r3, [r7, #20]
 8007f48:	e7fe      	b.n	8007f48 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f4c:	699a      	ldr	r2, [r3, #24]
 8007f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f50:	18d1      	adds	r1, r2, r3
 8007f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f58:	f7ff ff0a 	bl	8007d70 <prvInsertTimerInActiveList>
					break;
 8007f5c:	e015      	b.n	8007f8a <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f64:	f003 0302 	and.w	r3, r3, #2
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d103      	bne.n	8007f74 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8007f6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f6e:	f000 fbc1 	bl	80086f4 <vPortFree>
 8007f72:	e00a      	b.n	8007f8a <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f7a:	f023 0301 	bic.w	r3, r3, #1
 8007f7e:	b2da      	uxtb	r2, r3
 8007f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007f86:	e000      	b.n	8007f8a <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007f88:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007f8a:	4b07      	ldr	r3, [pc, #28]	; (8007fa8 <prvProcessReceivedCommands+0x1b4>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	1d39      	adds	r1, r7, #4
 8007f90:	2200      	movs	r2, #0
 8007f92:	4618      	mov	r0, r3
 8007f94:	f7fe fc3a 	bl	800680c <xQueueReceive>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	f47f af2e 	bne.w	8007dfc <prvProcessReceivedCommands+0x8>
	}
}
 8007fa0:	bf00      	nop
 8007fa2:	3730      	adds	r7, #48	; 0x30
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}
 8007fa8:	20000dfc 	.word	0x20000dfc

08007fac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b088      	sub	sp, #32
 8007fb0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007fb2:	e047      	b.n	8008044 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007fb4:	4b2d      	ldr	r3, [pc, #180]	; (800806c <prvSwitchTimerLists+0xc0>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	68db      	ldr	r3, [r3, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fbe:	4b2b      	ldr	r3, [pc, #172]	; (800806c <prvSwitchTimerLists+0xc0>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	68db      	ldr	r3, [r3, #12]
 8007fc4:	68db      	ldr	r3, [r3, #12]
 8007fc6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	3304      	adds	r3, #4
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f7fe f967 	bl	80062a0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	6a1b      	ldr	r3, [r3, #32]
 8007fd6:	68f8      	ldr	r0, [r7, #12]
 8007fd8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007fe0:	f003 0304 	and.w	r3, r3, #4
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d02d      	beq.n	8008044 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	699b      	ldr	r3, [r3, #24]
 8007fec:	693a      	ldr	r2, [r7, #16]
 8007fee:	4413      	add	r3, r2
 8007ff0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007ff2:	68ba      	ldr	r2, [r7, #8]
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d90e      	bls.n	8008018 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	68ba      	ldr	r2, [r7, #8]
 8007ffe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	68fa      	ldr	r2, [r7, #12]
 8008004:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008006:	4b19      	ldr	r3, [pc, #100]	; (800806c <prvSwitchTimerLists+0xc0>)
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	3304      	adds	r3, #4
 800800e:	4619      	mov	r1, r3
 8008010:	4610      	mov	r0, r2
 8008012:	f7fe f90c 	bl	800622e <vListInsert>
 8008016:	e015      	b.n	8008044 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008018:	2300      	movs	r3, #0
 800801a:	9300      	str	r3, [sp, #0]
 800801c:	2300      	movs	r3, #0
 800801e:	693a      	ldr	r2, [r7, #16]
 8008020:	2100      	movs	r1, #0
 8008022:	68f8      	ldr	r0, [r7, #12]
 8008024:	f7ff fd68 	bl	8007af8 <xTimerGenericCommand>
 8008028:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d109      	bne.n	8008044 <prvSwitchTimerLists+0x98>
 8008030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008034:	f383 8811 	msr	BASEPRI, r3
 8008038:	f3bf 8f6f 	isb	sy
 800803c:	f3bf 8f4f 	dsb	sy
 8008040:	603b      	str	r3, [r7, #0]
 8008042:	e7fe      	b.n	8008042 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008044:	4b09      	ldr	r3, [pc, #36]	; (800806c <prvSwitchTimerLists+0xc0>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d1b2      	bne.n	8007fb4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800804e:	4b07      	ldr	r3, [pc, #28]	; (800806c <prvSwitchTimerLists+0xc0>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008054:	4b06      	ldr	r3, [pc, #24]	; (8008070 <prvSwitchTimerLists+0xc4>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a04      	ldr	r2, [pc, #16]	; (800806c <prvSwitchTimerLists+0xc0>)
 800805a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800805c:	4a04      	ldr	r2, [pc, #16]	; (8008070 <prvSwitchTimerLists+0xc4>)
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	6013      	str	r3, [r2, #0]
}
 8008062:	bf00      	nop
 8008064:	3718      	adds	r7, #24
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop
 800806c:	20000df4 	.word	0x20000df4
 8008070:	20000df8 	.word	0x20000df8

08008074 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b082      	sub	sp, #8
 8008078:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800807a:	f000 f95f 	bl	800833c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800807e:	4b15      	ldr	r3, [pc, #84]	; (80080d4 <prvCheckForValidListAndQueue+0x60>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d120      	bne.n	80080c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008086:	4814      	ldr	r0, [pc, #80]	; (80080d8 <prvCheckForValidListAndQueue+0x64>)
 8008088:	f7fe f880 	bl	800618c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800808c:	4813      	ldr	r0, [pc, #76]	; (80080dc <prvCheckForValidListAndQueue+0x68>)
 800808e:	f7fe f87d 	bl	800618c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008092:	4b13      	ldr	r3, [pc, #76]	; (80080e0 <prvCheckForValidListAndQueue+0x6c>)
 8008094:	4a10      	ldr	r2, [pc, #64]	; (80080d8 <prvCheckForValidListAndQueue+0x64>)
 8008096:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008098:	4b12      	ldr	r3, [pc, #72]	; (80080e4 <prvCheckForValidListAndQueue+0x70>)
 800809a:	4a10      	ldr	r2, [pc, #64]	; (80080dc <prvCheckForValidListAndQueue+0x68>)
 800809c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800809e:	2300      	movs	r3, #0
 80080a0:	9300      	str	r3, [sp, #0]
 80080a2:	4b11      	ldr	r3, [pc, #68]	; (80080e8 <prvCheckForValidListAndQueue+0x74>)
 80080a4:	4a11      	ldr	r2, [pc, #68]	; (80080ec <prvCheckForValidListAndQueue+0x78>)
 80080a6:	2110      	movs	r1, #16
 80080a8:	200a      	movs	r0, #10
 80080aa:	f7fe f98b 	bl	80063c4 <xQueueGenericCreateStatic>
 80080ae:	4602      	mov	r2, r0
 80080b0:	4b08      	ldr	r3, [pc, #32]	; (80080d4 <prvCheckForValidListAndQueue+0x60>)
 80080b2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80080b4:	4b07      	ldr	r3, [pc, #28]	; (80080d4 <prvCheckForValidListAndQueue+0x60>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d005      	beq.n	80080c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80080bc:	4b05      	ldr	r3, [pc, #20]	; (80080d4 <prvCheckForValidListAndQueue+0x60>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	490b      	ldr	r1, [pc, #44]	; (80080f0 <prvCheckForValidListAndQueue+0x7c>)
 80080c2:	4618      	mov	r0, r3
 80080c4:	f7fe fd8e 	bl	8006be4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80080c8:	f000 f966 	bl	8008398 <vPortExitCritical>
}
 80080cc:	bf00      	nop
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	20000dfc 	.word	0x20000dfc
 80080d8:	20000dcc 	.word	0x20000dcc
 80080dc:	20000de0 	.word	0x20000de0
 80080e0:	20000df4 	.word	0x20000df4
 80080e4:	20000df8 	.word	0x20000df8
 80080e8:	20000ea8 	.word	0x20000ea8
 80080ec:	20000e08 	.word	0x20000e08
 80080f0:	0800956c 	.word	0x0800956c

080080f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80080f4:	b480      	push	{r7}
 80080f6:	b085      	sub	sp, #20
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	60f8      	str	r0, [r7, #12]
 80080fc:	60b9      	str	r1, [r7, #8]
 80080fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	3b04      	subs	r3, #4
 8008104:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800810c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	3b04      	subs	r3, #4
 8008112:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	f023 0201 	bic.w	r2, r3, #1
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	3b04      	subs	r3, #4
 8008122:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008124:	4a0c      	ldr	r2, [pc, #48]	; (8008158 <pxPortInitialiseStack+0x64>)
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	3b14      	subs	r3, #20
 800812e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	3b04      	subs	r3, #4
 800813a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f06f 0202 	mvn.w	r2, #2
 8008142:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	3b20      	subs	r3, #32
 8008148:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800814a:	68fb      	ldr	r3, [r7, #12]
}
 800814c:	4618      	mov	r0, r3
 800814e:	3714      	adds	r7, #20
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr
 8008158:	0800815d 	.word	0x0800815d

0800815c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800815c:	b480      	push	{r7}
 800815e:	b085      	sub	sp, #20
 8008160:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008162:	2300      	movs	r3, #0
 8008164:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008166:	4b11      	ldr	r3, [pc, #68]	; (80081ac <prvTaskExitError+0x50>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800816e:	d009      	beq.n	8008184 <prvTaskExitError+0x28>
 8008170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008174:	f383 8811 	msr	BASEPRI, r3
 8008178:	f3bf 8f6f 	isb	sy
 800817c:	f3bf 8f4f 	dsb	sy
 8008180:	60fb      	str	r3, [r7, #12]
 8008182:	e7fe      	b.n	8008182 <prvTaskExitError+0x26>
 8008184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008188:	f383 8811 	msr	BASEPRI, r3
 800818c:	f3bf 8f6f 	isb	sy
 8008190:	f3bf 8f4f 	dsb	sy
 8008194:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008196:	bf00      	nop
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d0fc      	beq.n	8008198 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800819e:	bf00      	nop
 80081a0:	3714      	adds	r7, #20
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr
 80081aa:	bf00      	nop
 80081ac:	2000011c 	.word	0x2000011c

080081b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80081b0:	4b07      	ldr	r3, [pc, #28]	; (80081d0 <pxCurrentTCBConst2>)
 80081b2:	6819      	ldr	r1, [r3, #0]
 80081b4:	6808      	ldr	r0, [r1, #0]
 80081b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ba:	f380 8809 	msr	PSP, r0
 80081be:	f3bf 8f6f 	isb	sy
 80081c2:	f04f 0000 	mov.w	r0, #0
 80081c6:	f380 8811 	msr	BASEPRI, r0
 80081ca:	4770      	bx	lr
 80081cc:	f3af 8000 	nop.w

080081d0 <pxCurrentTCBConst2>:
 80081d0:	200008cc 	.word	0x200008cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80081d4:	bf00      	nop
 80081d6:	bf00      	nop

080081d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80081d8:	4808      	ldr	r0, [pc, #32]	; (80081fc <prvPortStartFirstTask+0x24>)
 80081da:	6800      	ldr	r0, [r0, #0]
 80081dc:	6800      	ldr	r0, [r0, #0]
 80081de:	f380 8808 	msr	MSP, r0
 80081e2:	f04f 0000 	mov.w	r0, #0
 80081e6:	f380 8814 	msr	CONTROL, r0
 80081ea:	b662      	cpsie	i
 80081ec:	b661      	cpsie	f
 80081ee:	f3bf 8f4f 	dsb	sy
 80081f2:	f3bf 8f6f 	isb	sy
 80081f6:	df00      	svc	0
 80081f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80081fa:	bf00      	nop
 80081fc:	e000ed08 	.word	0xe000ed08

08008200 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b086      	sub	sp, #24
 8008204:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008206:	4b44      	ldr	r3, [pc, #272]	; (8008318 <xPortStartScheduler+0x118>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a44      	ldr	r2, [pc, #272]	; (800831c <xPortStartScheduler+0x11c>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d109      	bne.n	8008224 <xPortStartScheduler+0x24>
 8008210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008214:	f383 8811 	msr	BASEPRI, r3
 8008218:	f3bf 8f6f 	isb	sy
 800821c:	f3bf 8f4f 	dsb	sy
 8008220:	613b      	str	r3, [r7, #16]
 8008222:	e7fe      	b.n	8008222 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008224:	4b3c      	ldr	r3, [pc, #240]	; (8008318 <xPortStartScheduler+0x118>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a3d      	ldr	r2, [pc, #244]	; (8008320 <xPortStartScheduler+0x120>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d109      	bne.n	8008242 <xPortStartScheduler+0x42>
 800822e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008232:	f383 8811 	msr	BASEPRI, r3
 8008236:	f3bf 8f6f 	isb	sy
 800823a:	f3bf 8f4f 	dsb	sy
 800823e:	60fb      	str	r3, [r7, #12]
 8008240:	e7fe      	b.n	8008240 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008242:	4b38      	ldr	r3, [pc, #224]	; (8008324 <xPortStartScheduler+0x124>)
 8008244:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	781b      	ldrb	r3, [r3, #0]
 800824a:	b2db      	uxtb	r3, r3
 800824c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	22ff      	movs	r2, #255	; 0xff
 8008252:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	781b      	ldrb	r3, [r3, #0]
 8008258:	b2db      	uxtb	r3, r3
 800825a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800825c:	78fb      	ldrb	r3, [r7, #3]
 800825e:	b2db      	uxtb	r3, r3
 8008260:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008264:	b2da      	uxtb	r2, r3
 8008266:	4b30      	ldr	r3, [pc, #192]	; (8008328 <xPortStartScheduler+0x128>)
 8008268:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800826a:	4b30      	ldr	r3, [pc, #192]	; (800832c <xPortStartScheduler+0x12c>)
 800826c:	2207      	movs	r2, #7
 800826e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008270:	e009      	b.n	8008286 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8008272:	4b2e      	ldr	r3, [pc, #184]	; (800832c <xPortStartScheduler+0x12c>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	3b01      	subs	r3, #1
 8008278:	4a2c      	ldr	r2, [pc, #176]	; (800832c <xPortStartScheduler+0x12c>)
 800827a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800827c:	78fb      	ldrb	r3, [r7, #3]
 800827e:	b2db      	uxtb	r3, r3
 8008280:	005b      	lsls	r3, r3, #1
 8008282:	b2db      	uxtb	r3, r3
 8008284:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008286:	78fb      	ldrb	r3, [r7, #3]
 8008288:	b2db      	uxtb	r3, r3
 800828a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800828e:	2b80      	cmp	r3, #128	; 0x80
 8008290:	d0ef      	beq.n	8008272 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008292:	4b26      	ldr	r3, [pc, #152]	; (800832c <xPortStartScheduler+0x12c>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f1c3 0307 	rsb	r3, r3, #7
 800829a:	2b04      	cmp	r3, #4
 800829c:	d009      	beq.n	80082b2 <xPortStartScheduler+0xb2>
 800829e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a2:	f383 8811 	msr	BASEPRI, r3
 80082a6:	f3bf 8f6f 	isb	sy
 80082aa:	f3bf 8f4f 	dsb	sy
 80082ae:	60bb      	str	r3, [r7, #8]
 80082b0:	e7fe      	b.n	80082b0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80082b2:	4b1e      	ldr	r3, [pc, #120]	; (800832c <xPortStartScheduler+0x12c>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	021b      	lsls	r3, r3, #8
 80082b8:	4a1c      	ldr	r2, [pc, #112]	; (800832c <xPortStartScheduler+0x12c>)
 80082ba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80082bc:	4b1b      	ldr	r3, [pc, #108]	; (800832c <xPortStartScheduler+0x12c>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80082c4:	4a19      	ldr	r2, [pc, #100]	; (800832c <xPortStartScheduler+0x12c>)
 80082c6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	b2da      	uxtb	r2, r3
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80082d0:	4b17      	ldr	r3, [pc, #92]	; (8008330 <xPortStartScheduler+0x130>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a16      	ldr	r2, [pc, #88]	; (8008330 <xPortStartScheduler+0x130>)
 80082d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80082da:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80082dc:	4b14      	ldr	r3, [pc, #80]	; (8008330 <xPortStartScheduler+0x130>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a13      	ldr	r2, [pc, #76]	; (8008330 <xPortStartScheduler+0x130>)
 80082e2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80082e6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80082e8:	f000 f8d6 	bl	8008498 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80082ec:	4b11      	ldr	r3, [pc, #68]	; (8008334 <xPortStartScheduler+0x134>)
 80082ee:	2200      	movs	r2, #0
 80082f0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80082f2:	f000 f8f5 	bl	80084e0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80082f6:	4b10      	ldr	r3, [pc, #64]	; (8008338 <xPortStartScheduler+0x138>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a0f      	ldr	r2, [pc, #60]	; (8008338 <xPortStartScheduler+0x138>)
 80082fc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008300:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008302:	f7ff ff69 	bl	80081d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008306:	f7ff f871 	bl	80073ec <vTaskSwitchContext>
	prvTaskExitError();
 800830a:	f7ff ff27 	bl	800815c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800830e:	2300      	movs	r3, #0
}
 8008310:	4618      	mov	r0, r3
 8008312:	3718      	adds	r7, #24
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}
 8008318:	e000ed00 	.word	0xe000ed00
 800831c:	410fc271 	.word	0x410fc271
 8008320:	410fc270 	.word	0x410fc270
 8008324:	e000e400 	.word	0xe000e400
 8008328:	20000ef8 	.word	0x20000ef8
 800832c:	20000efc 	.word	0x20000efc
 8008330:	e000ed20 	.word	0xe000ed20
 8008334:	2000011c 	.word	0x2000011c
 8008338:	e000ef34 	.word	0xe000ef34

0800833c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800833c:	b480      	push	{r7}
 800833e:	b083      	sub	sp, #12
 8008340:	af00      	add	r7, sp, #0
 8008342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008346:	f383 8811 	msr	BASEPRI, r3
 800834a:	f3bf 8f6f 	isb	sy
 800834e:	f3bf 8f4f 	dsb	sy
 8008352:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008354:	4b0e      	ldr	r3, [pc, #56]	; (8008390 <vPortEnterCritical+0x54>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	3301      	adds	r3, #1
 800835a:	4a0d      	ldr	r2, [pc, #52]	; (8008390 <vPortEnterCritical+0x54>)
 800835c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800835e:	4b0c      	ldr	r3, [pc, #48]	; (8008390 <vPortEnterCritical+0x54>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	2b01      	cmp	r3, #1
 8008364:	d10e      	bne.n	8008384 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008366:	4b0b      	ldr	r3, [pc, #44]	; (8008394 <vPortEnterCritical+0x58>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	b2db      	uxtb	r3, r3
 800836c:	2b00      	cmp	r3, #0
 800836e:	d009      	beq.n	8008384 <vPortEnterCritical+0x48>
 8008370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008374:	f383 8811 	msr	BASEPRI, r3
 8008378:	f3bf 8f6f 	isb	sy
 800837c:	f3bf 8f4f 	dsb	sy
 8008380:	603b      	str	r3, [r7, #0]
 8008382:	e7fe      	b.n	8008382 <vPortEnterCritical+0x46>
	}
}
 8008384:	bf00      	nop
 8008386:	370c      	adds	r7, #12
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr
 8008390:	2000011c 	.word	0x2000011c
 8008394:	e000ed04 	.word	0xe000ed04

08008398 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008398:	b480      	push	{r7}
 800839a:	b083      	sub	sp, #12
 800839c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800839e:	4b11      	ldr	r3, [pc, #68]	; (80083e4 <vPortExitCritical+0x4c>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d109      	bne.n	80083ba <vPortExitCritical+0x22>
 80083a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083aa:	f383 8811 	msr	BASEPRI, r3
 80083ae:	f3bf 8f6f 	isb	sy
 80083b2:	f3bf 8f4f 	dsb	sy
 80083b6:	607b      	str	r3, [r7, #4]
 80083b8:	e7fe      	b.n	80083b8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80083ba:	4b0a      	ldr	r3, [pc, #40]	; (80083e4 <vPortExitCritical+0x4c>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	3b01      	subs	r3, #1
 80083c0:	4a08      	ldr	r2, [pc, #32]	; (80083e4 <vPortExitCritical+0x4c>)
 80083c2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80083c4:	4b07      	ldr	r3, [pc, #28]	; (80083e4 <vPortExitCritical+0x4c>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d104      	bne.n	80083d6 <vPortExitCritical+0x3e>
 80083cc:	2300      	movs	r3, #0
 80083ce:	603b      	str	r3, [r7, #0]
	__asm volatile
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80083d6:	bf00      	nop
 80083d8:	370c      	adds	r7, #12
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr
 80083e2:	bf00      	nop
 80083e4:	2000011c 	.word	0x2000011c
	...

080083f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80083f0:	f3ef 8009 	mrs	r0, PSP
 80083f4:	f3bf 8f6f 	isb	sy
 80083f8:	4b15      	ldr	r3, [pc, #84]	; (8008450 <pxCurrentTCBConst>)
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	f01e 0f10 	tst.w	lr, #16
 8008400:	bf08      	it	eq
 8008402:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008406:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800840a:	6010      	str	r0, [r2, #0]
 800840c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008410:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008414:	f380 8811 	msr	BASEPRI, r0
 8008418:	f3bf 8f4f 	dsb	sy
 800841c:	f3bf 8f6f 	isb	sy
 8008420:	f7fe ffe4 	bl	80073ec <vTaskSwitchContext>
 8008424:	f04f 0000 	mov.w	r0, #0
 8008428:	f380 8811 	msr	BASEPRI, r0
 800842c:	bc09      	pop	{r0, r3}
 800842e:	6819      	ldr	r1, [r3, #0]
 8008430:	6808      	ldr	r0, [r1, #0]
 8008432:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008436:	f01e 0f10 	tst.w	lr, #16
 800843a:	bf08      	it	eq
 800843c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008440:	f380 8809 	msr	PSP, r0
 8008444:	f3bf 8f6f 	isb	sy
 8008448:	4770      	bx	lr
 800844a:	bf00      	nop
 800844c:	f3af 8000 	nop.w

08008450 <pxCurrentTCBConst>:
 8008450:	200008cc 	.word	0x200008cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008454:	bf00      	nop
 8008456:	bf00      	nop

08008458 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
	__asm volatile
 800845e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008462:	f383 8811 	msr	BASEPRI, r3
 8008466:	f3bf 8f6f 	isb	sy
 800846a:	f3bf 8f4f 	dsb	sy
 800846e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008470:	f7fe ff04 	bl	800727c <xTaskIncrementTick>
 8008474:	4603      	mov	r3, r0
 8008476:	2b00      	cmp	r3, #0
 8008478:	d003      	beq.n	8008482 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800847a:	4b06      	ldr	r3, [pc, #24]	; (8008494 <SysTick_Handler+0x3c>)
 800847c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008480:	601a      	str	r2, [r3, #0]
 8008482:	2300      	movs	r3, #0
 8008484:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800848c:	bf00      	nop
 800848e:	3708      	adds	r7, #8
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}
 8008494:	e000ed04 	.word	0xe000ed04

08008498 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008498:	b480      	push	{r7}
 800849a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800849c:	4b0b      	ldr	r3, [pc, #44]	; (80084cc <vPortSetupTimerInterrupt+0x34>)
 800849e:	2200      	movs	r2, #0
 80084a0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80084a2:	4b0b      	ldr	r3, [pc, #44]	; (80084d0 <vPortSetupTimerInterrupt+0x38>)
 80084a4:	2200      	movs	r2, #0
 80084a6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80084a8:	4b0a      	ldr	r3, [pc, #40]	; (80084d4 <vPortSetupTimerInterrupt+0x3c>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a0a      	ldr	r2, [pc, #40]	; (80084d8 <vPortSetupTimerInterrupt+0x40>)
 80084ae:	fba2 2303 	umull	r2, r3, r2, r3
 80084b2:	099b      	lsrs	r3, r3, #6
 80084b4:	4a09      	ldr	r2, [pc, #36]	; (80084dc <vPortSetupTimerInterrupt+0x44>)
 80084b6:	3b01      	subs	r3, #1
 80084b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80084ba:	4b04      	ldr	r3, [pc, #16]	; (80084cc <vPortSetupTimerInterrupt+0x34>)
 80084bc:	2207      	movs	r2, #7
 80084be:	601a      	str	r2, [r3, #0]
}
 80084c0:	bf00      	nop
 80084c2:	46bd      	mov	sp, r7
 80084c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c8:	4770      	bx	lr
 80084ca:	bf00      	nop
 80084cc:	e000e010 	.word	0xe000e010
 80084d0:	e000e018 	.word	0xe000e018
 80084d4:	20000000 	.word	0x20000000
 80084d8:	10624dd3 	.word	0x10624dd3
 80084dc:	e000e014 	.word	0xe000e014

080084e0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80084e0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80084f0 <vPortEnableVFP+0x10>
 80084e4:	6801      	ldr	r1, [r0, #0]
 80084e6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80084ea:	6001      	str	r1, [r0, #0]
 80084ec:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80084ee:	bf00      	nop
 80084f0:	e000ed88 	.word	0xe000ed88

080084f4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80084f4:	b480      	push	{r7}
 80084f6:	b085      	sub	sp, #20
 80084f8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80084fa:	f3ef 8305 	mrs	r3, IPSR
 80084fe:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2b0f      	cmp	r3, #15
 8008504:	d913      	bls.n	800852e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008506:	4a16      	ldr	r2, [pc, #88]	; (8008560 <vPortValidateInterruptPriority+0x6c>)
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	4413      	add	r3, r2
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008510:	4b14      	ldr	r3, [pc, #80]	; (8008564 <vPortValidateInterruptPriority+0x70>)
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	7afa      	ldrb	r2, [r7, #11]
 8008516:	429a      	cmp	r2, r3
 8008518:	d209      	bcs.n	800852e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800851a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800851e:	f383 8811 	msr	BASEPRI, r3
 8008522:	f3bf 8f6f 	isb	sy
 8008526:	f3bf 8f4f 	dsb	sy
 800852a:	607b      	str	r3, [r7, #4]
 800852c:	e7fe      	b.n	800852c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800852e:	4b0e      	ldr	r3, [pc, #56]	; (8008568 <vPortValidateInterruptPriority+0x74>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008536:	4b0d      	ldr	r3, [pc, #52]	; (800856c <vPortValidateInterruptPriority+0x78>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	429a      	cmp	r2, r3
 800853c:	d909      	bls.n	8008552 <vPortValidateInterruptPriority+0x5e>
 800853e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008542:	f383 8811 	msr	BASEPRI, r3
 8008546:	f3bf 8f6f 	isb	sy
 800854a:	f3bf 8f4f 	dsb	sy
 800854e:	603b      	str	r3, [r7, #0]
 8008550:	e7fe      	b.n	8008550 <vPortValidateInterruptPriority+0x5c>
	}
 8008552:	bf00      	nop
 8008554:	3714      	adds	r7, #20
 8008556:	46bd      	mov	sp, r7
 8008558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855c:	4770      	bx	lr
 800855e:	bf00      	nop
 8008560:	e000e3f0 	.word	0xe000e3f0
 8008564:	20000ef8 	.word	0x20000ef8
 8008568:	e000ed0c 	.word	0xe000ed0c
 800856c:	20000efc 	.word	0x20000efc

08008570 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b08a      	sub	sp, #40	; 0x28
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008578:	2300      	movs	r3, #0
 800857a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800857c:	f7fe fdc4 	bl	8007108 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008580:	4b57      	ldr	r3, [pc, #348]	; (80086e0 <pvPortMalloc+0x170>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d101      	bne.n	800858c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008588:	f000 f90c 	bl	80087a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800858c:	4b55      	ldr	r3, [pc, #340]	; (80086e4 <pvPortMalloc+0x174>)
 800858e:	681a      	ldr	r2, [r3, #0]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	4013      	ands	r3, r2
 8008594:	2b00      	cmp	r3, #0
 8008596:	f040 808c 	bne.w	80086b2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d01c      	beq.n	80085da <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80085a0:	2208      	movs	r2, #8
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	4413      	add	r3, r2
 80085a6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f003 0307 	and.w	r3, r3, #7
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d013      	beq.n	80085da <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f023 0307 	bic.w	r3, r3, #7
 80085b8:	3308      	adds	r3, #8
 80085ba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f003 0307 	and.w	r3, r3, #7
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d009      	beq.n	80085da <pvPortMalloc+0x6a>
 80085c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ca:	f383 8811 	msr	BASEPRI, r3
 80085ce:	f3bf 8f6f 	isb	sy
 80085d2:	f3bf 8f4f 	dsb	sy
 80085d6:	617b      	str	r3, [r7, #20]
 80085d8:	e7fe      	b.n	80085d8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d068      	beq.n	80086b2 <pvPortMalloc+0x142>
 80085e0:	4b41      	ldr	r3, [pc, #260]	; (80086e8 <pvPortMalloc+0x178>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	687a      	ldr	r2, [r7, #4]
 80085e6:	429a      	cmp	r2, r3
 80085e8:	d863      	bhi.n	80086b2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80085ea:	4b40      	ldr	r3, [pc, #256]	; (80086ec <pvPortMalloc+0x17c>)
 80085ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80085ee:	4b3f      	ldr	r3, [pc, #252]	; (80086ec <pvPortMalloc+0x17c>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80085f4:	e004      	b.n	8008600 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80085f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80085fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	429a      	cmp	r2, r3
 8008608:	d903      	bls.n	8008612 <pvPortMalloc+0xa2>
 800860a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d1f1      	bne.n	80085f6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008612:	4b33      	ldr	r3, [pc, #204]	; (80086e0 <pvPortMalloc+0x170>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008618:	429a      	cmp	r2, r3
 800861a:	d04a      	beq.n	80086b2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800861c:	6a3b      	ldr	r3, [r7, #32]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	2208      	movs	r2, #8
 8008622:	4413      	add	r3, r2
 8008624:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	6a3b      	ldr	r3, [r7, #32]
 800862c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800862e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008630:	685a      	ldr	r2, [r3, #4]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	1ad2      	subs	r2, r2, r3
 8008636:	2308      	movs	r3, #8
 8008638:	005b      	lsls	r3, r3, #1
 800863a:	429a      	cmp	r2, r3
 800863c:	d91e      	bls.n	800867c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800863e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	4413      	add	r3, r2
 8008644:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008646:	69bb      	ldr	r3, [r7, #24]
 8008648:	f003 0307 	and.w	r3, r3, #7
 800864c:	2b00      	cmp	r3, #0
 800864e:	d009      	beq.n	8008664 <pvPortMalloc+0xf4>
 8008650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008654:	f383 8811 	msr	BASEPRI, r3
 8008658:	f3bf 8f6f 	isb	sy
 800865c:	f3bf 8f4f 	dsb	sy
 8008660:	613b      	str	r3, [r7, #16]
 8008662:	e7fe      	b.n	8008662 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008666:	685a      	ldr	r2, [r3, #4]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	1ad2      	subs	r2, r2, r3
 800866c:	69bb      	ldr	r3, [r7, #24]
 800866e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008676:	69b8      	ldr	r0, [r7, #24]
 8008678:	f000 f8f6 	bl	8008868 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800867c:	4b1a      	ldr	r3, [pc, #104]	; (80086e8 <pvPortMalloc+0x178>)
 800867e:	681a      	ldr	r2, [r3, #0]
 8008680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	1ad3      	subs	r3, r2, r3
 8008686:	4a18      	ldr	r2, [pc, #96]	; (80086e8 <pvPortMalloc+0x178>)
 8008688:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800868a:	4b17      	ldr	r3, [pc, #92]	; (80086e8 <pvPortMalloc+0x178>)
 800868c:	681a      	ldr	r2, [r3, #0]
 800868e:	4b18      	ldr	r3, [pc, #96]	; (80086f0 <pvPortMalloc+0x180>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	429a      	cmp	r2, r3
 8008694:	d203      	bcs.n	800869e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008696:	4b14      	ldr	r3, [pc, #80]	; (80086e8 <pvPortMalloc+0x178>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a15      	ldr	r2, [pc, #84]	; (80086f0 <pvPortMalloc+0x180>)
 800869c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800869e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a0:	685a      	ldr	r2, [r3, #4]
 80086a2:	4b10      	ldr	r3, [pc, #64]	; (80086e4 <pvPortMalloc+0x174>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	431a      	orrs	r2, r3
 80086a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80086ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ae:	2200      	movs	r2, #0
 80086b0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80086b2:	f7fe fd37 	bl	8007124 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80086b6:	69fb      	ldr	r3, [r7, #28]
 80086b8:	f003 0307 	and.w	r3, r3, #7
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d009      	beq.n	80086d4 <pvPortMalloc+0x164>
 80086c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c4:	f383 8811 	msr	BASEPRI, r3
 80086c8:	f3bf 8f6f 	isb	sy
 80086cc:	f3bf 8f4f 	dsb	sy
 80086d0:	60fb      	str	r3, [r7, #12]
 80086d2:	e7fe      	b.n	80086d2 <pvPortMalloc+0x162>
	return pvReturn;
 80086d4:	69fb      	ldr	r3, [r7, #28]
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3728      	adds	r7, #40	; 0x28
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
 80086de:	bf00      	nop
 80086e0:	20004b08 	.word	0x20004b08
 80086e4:	20004b14 	.word	0x20004b14
 80086e8:	20004b0c 	.word	0x20004b0c
 80086ec:	20004b00 	.word	0x20004b00
 80086f0:	20004b10 	.word	0x20004b10

080086f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b086      	sub	sp, #24
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d046      	beq.n	8008794 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008706:	2308      	movs	r3, #8
 8008708:	425b      	negs	r3, r3
 800870a:	697a      	ldr	r2, [r7, #20]
 800870c:	4413      	add	r3, r2
 800870e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	685a      	ldr	r2, [r3, #4]
 8008718:	4b20      	ldr	r3, [pc, #128]	; (800879c <vPortFree+0xa8>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4013      	ands	r3, r2
 800871e:	2b00      	cmp	r3, #0
 8008720:	d109      	bne.n	8008736 <vPortFree+0x42>
 8008722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008726:	f383 8811 	msr	BASEPRI, r3
 800872a:	f3bf 8f6f 	isb	sy
 800872e:	f3bf 8f4f 	dsb	sy
 8008732:	60fb      	str	r3, [r7, #12]
 8008734:	e7fe      	b.n	8008734 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d009      	beq.n	8008752 <vPortFree+0x5e>
 800873e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008742:	f383 8811 	msr	BASEPRI, r3
 8008746:	f3bf 8f6f 	isb	sy
 800874a:	f3bf 8f4f 	dsb	sy
 800874e:	60bb      	str	r3, [r7, #8]
 8008750:	e7fe      	b.n	8008750 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	685a      	ldr	r2, [r3, #4]
 8008756:	4b11      	ldr	r3, [pc, #68]	; (800879c <vPortFree+0xa8>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4013      	ands	r3, r2
 800875c:	2b00      	cmp	r3, #0
 800875e:	d019      	beq.n	8008794 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d115      	bne.n	8008794 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	685a      	ldr	r2, [r3, #4]
 800876c:	4b0b      	ldr	r3, [pc, #44]	; (800879c <vPortFree+0xa8>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	43db      	mvns	r3, r3
 8008772:	401a      	ands	r2, r3
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008778:	f7fe fcc6 	bl	8007108 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	685a      	ldr	r2, [r3, #4]
 8008780:	4b07      	ldr	r3, [pc, #28]	; (80087a0 <vPortFree+0xac>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4413      	add	r3, r2
 8008786:	4a06      	ldr	r2, [pc, #24]	; (80087a0 <vPortFree+0xac>)
 8008788:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800878a:	6938      	ldr	r0, [r7, #16]
 800878c:	f000 f86c 	bl	8008868 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008790:	f7fe fcc8 	bl	8007124 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008794:	bf00      	nop
 8008796:	3718      	adds	r7, #24
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}
 800879c:	20004b14 	.word	0x20004b14
 80087a0:	20004b0c 	.word	0x20004b0c

080087a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80087a4:	b480      	push	{r7}
 80087a6:	b085      	sub	sp, #20
 80087a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80087aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80087ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80087b0:	4b27      	ldr	r3, [pc, #156]	; (8008850 <prvHeapInit+0xac>)
 80087b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f003 0307 	and.w	r3, r3, #7
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d00c      	beq.n	80087d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	3307      	adds	r3, #7
 80087c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f023 0307 	bic.w	r3, r3, #7
 80087ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80087cc:	68ba      	ldr	r2, [r7, #8]
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	1ad3      	subs	r3, r2, r3
 80087d2:	4a1f      	ldr	r2, [pc, #124]	; (8008850 <prvHeapInit+0xac>)
 80087d4:	4413      	add	r3, r2
 80087d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80087dc:	4a1d      	ldr	r2, [pc, #116]	; (8008854 <prvHeapInit+0xb0>)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80087e2:	4b1c      	ldr	r3, [pc, #112]	; (8008854 <prvHeapInit+0xb0>)
 80087e4:	2200      	movs	r2, #0
 80087e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	68ba      	ldr	r2, [r7, #8]
 80087ec:	4413      	add	r3, r2
 80087ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80087f0:	2208      	movs	r2, #8
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	1a9b      	subs	r3, r3, r2
 80087f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f023 0307 	bic.w	r3, r3, #7
 80087fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	4a15      	ldr	r2, [pc, #84]	; (8008858 <prvHeapInit+0xb4>)
 8008804:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008806:	4b14      	ldr	r3, [pc, #80]	; (8008858 <prvHeapInit+0xb4>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	2200      	movs	r2, #0
 800880c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800880e:	4b12      	ldr	r3, [pc, #72]	; (8008858 <prvHeapInit+0xb4>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	2200      	movs	r2, #0
 8008814:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	68fa      	ldr	r2, [r7, #12]
 800881e:	1ad2      	subs	r2, r2, r3
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008824:	4b0c      	ldr	r3, [pc, #48]	; (8008858 <prvHeapInit+0xb4>)
 8008826:	681a      	ldr	r2, [r3, #0]
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	4a0a      	ldr	r2, [pc, #40]	; (800885c <prvHeapInit+0xb8>)
 8008832:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	4a09      	ldr	r2, [pc, #36]	; (8008860 <prvHeapInit+0xbc>)
 800883a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800883c:	4b09      	ldr	r3, [pc, #36]	; (8008864 <prvHeapInit+0xc0>)
 800883e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008842:	601a      	str	r2, [r3, #0]
}
 8008844:	bf00      	nop
 8008846:	3714      	adds	r7, #20
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr
 8008850:	20000f00 	.word	0x20000f00
 8008854:	20004b00 	.word	0x20004b00
 8008858:	20004b08 	.word	0x20004b08
 800885c:	20004b10 	.word	0x20004b10
 8008860:	20004b0c 	.word	0x20004b0c
 8008864:	20004b14 	.word	0x20004b14

08008868 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008868:	b480      	push	{r7}
 800886a:	b085      	sub	sp, #20
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008870:	4b28      	ldr	r3, [pc, #160]	; (8008914 <prvInsertBlockIntoFreeList+0xac>)
 8008872:	60fb      	str	r3, [r7, #12]
 8008874:	e002      	b.n	800887c <prvInsertBlockIntoFreeList+0x14>
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	60fb      	str	r3, [r7, #12]
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	687a      	ldr	r2, [r7, #4]
 8008882:	429a      	cmp	r2, r3
 8008884:	d8f7      	bhi.n	8008876 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	68ba      	ldr	r2, [r7, #8]
 8008890:	4413      	add	r3, r2
 8008892:	687a      	ldr	r2, [r7, #4]
 8008894:	429a      	cmp	r2, r3
 8008896:	d108      	bne.n	80088aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	685a      	ldr	r2, [r3, #4]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	441a      	add	r2, r3
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	685b      	ldr	r3, [r3, #4]
 80088b2:	68ba      	ldr	r2, [r7, #8]
 80088b4:	441a      	add	r2, r3
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d118      	bne.n	80088f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681a      	ldr	r2, [r3, #0]
 80088c2:	4b15      	ldr	r3, [pc, #84]	; (8008918 <prvInsertBlockIntoFreeList+0xb0>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d00d      	beq.n	80088e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	685a      	ldr	r2, [r3, #4]
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	441a      	add	r2, r3
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	681a      	ldr	r2, [r3, #0]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	601a      	str	r2, [r3, #0]
 80088e4:	e008      	b.n	80088f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80088e6:	4b0c      	ldr	r3, [pc, #48]	; (8008918 <prvInsertBlockIntoFreeList+0xb0>)
 80088e8:	681a      	ldr	r2, [r3, #0]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	601a      	str	r2, [r3, #0]
 80088ee:	e003      	b.n	80088f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681a      	ldr	r2, [r3, #0]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80088f8:	68fa      	ldr	r2, [r7, #12]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	429a      	cmp	r2, r3
 80088fe:	d002      	beq.n	8008906 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008906:	bf00      	nop
 8008908:	3714      	adds	r7, #20
 800890a:	46bd      	mov	sp, r7
 800890c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008910:	4770      	bx	lr
 8008912:	bf00      	nop
 8008914:	20004b00 	.word	0x20004b00
 8008918:	20004b08 	.word	0x20004b08

0800891c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008920:	2200      	movs	r2, #0
 8008922:	4912      	ldr	r1, [pc, #72]	; (800896c <MX_USB_DEVICE_Init+0x50>)
 8008924:	4812      	ldr	r0, [pc, #72]	; (8008970 <MX_USB_DEVICE_Init+0x54>)
 8008926:	f7fc f9b3 	bl	8004c90 <USBD_Init>
 800892a:	4603      	mov	r3, r0
 800892c:	2b00      	cmp	r3, #0
 800892e:	d001      	beq.n	8008934 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008930:	f7f7 ff4c 	bl	80007cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008934:	490f      	ldr	r1, [pc, #60]	; (8008974 <MX_USB_DEVICE_Init+0x58>)
 8008936:	480e      	ldr	r0, [pc, #56]	; (8008970 <MX_USB_DEVICE_Init+0x54>)
 8008938:	f7fc f9e0 	bl	8004cfc <USBD_RegisterClass>
 800893c:	4603      	mov	r3, r0
 800893e:	2b00      	cmp	r3, #0
 8008940:	d001      	beq.n	8008946 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008942:	f7f7 ff43 	bl	80007cc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008946:	490c      	ldr	r1, [pc, #48]	; (8008978 <MX_USB_DEVICE_Init+0x5c>)
 8008948:	4809      	ldr	r0, [pc, #36]	; (8008970 <MX_USB_DEVICE_Init+0x54>)
 800894a:	f7fc f935 	bl	8004bb8 <USBD_CDC_RegisterInterface>
 800894e:	4603      	mov	r3, r0
 8008950:	2b00      	cmp	r3, #0
 8008952:	d001      	beq.n	8008958 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008954:	f7f7 ff3a 	bl	80007cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008958:	4805      	ldr	r0, [pc, #20]	; (8008970 <MX_USB_DEVICE_Init+0x54>)
 800895a:	f7fc f9f0 	bl	8004d3e <USBD_Start>
 800895e:	4603      	mov	r3, r0
 8008960:	2b00      	cmp	r3, #0
 8008962:	d001      	beq.n	8008968 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008964:	f7f7 ff32 	bl	80007cc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008968:	bf00      	nop
 800896a:	bd80      	pop	{r7, pc}
 800896c:	20000134 	.word	0x20000134
 8008970:	20004ba8 	.word	0x20004ba8
 8008974:	20000018 	.word	0x20000018
 8008978:	20000120 	.word	0x20000120

0800897c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008980:	2200      	movs	r2, #0
 8008982:	4905      	ldr	r1, [pc, #20]	; (8008998 <CDC_Init_FS+0x1c>)
 8008984:	4805      	ldr	r0, [pc, #20]	; (800899c <CDC_Init_FS+0x20>)
 8008986:	f7fc f92c 	bl	8004be2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800898a:	4905      	ldr	r1, [pc, #20]	; (80089a0 <CDC_Init_FS+0x24>)
 800898c:	4803      	ldr	r0, [pc, #12]	; (800899c <CDC_Init_FS+0x20>)
 800898e:	f7fc f941 	bl	8004c14 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008992:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008994:	4618      	mov	r0, r3
 8008996:	bd80      	pop	{r7, pc}
 8008998:	20005678 	.word	0x20005678
 800899c:	20004ba8 	.word	0x20004ba8
 80089a0:	20004e78 	.word	0x20004e78

080089a4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80089a4:	b480      	push	{r7}
 80089a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80089a8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr

080089b4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b083      	sub	sp, #12
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	4603      	mov	r3, r0
 80089bc:	6039      	str	r1, [r7, #0]
 80089be:	71fb      	strb	r3, [r7, #7]
 80089c0:	4613      	mov	r3, r2
 80089c2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80089c4:	79fb      	ldrb	r3, [r7, #7]
 80089c6:	2b23      	cmp	r3, #35	; 0x23
 80089c8:	d84a      	bhi.n	8008a60 <CDC_Control_FS+0xac>
 80089ca:	a201      	add	r2, pc, #4	; (adr r2, 80089d0 <CDC_Control_FS+0x1c>)
 80089cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089d0:	08008a61 	.word	0x08008a61
 80089d4:	08008a61 	.word	0x08008a61
 80089d8:	08008a61 	.word	0x08008a61
 80089dc:	08008a61 	.word	0x08008a61
 80089e0:	08008a61 	.word	0x08008a61
 80089e4:	08008a61 	.word	0x08008a61
 80089e8:	08008a61 	.word	0x08008a61
 80089ec:	08008a61 	.word	0x08008a61
 80089f0:	08008a61 	.word	0x08008a61
 80089f4:	08008a61 	.word	0x08008a61
 80089f8:	08008a61 	.word	0x08008a61
 80089fc:	08008a61 	.word	0x08008a61
 8008a00:	08008a61 	.word	0x08008a61
 8008a04:	08008a61 	.word	0x08008a61
 8008a08:	08008a61 	.word	0x08008a61
 8008a0c:	08008a61 	.word	0x08008a61
 8008a10:	08008a61 	.word	0x08008a61
 8008a14:	08008a61 	.word	0x08008a61
 8008a18:	08008a61 	.word	0x08008a61
 8008a1c:	08008a61 	.word	0x08008a61
 8008a20:	08008a61 	.word	0x08008a61
 8008a24:	08008a61 	.word	0x08008a61
 8008a28:	08008a61 	.word	0x08008a61
 8008a2c:	08008a61 	.word	0x08008a61
 8008a30:	08008a61 	.word	0x08008a61
 8008a34:	08008a61 	.word	0x08008a61
 8008a38:	08008a61 	.word	0x08008a61
 8008a3c:	08008a61 	.word	0x08008a61
 8008a40:	08008a61 	.word	0x08008a61
 8008a44:	08008a61 	.word	0x08008a61
 8008a48:	08008a61 	.word	0x08008a61
 8008a4c:	08008a61 	.word	0x08008a61
 8008a50:	08008a61 	.word	0x08008a61
 8008a54:	08008a61 	.word	0x08008a61
 8008a58:	08008a61 	.word	0x08008a61
 8008a5c:	08008a61 	.word	0x08008a61
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008a60:	bf00      	nop
  }

  return (USBD_OK);
 8008a62:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	370c      	adds	r7, #12
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr

08008a70 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b082      	sub	sp, #8
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008a7a:	6879      	ldr	r1, [r7, #4]
 8008a7c:	4805      	ldr	r0, [pc, #20]	; (8008a94 <CDC_Receive_FS+0x24>)
 8008a7e:	f7fc f8c9 	bl	8004c14 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008a82:	4804      	ldr	r0, [pc, #16]	; (8008a94 <CDC_Receive_FS+0x24>)
 8008a84:	f7fc f8da 	bl	8004c3c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008a88:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3708      	adds	r7, #8
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop
 8008a94:	20004ba8 	.word	0x20004ba8

08008a98 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b087      	sub	sp, #28
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	60f8      	str	r0, [r7, #12]
 8008aa0:	60b9      	str	r1, [r7, #8]
 8008aa2:	4613      	mov	r3, r2
 8008aa4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008aaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	371c      	adds	r7, #28
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr
	...

08008abc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b083      	sub	sp, #12
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	6039      	str	r1, [r7, #0]
 8008ac6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	2212      	movs	r2, #18
 8008acc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008ace:	4b03      	ldr	r3, [pc, #12]	; (8008adc <USBD_FS_DeviceDescriptor+0x20>)
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	370c      	adds	r7, #12
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ada:	4770      	bx	lr
 8008adc:	20000150 	.word	0x20000150

08008ae0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b083      	sub	sp, #12
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	6039      	str	r1, [r7, #0]
 8008aea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	2204      	movs	r2, #4
 8008af0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008af2:	4b03      	ldr	r3, [pc, #12]	; (8008b00 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	370c      	adds	r7, #12
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr
 8008b00:	20000164 	.word	0x20000164

08008b04 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b082      	sub	sp, #8
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	6039      	str	r1, [r7, #0]
 8008b0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008b10:	79fb      	ldrb	r3, [r7, #7]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d105      	bne.n	8008b22 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008b16:	683a      	ldr	r2, [r7, #0]
 8008b18:	4907      	ldr	r1, [pc, #28]	; (8008b38 <USBD_FS_ProductStrDescriptor+0x34>)
 8008b1a:	4808      	ldr	r0, [pc, #32]	; (8008b3c <USBD_FS_ProductStrDescriptor+0x38>)
 8008b1c:	f7fd f8dd 	bl	8005cda <USBD_GetString>
 8008b20:	e004      	b.n	8008b2c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008b22:	683a      	ldr	r2, [r7, #0]
 8008b24:	4904      	ldr	r1, [pc, #16]	; (8008b38 <USBD_FS_ProductStrDescriptor+0x34>)
 8008b26:	4805      	ldr	r0, [pc, #20]	; (8008b3c <USBD_FS_ProductStrDescriptor+0x38>)
 8008b28:	f7fd f8d7 	bl	8005cda <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b2c:	4b02      	ldr	r3, [pc, #8]	; (8008b38 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3708      	adds	r7, #8
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	20005e78 	.word	0x20005e78
 8008b3c:	08009574 	.word	0x08009574

08008b40 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b082      	sub	sp, #8
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	4603      	mov	r3, r0
 8008b48:	6039      	str	r1, [r7, #0]
 8008b4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008b4c:	683a      	ldr	r2, [r7, #0]
 8008b4e:	4904      	ldr	r1, [pc, #16]	; (8008b60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008b50:	4804      	ldr	r0, [pc, #16]	; (8008b64 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008b52:	f7fd f8c2 	bl	8005cda <USBD_GetString>
  return USBD_StrDesc;
 8008b56:	4b02      	ldr	r3, [pc, #8]	; (8008b60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3708      	adds	r7, #8
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}
 8008b60:	20005e78 	.word	0x20005e78
 8008b64:	0800958c 	.word	0x0800958c

08008b68 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b082      	sub	sp, #8
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	4603      	mov	r3, r0
 8008b70:	6039      	str	r1, [r7, #0]
 8008b72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	221a      	movs	r2, #26
 8008b78:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008b7a:	f000 f843 	bl	8008c04 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008b7e:	4b02      	ldr	r3, [pc, #8]	; (8008b88 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3708      	adds	r7, #8
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}
 8008b88:	20000168 	.word	0x20000168

08008b8c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b082      	sub	sp, #8
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	4603      	mov	r3, r0
 8008b94:	6039      	str	r1, [r7, #0]
 8008b96:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008b98:	79fb      	ldrb	r3, [r7, #7]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d105      	bne.n	8008baa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b9e:	683a      	ldr	r2, [r7, #0]
 8008ba0:	4907      	ldr	r1, [pc, #28]	; (8008bc0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008ba2:	4808      	ldr	r0, [pc, #32]	; (8008bc4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008ba4:	f7fd f899 	bl	8005cda <USBD_GetString>
 8008ba8:	e004      	b.n	8008bb4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008baa:	683a      	ldr	r2, [r7, #0]
 8008bac:	4904      	ldr	r1, [pc, #16]	; (8008bc0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008bae:	4805      	ldr	r0, [pc, #20]	; (8008bc4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008bb0:	f7fd f893 	bl	8005cda <USBD_GetString>
  }
  return USBD_StrDesc;
 8008bb4:	4b02      	ldr	r3, [pc, #8]	; (8008bc0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3708      	adds	r7, #8
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
 8008bbe:	bf00      	nop
 8008bc0:	20005e78 	.word	0x20005e78
 8008bc4:	080095a0 	.word	0x080095a0

08008bc8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b082      	sub	sp, #8
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	4603      	mov	r3, r0
 8008bd0:	6039      	str	r1, [r7, #0]
 8008bd2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008bd4:	79fb      	ldrb	r3, [r7, #7]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d105      	bne.n	8008be6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008bda:	683a      	ldr	r2, [r7, #0]
 8008bdc:	4907      	ldr	r1, [pc, #28]	; (8008bfc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008bde:	4808      	ldr	r0, [pc, #32]	; (8008c00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008be0:	f7fd f87b 	bl	8005cda <USBD_GetString>
 8008be4:	e004      	b.n	8008bf0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008be6:	683a      	ldr	r2, [r7, #0]
 8008be8:	4904      	ldr	r1, [pc, #16]	; (8008bfc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008bea:	4805      	ldr	r0, [pc, #20]	; (8008c00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008bec:	f7fd f875 	bl	8005cda <USBD_GetString>
  }
  return USBD_StrDesc;
 8008bf0:	4b02      	ldr	r3, [pc, #8]	; (8008bfc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3708      	adds	r7, #8
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}
 8008bfa:	bf00      	nop
 8008bfc:	20005e78 	.word	0x20005e78
 8008c00:	080095ac 	.word	0x080095ac

08008c04 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b084      	sub	sp, #16
 8008c08:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008c0a:	4b0f      	ldr	r3, [pc, #60]	; (8008c48 <Get_SerialNum+0x44>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008c10:	4b0e      	ldr	r3, [pc, #56]	; (8008c4c <Get_SerialNum+0x48>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008c16:	4b0e      	ldr	r3, [pc, #56]	; (8008c50 <Get_SerialNum+0x4c>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008c1c:	68fa      	ldr	r2, [r7, #12]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	4413      	add	r3, r2
 8008c22:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d009      	beq.n	8008c3e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008c2a:	2208      	movs	r2, #8
 8008c2c:	4909      	ldr	r1, [pc, #36]	; (8008c54 <Get_SerialNum+0x50>)
 8008c2e:	68f8      	ldr	r0, [r7, #12]
 8008c30:	f000 f814 	bl	8008c5c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008c34:	2204      	movs	r2, #4
 8008c36:	4908      	ldr	r1, [pc, #32]	; (8008c58 <Get_SerialNum+0x54>)
 8008c38:	68b8      	ldr	r0, [r7, #8]
 8008c3a:	f000 f80f 	bl	8008c5c <IntToUnicode>
  }
}
 8008c3e:	bf00      	nop
 8008c40:	3710      	adds	r7, #16
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}
 8008c46:	bf00      	nop
 8008c48:	1fff7a10 	.word	0x1fff7a10
 8008c4c:	1fff7a14 	.word	0x1fff7a14
 8008c50:	1fff7a18 	.word	0x1fff7a18
 8008c54:	2000016a 	.word	0x2000016a
 8008c58:	2000017a 	.word	0x2000017a

08008c5c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b087      	sub	sp, #28
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	60f8      	str	r0, [r7, #12]
 8008c64:	60b9      	str	r1, [r7, #8]
 8008c66:	4613      	mov	r3, r2
 8008c68:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008c6e:	2300      	movs	r3, #0
 8008c70:	75fb      	strb	r3, [r7, #23]
 8008c72:	e027      	b.n	8008cc4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	0f1b      	lsrs	r3, r3, #28
 8008c78:	2b09      	cmp	r3, #9
 8008c7a:	d80b      	bhi.n	8008c94 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	0f1b      	lsrs	r3, r3, #28
 8008c80:	b2da      	uxtb	r2, r3
 8008c82:	7dfb      	ldrb	r3, [r7, #23]
 8008c84:	005b      	lsls	r3, r3, #1
 8008c86:	4619      	mov	r1, r3
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	440b      	add	r3, r1
 8008c8c:	3230      	adds	r2, #48	; 0x30
 8008c8e:	b2d2      	uxtb	r2, r2
 8008c90:	701a      	strb	r2, [r3, #0]
 8008c92:	e00a      	b.n	8008caa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	0f1b      	lsrs	r3, r3, #28
 8008c98:	b2da      	uxtb	r2, r3
 8008c9a:	7dfb      	ldrb	r3, [r7, #23]
 8008c9c:	005b      	lsls	r3, r3, #1
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	440b      	add	r3, r1
 8008ca4:	3237      	adds	r2, #55	; 0x37
 8008ca6:	b2d2      	uxtb	r2, r2
 8008ca8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	011b      	lsls	r3, r3, #4
 8008cae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008cb0:	7dfb      	ldrb	r3, [r7, #23]
 8008cb2:	005b      	lsls	r3, r3, #1
 8008cb4:	3301      	adds	r3, #1
 8008cb6:	68ba      	ldr	r2, [r7, #8]
 8008cb8:	4413      	add	r3, r2
 8008cba:	2200      	movs	r2, #0
 8008cbc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008cbe:	7dfb      	ldrb	r3, [r7, #23]
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	75fb      	strb	r3, [r7, #23]
 8008cc4:	7dfa      	ldrb	r2, [r7, #23]
 8008cc6:	79fb      	ldrb	r3, [r7, #7]
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d3d3      	bcc.n	8008c74 <IntToUnicode+0x18>
  }
}
 8008ccc:	bf00      	nop
 8008cce:	371c      	adds	r7, #28
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr

08008cd8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b08a      	sub	sp, #40	; 0x28
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ce0:	f107 0314 	add.w	r3, r7, #20
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	601a      	str	r2, [r3, #0]
 8008ce8:	605a      	str	r2, [r3, #4]
 8008cea:	609a      	str	r2, [r3, #8]
 8008cec:	60da      	str	r2, [r3, #12]
 8008cee:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008cf8:	d13a      	bne.n	8008d70 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	613b      	str	r3, [r7, #16]
 8008cfe:	4b1e      	ldr	r3, [pc, #120]	; (8008d78 <HAL_PCD_MspInit+0xa0>)
 8008d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d02:	4a1d      	ldr	r2, [pc, #116]	; (8008d78 <HAL_PCD_MspInit+0xa0>)
 8008d04:	f043 0301 	orr.w	r3, r3, #1
 8008d08:	6313      	str	r3, [r2, #48]	; 0x30
 8008d0a:	4b1b      	ldr	r3, [pc, #108]	; (8008d78 <HAL_PCD_MspInit+0xa0>)
 8008d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d0e:	f003 0301 	and.w	r3, r3, #1
 8008d12:	613b      	str	r3, [r7, #16]
 8008d14:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008d16:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008d1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d1c:	2302      	movs	r3, #2
 8008d1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d20:	2300      	movs	r3, #0
 8008d22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d24:	2303      	movs	r3, #3
 8008d26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008d28:	230a      	movs	r3, #10
 8008d2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d2c:	f107 0314 	add.w	r3, r7, #20
 8008d30:	4619      	mov	r1, r3
 8008d32:	4812      	ldr	r0, [pc, #72]	; (8008d7c <HAL_PCD_MspInit+0xa4>)
 8008d34:	f7f7 ffc2 	bl	8000cbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008d38:	4b0f      	ldr	r3, [pc, #60]	; (8008d78 <HAL_PCD_MspInit+0xa0>)
 8008d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d3c:	4a0e      	ldr	r2, [pc, #56]	; (8008d78 <HAL_PCD_MspInit+0xa0>)
 8008d3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d42:	6353      	str	r3, [r2, #52]	; 0x34
 8008d44:	2300      	movs	r3, #0
 8008d46:	60fb      	str	r3, [r7, #12]
 8008d48:	4b0b      	ldr	r3, [pc, #44]	; (8008d78 <HAL_PCD_MspInit+0xa0>)
 8008d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d4c:	4a0a      	ldr	r2, [pc, #40]	; (8008d78 <HAL_PCD_MspInit+0xa0>)
 8008d4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008d52:	6453      	str	r3, [r2, #68]	; 0x44
 8008d54:	4b08      	ldr	r3, [pc, #32]	; (8008d78 <HAL_PCD_MspInit+0xa0>)
 8008d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d5c:	60fb      	str	r3, [r7, #12]
 8008d5e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8008d60:	2200      	movs	r2, #0
 8008d62:	2105      	movs	r1, #5
 8008d64:	2043      	movs	r0, #67	; 0x43
 8008d66:	f7f7 ff7f 	bl	8000c68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008d6a:	2043      	movs	r0, #67	; 0x43
 8008d6c:	f7f7 ff98 	bl	8000ca0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008d70:	bf00      	nop
 8008d72:	3728      	adds	r7, #40	; 0x28
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}
 8008d78:	40023800 	.word	0x40023800
 8008d7c:	40020000 	.word	0x40020000

08008d80 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b082      	sub	sp, #8
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008d94:	4619      	mov	r1, r3
 8008d96:	4610      	mov	r0, r2
 8008d98:	f7fc f81c 	bl	8004dd4 <USBD_LL_SetupStage>
}
 8008d9c:	bf00      	nop
 8008d9e:	3708      	adds	r7, #8
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b082      	sub	sp, #8
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	460b      	mov	r3, r1
 8008dae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008db6:	78fa      	ldrb	r2, [r7, #3]
 8008db8:	6879      	ldr	r1, [r7, #4]
 8008dba:	4613      	mov	r3, r2
 8008dbc:	00db      	lsls	r3, r3, #3
 8008dbe:	1a9b      	subs	r3, r3, r2
 8008dc0:	009b      	lsls	r3, r3, #2
 8008dc2:	440b      	add	r3, r1
 8008dc4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008dc8:	681a      	ldr	r2, [r3, #0]
 8008dca:	78fb      	ldrb	r3, [r7, #3]
 8008dcc:	4619      	mov	r1, r3
 8008dce:	f7fc f854 	bl	8004e7a <USBD_LL_DataOutStage>
}
 8008dd2:	bf00      	nop
 8008dd4:	3708      	adds	r7, #8
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}

08008dda <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dda:	b580      	push	{r7, lr}
 8008ddc:	b082      	sub	sp, #8
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	6078      	str	r0, [r7, #4]
 8008de2:	460b      	mov	r3, r1
 8008de4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008dec:	78fa      	ldrb	r2, [r7, #3]
 8008dee:	6879      	ldr	r1, [r7, #4]
 8008df0:	4613      	mov	r3, r2
 8008df2:	00db      	lsls	r3, r3, #3
 8008df4:	1a9b      	subs	r3, r3, r2
 8008df6:	009b      	lsls	r3, r3, #2
 8008df8:	440b      	add	r3, r1
 8008dfa:	3348      	adds	r3, #72	; 0x48
 8008dfc:	681a      	ldr	r2, [r3, #0]
 8008dfe:	78fb      	ldrb	r3, [r7, #3]
 8008e00:	4619      	mov	r1, r3
 8008e02:	f7fc f89d 	bl	8004f40 <USBD_LL_DataInStage>
}
 8008e06:	bf00      	nop
 8008e08:	3708      	adds	r7, #8
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}

08008e0e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e0e:	b580      	push	{r7, lr}
 8008e10:	b082      	sub	sp, #8
 8008e12:	af00      	add	r7, sp, #0
 8008e14:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f7fc f9a1 	bl	8005164 <USBD_LL_SOF>
}
 8008e22:	bf00      	nop
 8008e24:	3708      	adds	r7, #8
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}

08008e2a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e2a:	b580      	push	{r7, lr}
 8008e2c:	b084      	sub	sp, #16
 8008e2e:	af00      	add	r7, sp, #0
 8008e30:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008e32:	2301      	movs	r3, #1
 8008e34:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	68db      	ldr	r3, [r3, #12]
 8008e3a:	2b02      	cmp	r3, #2
 8008e3c:	d001      	beq.n	8008e42 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008e3e:	f7f7 fcc5 	bl	80007cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008e48:	7bfa      	ldrb	r2, [r7, #15]
 8008e4a:	4611      	mov	r1, r2
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f7fc f94e 	bl	80050ee <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f7fc f907 	bl	800506c <USBD_LL_Reset>
}
 8008e5e:	bf00      	nop
 8008e60:	3710      	adds	r7, #16
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
	...

08008e68 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b082      	sub	sp, #8
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008e76:	4618      	mov	r0, r3
 8008e78:	f7fc f949 	bl	800510e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	687a      	ldr	r2, [r7, #4]
 8008e88:	6812      	ldr	r2, [r2, #0]
 8008e8a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008e8e:	f043 0301 	orr.w	r3, r3, #1
 8008e92:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6a1b      	ldr	r3, [r3, #32]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d005      	beq.n	8008ea8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008e9c:	4b04      	ldr	r3, [pc, #16]	; (8008eb0 <HAL_PCD_SuspendCallback+0x48>)
 8008e9e:	691b      	ldr	r3, [r3, #16]
 8008ea0:	4a03      	ldr	r2, [pc, #12]	; (8008eb0 <HAL_PCD_SuspendCallback+0x48>)
 8008ea2:	f043 0306 	orr.w	r3, r3, #6
 8008ea6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008ea8:	bf00      	nop
 8008eaa:	3708      	adds	r7, #8
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}
 8008eb0:	e000ed00 	.word	0xe000ed00

08008eb4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b082      	sub	sp, #8
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f7fc f938 	bl	8005138 <USBD_LL_Resume>
}
 8008ec8:	bf00      	nop
 8008eca:	3708      	adds	r7, #8
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b082      	sub	sp, #8
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
 8008ed8:	460b      	mov	r3, r1
 8008eda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008ee2:	78fa      	ldrb	r2, [r7, #3]
 8008ee4:	4611      	mov	r1, r2
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f7fc f963 	bl	80051b2 <USBD_LL_IsoOUTIncomplete>
}
 8008eec:	bf00      	nop
 8008eee:	3708      	adds	r7, #8
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}

08008ef4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b082      	sub	sp, #8
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	460b      	mov	r3, r1
 8008efe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008f06:	78fa      	ldrb	r2, [r7, #3]
 8008f08:	4611      	mov	r1, r2
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f7fc f944 	bl	8005198 <USBD_LL_IsoINIncomplete>
}
 8008f10:	bf00      	nop
 8008f12:	3708      	adds	r7, #8
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b082      	sub	sp, #8
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008f26:	4618      	mov	r0, r3
 8008f28:	f7fc f950 	bl	80051cc <USBD_LL_DevConnected>
}
 8008f2c:	bf00      	nop
 8008f2e:	3708      	adds	r7, #8
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b082      	sub	sp, #8
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008f42:	4618      	mov	r0, r3
 8008f44:	f7fc f94d 	bl	80051e2 <USBD_LL_DevDisconnected>
}
 8008f48:	bf00      	nop
 8008f4a:	3708      	adds	r7, #8
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}

08008f50 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b082      	sub	sp, #8
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d13c      	bne.n	8008fda <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008f60:	4a20      	ldr	r2, [pc, #128]	; (8008fe4 <USBD_LL_Init+0x94>)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	4a1e      	ldr	r2, [pc, #120]	; (8008fe4 <USBD_LL_Init+0x94>)
 8008f6c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008f70:	4b1c      	ldr	r3, [pc, #112]	; (8008fe4 <USBD_LL_Init+0x94>)
 8008f72:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008f76:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008f78:	4b1a      	ldr	r3, [pc, #104]	; (8008fe4 <USBD_LL_Init+0x94>)
 8008f7a:	2204      	movs	r2, #4
 8008f7c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008f7e:	4b19      	ldr	r3, [pc, #100]	; (8008fe4 <USBD_LL_Init+0x94>)
 8008f80:	2202      	movs	r2, #2
 8008f82:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008f84:	4b17      	ldr	r3, [pc, #92]	; (8008fe4 <USBD_LL_Init+0x94>)
 8008f86:	2200      	movs	r2, #0
 8008f88:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008f8a:	4b16      	ldr	r3, [pc, #88]	; (8008fe4 <USBD_LL_Init+0x94>)
 8008f8c:	2202      	movs	r2, #2
 8008f8e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008f90:	4b14      	ldr	r3, [pc, #80]	; (8008fe4 <USBD_LL_Init+0x94>)
 8008f92:	2200      	movs	r2, #0
 8008f94:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008f96:	4b13      	ldr	r3, [pc, #76]	; (8008fe4 <USBD_LL_Init+0x94>)
 8008f98:	2200      	movs	r2, #0
 8008f9a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008f9c:	4b11      	ldr	r3, [pc, #68]	; (8008fe4 <USBD_LL_Init+0x94>)
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008fa2:	4b10      	ldr	r3, [pc, #64]	; (8008fe4 <USBD_LL_Init+0x94>)
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008fa8:	4b0e      	ldr	r3, [pc, #56]	; (8008fe4 <USBD_LL_Init+0x94>)
 8008faa:	2200      	movs	r2, #0
 8008fac:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008fae:	480d      	ldr	r0, [pc, #52]	; (8008fe4 <USBD_LL_Init+0x94>)
 8008fb0:	f7f8 f850 	bl	8001054 <HAL_PCD_Init>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d001      	beq.n	8008fbe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008fba:	f7f7 fc07 	bl	80007cc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008fbe:	2180      	movs	r1, #128	; 0x80
 8008fc0:	4808      	ldr	r0, [pc, #32]	; (8008fe4 <USBD_LL_Init+0x94>)
 8008fc2:	f7f9 f9ae 	bl	8002322 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008fc6:	2240      	movs	r2, #64	; 0x40
 8008fc8:	2100      	movs	r1, #0
 8008fca:	4806      	ldr	r0, [pc, #24]	; (8008fe4 <USBD_LL_Init+0x94>)
 8008fcc:	f7f9 f962 	bl	8002294 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008fd0:	2280      	movs	r2, #128	; 0x80
 8008fd2:	2101      	movs	r1, #1
 8008fd4:	4803      	ldr	r0, [pc, #12]	; (8008fe4 <USBD_LL_Init+0x94>)
 8008fd6:	f7f9 f95d 	bl	8002294 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008fda:	2300      	movs	r3, #0
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3708      	adds	r7, #8
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}
 8008fe4:	20006078 	.word	0x20006078

08008fe8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b084      	sub	sp, #16
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008ffe:	4618      	mov	r0, r3
 8009000:	f7f8 f945 	bl	800128e <HAL_PCD_Start>
 8009004:	4603      	mov	r3, r0
 8009006:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009008:	7bfb      	ldrb	r3, [r7, #15]
 800900a:	4618      	mov	r0, r3
 800900c:	f000 f92a 	bl	8009264 <USBD_Get_USB_Status>
 8009010:	4603      	mov	r3, r0
 8009012:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009014:	7bbb      	ldrb	r3, [r7, #14]
}
 8009016:	4618      	mov	r0, r3
 8009018:	3710      	adds	r7, #16
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}

0800901e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800901e:	b580      	push	{r7, lr}
 8009020:	b084      	sub	sp, #16
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
 8009026:	4608      	mov	r0, r1
 8009028:	4611      	mov	r1, r2
 800902a:	461a      	mov	r2, r3
 800902c:	4603      	mov	r3, r0
 800902e:	70fb      	strb	r3, [r7, #3]
 8009030:	460b      	mov	r3, r1
 8009032:	70bb      	strb	r3, [r7, #2]
 8009034:	4613      	mov	r3, r2
 8009036:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009038:	2300      	movs	r3, #0
 800903a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800903c:	2300      	movs	r3, #0
 800903e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009046:	78bb      	ldrb	r3, [r7, #2]
 8009048:	883a      	ldrh	r2, [r7, #0]
 800904a:	78f9      	ldrb	r1, [r7, #3]
 800904c:	f7f8 fd29 	bl	8001aa2 <HAL_PCD_EP_Open>
 8009050:	4603      	mov	r3, r0
 8009052:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009054:	7bfb      	ldrb	r3, [r7, #15]
 8009056:	4618      	mov	r0, r3
 8009058:	f000 f904 	bl	8009264 <USBD_Get_USB_Status>
 800905c:	4603      	mov	r3, r0
 800905e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009060:	7bbb      	ldrb	r3, [r7, #14]
}
 8009062:	4618      	mov	r0, r3
 8009064:	3710      	adds	r7, #16
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}

0800906a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800906a:	b580      	push	{r7, lr}
 800906c:	b084      	sub	sp, #16
 800906e:	af00      	add	r7, sp, #0
 8009070:	6078      	str	r0, [r7, #4]
 8009072:	460b      	mov	r3, r1
 8009074:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009076:	2300      	movs	r3, #0
 8009078:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800907a:	2300      	movs	r3, #0
 800907c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009084:	78fa      	ldrb	r2, [r7, #3]
 8009086:	4611      	mov	r1, r2
 8009088:	4618      	mov	r0, r3
 800908a:	f7f8 fd72 	bl	8001b72 <HAL_PCD_EP_Close>
 800908e:	4603      	mov	r3, r0
 8009090:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009092:	7bfb      	ldrb	r3, [r7, #15]
 8009094:	4618      	mov	r0, r3
 8009096:	f000 f8e5 	bl	8009264 <USBD_Get_USB_Status>
 800909a:	4603      	mov	r3, r0
 800909c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800909e:	7bbb      	ldrb	r3, [r7, #14]
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3710      	adds	r7, #16
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}

080090a8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b084      	sub	sp, #16
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	460b      	mov	r3, r1
 80090b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090b4:	2300      	movs	r3, #0
 80090b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090b8:	2300      	movs	r3, #0
 80090ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80090c2:	78fa      	ldrb	r2, [r7, #3]
 80090c4:	4611      	mov	r1, r2
 80090c6:	4618      	mov	r0, r3
 80090c8:	f7f8 fe4a 	bl	8001d60 <HAL_PCD_EP_SetStall>
 80090cc:	4603      	mov	r3, r0
 80090ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090d0:	7bfb      	ldrb	r3, [r7, #15]
 80090d2:	4618      	mov	r0, r3
 80090d4:	f000 f8c6 	bl	8009264 <USBD_Get_USB_Status>
 80090d8:	4603      	mov	r3, r0
 80090da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3710      	adds	r7, #16
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}

080090e6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090e6:	b580      	push	{r7, lr}
 80090e8:	b084      	sub	sp, #16
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	6078      	str	r0, [r7, #4]
 80090ee:	460b      	mov	r3, r1
 80090f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090f2:	2300      	movs	r3, #0
 80090f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090f6:	2300      	movs	r3, #0
 80090f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009100:	78fa      	ldrb	r2, [r7, #3]
 8009102:	4611      	mov	r1, r2
 8009104:	4618      	mov	r0, r3
 8009106:	f7f8 fe8f 	bl	8001e28 <HAL_PCD_EP_ClrStall>
 800910a:	4603      	mov	r3, r0
 800910c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800910e:	7bfb      	ldrb	r3, [r7, #15]
 8009110:	4618      	mov	r0, r3
 8009112:	f000 f8a7 	bl	8009264 <USBD_Get_USB_Status>
 8009116:	4603      	mov	r3, r0
 8009118:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800911a:	7bbb      	ldrb	r3, [r7, #14]
}
 800911c:	4618      	mov	r0, r3
 800911e:	3710      	adds	r7, #16
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009124:	b480      	push	{r7}
 8009126:	b085      	sub	sp, #20
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	460b      	mov	r3, r1
 800912e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009136:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009138:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800913c:	2b00      	cmp	r3, #0
 800913e:	da0b      	bge.n	8009158 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009140:	78fb      	ldrb	r3, [r7, #3]
 8009142:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009146:	68f9      	ldr	r1, [r7, #12]
 8009148:	4613      	mov	r3, r2
 800914a:	00db      	lsls	r3, r3, #3
 800914c:	1a9b      	subs	r3, r3, r2
 800914e:	009b      	lsls	r3, r3, #2
 8009150:	440b      	add	r3, r1
 8009152:	333e      	adds	r3, #62	; 0x3e
 8009154:	781b      	ldrb	r3, [r3, #0]
 8009156:	e00b      	b.n	8009170 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009158:	78fb      	ldrb	r3, [r7, #3]
 800915a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800915e:	68f9      	ldr	r1, [r7, #12]
 8009160:	4613      	mov	r3, r2
 8009162:	00db      	lsls	r3, r3, #3
 8009164:	1a9b      	subs	r3, r3, r2
 8009166:	009b      	lsls	r3, r3, #2
 8009168:	440b      	add	r3, r1
 800916a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800916e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009170:	4618      	mov	r0, r3
 8009172:	3714      	adds	r7, #20
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr

0800917c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b084      	sub	sp, #16
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
 8009184:	460b      	mov	r3, r1
 8009186:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009188:	2300      	movs	r3, #0
 800918a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800918c:	2300      	movs	r3, #0
 800918e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009196:	78fa      	ldrb	r2, [r7, #3]
 8009198:	4611      	mov	r1, r2
 800919a:	4618      	mov	r0, r3
 800919c:	f7f8 fc5c 	bl	8001a58 <HAL_PCD_SetAddress>
 80091a0:	4603      	mov	r3, r0
 80091a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091a4:	7bfb      	ldrb	r3, [r7, #15]
 80091a6:	4618      	mov	r0, r3
 80091a8:	f000 f85c 	bl	8009264 <USBD_Get_USB_Status>
 80091ac:	4603      	mov	r3, r0
 80091ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3710      	adds	r7, #16
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}

080091ba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80091ba:	b580      	push	{r7, lr}
 80091bc:	b086      	sub	sp, #24
 80091be:	af00      	add	r7, sp, #0
 80091c0:	60f8      	str	r0, [r7, #12]
 80091c2:	607a      	str	r2, [r7, #4]
 80091c4:	603b      	str	r3, [r7, #0]
 80091c6:	460b      	mov	r3, r1
 80091c8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091ca:	2300      	movs	r3, #0
 80091cc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091ce:	2300      	movs	r3, #0
 80091d0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80091d8:	7af9      	ldrb	r1, [r7, #11]
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	687a      	ldr	r2, [r7, #4]
 80091de:	f7f8 fd75 	bl	8001ccc <HAL_PCD_EP_Transmit>
 80091e2:	4603      	mov	r3, r0
 80091e4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091e6:	7dfb      	ldrb	r3, [r7, #23]
 80091e8:	4618      	mov	r0, r3
 80091ea:	f000 f83b 	bl	8009264 <USBD_Get_USB_Status>
 80091ee:	4603      	mov	r3, r0
 80091f0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80091f2:	7dbb      	ldrb	r3, [r7, #22]
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3718      	adds	r7, #24
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}

080091fc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b086      	sub	sp, #24
 8009200:	af00      	add	r7, sp, #0
 8009202:	60f8      	str	r0, [r7, #12]
 8009204:	607a      	str	r2, [r7, #4]
 8009206:	603b      	str	r3, [r7, #0]
 8009208:	460b      	mov	r3, r1
 800920a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800920c:	2300      	movs	r3, #0
 800920e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009210:	2300      	movs	r3, #0
 8009212:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800921a:	7af9      	ldrb	r1, [r7, #11]
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	687a      	ldr	r2, [r7, #4]
 8009220:	f7f8 fcf1 	bl	8001c06 <HAL_PCD_EP_Receive>
 8009224:	4603      	mov	r3, r0
 8009226:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009228:	7dfb      	ldrb	r3, [r7, #23]
 800922a:	4618      	mov	r0, r3
 800922c:	f000 f81a 	bl	8009264 <USBD_Get_USB_Status>
 8009230:	4603      	mov	r3, r0
 8009232:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009234:	7dbb      	ldrb	r3, [r7, #22]
}
 8009236:	4618      	mov	r0, r3
 8009238:	3718      	adds	r7, #24
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}

0800923e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800923e:	b580      	push	{r7, lr}
 8009240:	b082      	sub	sp, #8
 8009242:	af00      	add	r7, sp, #0
 8009244:	6078      	str	r0, [r7, #4]
 8009246:	460b      	mov	r3, r1
 8009248:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009250:	78fa      	ldrb	r2, [r7, #3]
 8009252:	4611      	mov	r1, r2
 8009254:	4618      	mov	r0, r3
 8009256:	f7f8 fd21 	bl	8001c9c <HAL_PCD_EP_GetRxCount>
 800925a:	4603      	mov	r3, r0
}
 800925c:	4618      	mov	r0, r3
 800925e:	3708      	adds	r7, #8
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}

08009264 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009264:	b480      	push	{r7}
 8009266:	b085      	sub	sp, #20
 8009268:	af00      	add	r7, sp, #0
 800926a:	4603      	mov	r3, r0
 800926c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800926e:	2300      	movs	r3, #0
 8009270:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009272:	79fb      	ldrb	r3, [r7, #7]
 8009274:	2b03      	cmp	r3, #3
 8009276:	d817      	bhi.n	80092a8 <USBD_Get_USB_Status+0x44>
 8009278:	a201      	add	r2, pc, #4	; (adr r2, 8009280 <USBD_Get_USB_Status+0x1c>)
 800927a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800927e:	bf00      	nop
 8009280:	08009291 	.word	0x08009291
 8009284:	08009297 	.word	0x08009297
 8009288:	0800929d 	.word	0x0800929d
 800928c:	080092a3 	.word	0x080092a3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009290:	2300      	movs	r3, #0
 8009292:	73fb      	strb	r3, [r7, #15]
    break;
 8009294:	e00b      	b.n	80092ae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009296:	2303      	movs	r3, #3
 8009298:	73fb      	strb	r3, [r7, #15]
    break;
 800929a:	e008      	b.n	80092ae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800929c:	2301      	movs	r3, #1
 800929e:	73fb      	strb	r3, [r7, #15]
    break;
 80092a0:	e005      	b.n	80092ae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80092a2:	2303      	movs	r3, #3
 80092a4:	73fb      	strb	r3, [r7, #15]
    break;
 80092a6:	e002      	b.n	80092ae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80092a8:	2303      	movs	r3, #3
 80092aa:	73fb      	strb	r3, [r7, #15]
    break;
 80092ac:	bf00      	nop
  }
  return usb_status;
 80092ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3714      	adds	r7, #20
 80092b4:	46bd      	mov	sp, r7
 80092b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ba:	4770      	bx	lr

080092bc <__errno>:
 80092bc:	4b01      	ldr	r3, [pc, #4]	; (80092c4 <__errno+0x8>)
 80092be:	6818      	ldr	r0, [r3, #0]
 80092c0:	4770      	bx	lr
 80092c2:	bf00      	nop
 80092c4:	20000184 	.word	0x20000184

080092c8 <__libc_init_array>:
 80092c8:	b570      	push	{r4, r5, r6, lr}
 80092ca:	4e0d      	ldr	r6, [pc, #52]	; (8009300 <__libc_init_array+0x38>)
 80092cc:	4c0d      	ldr	r4, [pc, #52]	; (8009304 <__libc_init_array+0x3c>)
 80092ce:	1ba4      	subs	r4, r4, r6
 80092d0:	10a4      	asrs	r4, r4, #2
 80092d2:	2500      	movs	r5, #0
 80092d4:	42a5      	cmp	r5, r4
 80092d6:	d109      	bne.n	80092ec <__libc_init_array+0x24>
 80092d8:	4e0b      	ldr	r6, [pc, #44]	; (8009308 <__libc_init_array+0x40>)
 80092da:	4c0c      	ldr	r4, [pc, #48]	; (800930c <__libc_init_array+0x44>)
 80092dc:	f000 f8f6 	bl	80094cc <_init>
 80092e0:	1ba4      	subs	r4, r4, r6
 80092e2:	10a4      	asrs	r4, r4, #2
 80092e4:	2500      	movs	r5, #0
 80092e6:	42a5      	cmp	r5, r4
 80092e8:	d105      	bne.n	80092f6 <__libc_init_array+0x2e>
 80092ea:	bd70      	pop	{r4, r5, r6, pc}
 80092ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80092f0:	4798      	blx	r3
 80092f2:	3501      	adds	r5, #1
 80092f4:	e7ee      	b.n	80092d4 <__libc_init_array+0xc>
 80092f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80092fa:	4798      	blx	r3
 80092fc:	3501      	adds	r5, #1
 80092fe:	e7f2      	b.n	80092e6 <__libc_init_array+0x1e>
 8009300:	08009600 	.word	0x08009600
 8009304:	08009600 	.word	0x08009600
 8009308:	08009600 	.word	0x08009600
 800930c:	08009604 	.word	0x08009604

08009310 <malloc>:
 8009310:	4b02      	ldr	r3, [pc, #8]	; (800931c <malloc+0xc>)
 8009312:	4601      	mov	r1, r0
 8009314:	6818      	ldr	r0, [r3, #0]
 8009316:	f000 b86d 	b.w	80093f4 <_malloc_r>
 800931a:	bf00      	nop
 800931c:	20000184 	.word	0x20000184

08009320 <free>:
 8009320:	4b02      	ldr	r3, [pc, #8]	; (800932c <free+0xc>)
 8009322:	4601      	mov	r1, r0
 8009324:	6818      	ldr	r0, [r3, #0]
 8009326:	f000 b817 	b.w	8009358 <_free_r>
 800932a:	bf00      	nop
 800932c:	20000184 	.word	0x20000184

08009330 <memcpy>:
 8009330:	b510      	push	{r4, lr}
 8009332:	1e43      	subs	r3, r0, #1
 8009334:	440a      	add	r2, r1
 8009336:	4291      	cmp	r1, r2
 8009338:	d100      	bne.n	800933c <memcpy+0xc>
 800933a:	bd10      	pop	{r4, pc}
 800933c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009340:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009344:	e7f7      	b.n	8009336 <memcpy+0x6>

08009346 <memset>:
 8009346:	4402      	add	r2, r0
 8009348:	4603      	mov	r3, r0
 800934a:	4293      	cmp	r3, r2
 800934c:	d100      	bne.n	8009350 <memset+0xa>
 800934e:	4770      	bx	lr
 8009350:	f803 1b01 	strb.w	r1, [r3], #1
 8009354:	e7f9      	b.n	800934a <memset+0x4>
	...

08009358 <_free_r>:
 8009358:	b538      	push	{r3, r4, r5, lr}
 800935a:	4605      	mov	r5, r0
 800935c:	2900      	cmp	r1, #0
 800935e:	d045      	beq.n	80093ec <_free_r+0x94>
 8009360:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009364:	1f0c      	subs	r4, r1, #4
 8009366:	2b00      	cmp	r3, #0
 8009368:	bfb8      	it	lt
 800936a:	18e4      	addlt	r4, r4, r3
 800936c:	f000 f8ac 	bl	80094c8 <__malloc_lock>
 8009370:	4a1f      	ldr	r2, [pc, #124]	; (80093f0 <_free_r+0x98>)
 8009372:	6813      	ldr	r3, [r2, #0]
 8009374:	4610      	mov	r0, r2
 8009376:	b933      	cbnz	r3, 8009386 <_free_r+0x2e>
 8009378:	6063      	str	r3, [r4, #4]
 800937a:	6014      	str	r4, [r2, #0]
 800937c:	4628      	mov	r0, r5
 800937e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009382:	f000 b8a2 	b.w	80094ca <__malloc_unlock>
 8009386:	42a3      	cmp	r3, r4
 8009388:	d90c      	bls.n	80093a4 <_free_r+0x4c>
 800938a:	6821      	ldr	r1, [r4, #0]
 800938c:	1862      	adds	r2, r4, r1
 800938e:	4293      	cmp	r3, r2
 8009390:	bf04      	itt	eq
 8009392:	681a      	ldreq	r2, [r3, #0]
 8009394:	685b      	ldreq	r3, [r3, #4]
 8009396:	6063      	str	r3, [r4, #4]
 8009398:	bf04      	itt	eq
 800939a:	1852      	addeq	r2, r2, r1
 800939c:	6022      	streq	r2, [r4, #0]
 800939e:	6004      	str	r4, [r0, #0]
 80093a0:	e7ec      	b.n	800937c <_free_r+0x24>
 80093a2:	4613      	mov	r3, r2
 80093a4:	685a      	ldr	r2, [r3, #4]
 80093a6:	b10a      	cbz	r2, 80093ac <_free_r+0x54>
 80093a8:	42a2      	cmp	r2, r4
 80093aa:	d9fa      	bls.n	80093a2 <_free_r+0x4a>
 80093ac:	6819      	ldr	r1, [r3, #0]
 80093ae:	1858      	adds	r0, r3, r1
 80093b0:	42a0      	cmp	r0, r4
 80093b2:	d10b      	bne.n	80093cc <_free_r+0x74>
 80093b4:	6820      	ldr	r0, [r4, #0]
 80093b6:	4401      	add	r1, r0
 80093b8:	1858      	adds	r0, r3, r1
 80093ba:	4282      	cmp	r2, r0
 80093bc:	6019      	str	r1, [r3, #0]
 80093be:	d1dd      	bne.n	800937c <_free_r+0x24>
 80093c0:	6810      	ldr	r0, [r2, #0]
 80093c2:	6852      	ldr	r2, [r2, #4]
 80093c4:	605a      	str	r2, [r3, #4]
 80093c6:	4401      	add	r1, r0
 80093c8:	6019      	str	r1, [r3, #0]
 80093ca:	e7d7      	b.n	800937c <_free_r+0x24>
 80093cc:	d902      	bls.n	80093d4 <_free_r+0x7c>
 80093ce:	230c      	movs	r3, #12
 80093d0:	602b      	str	r3, [r5, #0]
 80093d2:	e7d3      	b.n	800937c <_free_r+0x24>
 80093d4:	6820      	ldr	r0, [r4, #0]
 80093d6:	1821      	adds	r1, r4, r0
 80093d8:	428a      	cmp	r2, r1
 80093da:	bf04      	itt	eq
 80093dc:	6811      	ldreq	r1, [r2, #0]
 80093de:	6852      	ldreq	r2, [r2, #4]
 80093e0:	6062      	str	r2, [r4, #4]
 80093e2:	bf04      	itt	eq
 80093e4:	1809      	addeq	r1, r1, r0
 80093e6:	6021      	streq	r1, [r4, #0]
 80093e8:	605c      	str	r4, [r3, #4]
 80093ea:	e7c7      	b.n	800937c <_free_r+0x24>
 80093ec:	bd38      	pop	{r3, r4, r5, pc}
 80093ee:	bf00      	nop
 80093f0:	20004b18 	.word	0x20004b18

080093f4 <_malloc_r>:
 80093f4:	b570      	push	{r4, r5, r6, lr}
 80093f6:	1ccd      	adds	r5, r1, #3
 80093f8:	f025 0503 	bic.w	r5, r5, #3
 80093fc:	3508      	adds	r5, #8
 80093fe:	2d0c      	cmp	r5, #12
 8009400:	bf38      	it	cc
 8009402:	250c      	movcc	r5, #12
 8009404:	2d00      	cmp	r5, #0
 8009406:	4606      	mov	r6, r0
 8009408:	db01      	blt.n	800940e <_malloc_r+0x1a>
 800940a:	42a9      	cmp	r1, r5
 800940c:	d903      	bls.n	8009416 <_malloc_r+0x22>
 800940e:	230c      	movs	r3, #12
 8009410:	6033      	str	r3, [r6, #0]
 8009412:	2000      	movs	r0, #0
 8009414:	bd70      	pop	{r4, r5, r6, pc}
 8009416:	f000 f857 	bl	80094c8 <__malloc_lock>
 800941a:	4a21      	ldr	r2, [pc, #132]	; (80094a0 <_malloc_r+0xac>)
 800941c:	6814      	ldr	r4, [r2, #0]
 800941e:	4621      	mov	r1, r4
 8009420:	b991      	cbnz	r1, 8009448 <_malloc_r+0x54>
 8009422:	4c20      	ldr	r4, [pc, #128]	; (80094a4 <_malloc_r+0xb0>)
 8009424:	6823      	ldr	r3, [r4, #0]
 8009426:	b91b      	cbnz	r3, 8009430 <_malloc_r+0x3c>
 8009428:	4630      	mov	r0, r6
 800942a:	f000 f83d 	bl	80094a8 <_sbrk_r>
 800942e:	6020      	str	r0, [r4, #0]
 8009430:	4629      	mov	r1, r5
 8009432:	4630      	mov	r0, r6
 8009434:	f000 f838 	bl	80094a8 <_sbrk_r>
 8009438:	1c43      	adds	r3, r0, #1
 800943a:	d124      	bne.n	8009486 <_malloc_r+0x92>
 800943c:	230c      	movs	r3, #12
 800943e:	6033      	str	r3, [r6, #0]
 8009440:	4630      	mov	r0, r6
 8009442:	f000 f842 	bl	80094ca <__malloc_unlock>
 8009446:	e7e4      	b.n	8009412 <_malloc_r+0x1e>
 8009448:	680b      	ldr	r3, [r1, #0]
 800944a:	1b5b      	subs	r3, r3, r5
 800944c:	d418      	bmi.n	8009480 <_malloc_r+0x8c>
 800944e:	2b0b      	cmp	r3, #11
 8009450:	d90f      	bls.n	8009472 <_malloc_r+0x7e>
 8009452:	600b      	str	r3, [r1, #0]
 8009454:	50cd      	str	r5, [r1, r3]
 8009456:	18cc      	adds	r4, r1, r3
 8009458:	4630      	mov	r0, r6
 800945a:	f000 f836 	bl	80094ca <__malloc_unlock>
 800945e:	f104 000b 	add.w	r0, r4, #11
 8009462:	1d23      	adds	r3, r4, #4
 8009464:	f020 0007 	bic.w	r0, r0, #7
 8009468:	1ac3      	subs	r3, r0, r3
 800946a:	d0d3      	beq.n	8009414 <_malloc_r+0x20>
 800946c:	425a      	negs	r2, r3
 800946e:	50e2      	str	r2, [r4, r3]
 8009470:	e7d0      	b.n	8009414 <_malloc_r+0x20>
 8009472:	428c      	cmp	r4, r1
 8009474:	684b      	ldr	r3, [r1, #4]
 8009476:	bf16      	itet	ne
 8009478:	6063      	strne	r3, [r4, #4]
 800947a:	6013      	streq	r3, [r2, #0]
 800947c:	460c      	movne	r4, r1
 800947e:	e7eb      	b.n	8009458 <_malloc_r+0x64>
 8009480:	460c      	mov	r4, r1
 8009482:	6849      	ldr	r1, [r1, #4]
 8009484:	e7cc      	b.n	8009420 <_malloc_r+0x2c>
 8009486:	1cc4      	adds	r4, r0, #3
 8009488:	f024 0403 	bic.w	r4, r4, #3
 800948c:	42a0      	cmp	r0, r4
 800948e:	d005      	beq.n	800949c <_malloc_r+0xa8>
 8009490:	1a21      	subs	r1, r4, r0
 8009492:	4630      	mov	r0, r6
 8009494:	f000 f808 	bl	80094a8 <_sbrk_r>
 8009498:	3001      	adds	r0, #1
 800949a:	d0cf      	beq.n	800943c <_malloc_r+0x48>
 800949c:	6025      	str	r5, [r4, #0]
 800949e:	e7db      	b.n	8009458 <_malloc_r+0x64>
 80094a0:	20004b18 	.word	0x20004b18
 80094a4:	20004b1c 	.word	0x20004b1c

080094a8 <_sbrk_r>:
 80094a8:	b538      	push	{r3, r4, r5, lr}
 80094aa:	4c06      	ldr	r4, [pc, #24]	; (80094c4 <_sbrk_r+0x1c>)
 80094ac:	2300      	movs	r3, #0
 80094ae:	4605      	mov	r5, r0
 80094b0:	4608      	mov	r0, r1
 80094b2:	6023      	str	r3, [r4, #0]
 80094b4:	f7f7 fa46 	bl	8000944 <_sbrk>
 80094b8:	1c43      	adds	r3, r0, #1
 80094ba:	d102      	bne.n	80094c2 <_sbrk_r+0x1a>
 80094bc:	6823      	ldr	r3, [r4, #0]
 80094be:	b103      	cbz	r3, 80094c2 <_sbrk_r+0x1a>
 80094c0:	602b      	str	r3, [r5, #0]
 80094c2:	bd38      	pop	{r3, r4, r5, pc}
 80094c4:	20006480 	.word	0x20006480

080094c8 <__malloc_lock>:
 80094c8:	4770      	bx	lr

080094ca <__malloc_unlock>:
 80094ca:	4770      	bx	lr

080094cc <_init>:
 80094cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ce:	bf00      	nop
 80094d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094d2:	bc08      	pop	{r3}
 80094d4:	469e      	mov	lr, r3
 80094d6:	4770      	bx	lr

080094d8 <_fini>:
 80094d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094da:	bf00      	nop
 80094dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094de:	bc08      	pop	{r3}
 80094e0:	469e      	mov	lr, r3
 80094e2:	4770      	bx	lr
